[
  {
    "name": "0hd Demonoid",
    "desc": "  See {Demonoid}.\n",
    "grid": []
  },
  {
    "name": "101",
    "desc": " (p5)  Found by Achim Flammenkamp in August 1994.  The name was\n   suggested by Bill Gosper, noting that the {phase} shown below\n   displays the period in binary.\n",
    "grid": [
      "000011000000110000",
      "000101000000101000",
      "000100000000001000",
      "110100000000001011",
      "110101001100101011",
      "000101010010101000",
      "000101010010101000",
      "110101001100101011",
      "110100000000001011",
      "000100000000001000",
      "000101000000101000",
      "000011000000110000"
    ]
  },
  {
    "name": "10hd Demonoid",
    "desc": "  See {Demonoid}.\n",
    "grid": []
  },
  {
    "name": "119P4H1V0",
    "desc": " (c/4 orthogonally, p4)  A {spaceship} discovered by Dean\n   Hickerson in December 1989, the first spaceship of its kind to be\n   found. Hickerson then found a small {tagalong} for this spaceship\n   which could be attached to one side or both. These three variants of\n   119P4H1V0 were the only known c/4 orthogonal spaceships until July\n   1992 when Hartmut Holzwart discovered a larger spaceship, 163P4H1V0.\n",
    "grid": [
      "00000000000000000000000000000000010",
      "00000000000000001000000000000000101",
      "00000010100000010000011000000001000",
      "00000010000100001011111100001100000",
      "00000010111111110000000000100101110",
      "00000000010000010000000111100001110",
      "00001100000000000000000111010000000",
      "01001100000001100000000110000000000",
      "01001000000000000000000000000000000",
      "10000000000000000000000000000000000",
      "01001000000000000000000000000000000",
      "01001100000001100000000110000000000",
      "00001100000000000000000111010000000",
      "00000000010000010000000111100001110",
      "00000010111111110000000000100101110",
      "00000010000100001011111100001100000",
      "00000010100000010000011000000001000",
      "00000000000000001000000000000000101",
      "00000000000000000000000000000000010"
    ]
  },
  {
    "name": "1-2-3",
    "desc": " (p3)  Found by Dave Buckingham, August 1972. This is one of only\n   three essentially different p3 {oscillator}s with only three cells in\n   the {rotor}.  The others are {stillater} and {cuphook}.\n",
    "grid": [
      "0011000000",
      "1001000000",
      "1101011000",
      "0101001000",
      "0100001011",
      "0011101011",
      "0000010000",
      "0000100000",
      "0000110000"
    ]
  },
  {
    "name": "1-2-3-4",
    "desc": " (p4)  See also {Achim's p4}.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00010101000",
      "00010001000",
      "11010101011",
      "10100000101",
      "00011111000",
      "00000000000",
      "00000100000",
      "00001010000",
      "00000100000"
    ]
  },
  {
    "name": "135-degree MWSS-to-G",
    "desc": "  The following {converter}, discovered by\n   Matthias Merzenich in July 2013.  It accepts an {MWSS} as input, and\n   produces an output {glider} travelling at a 135-degree angle relative\n   to the input direction.\n",
    "grid": [
      "00000011000000",
      "00000010101101",
      "00000000101011",
      "00000000110000",
      "00000000000000",
      "00000000000000",
      "01111100000110",
      "10000100000110",
      "00000100000000",
      "10001000000000",
      "00100000000000"
    ]
  },
  {
    "name": "14-ner",
    "desc": "  = {fourteener}\n",
    "grid": []
  },
  {
    "name": "17c/45 spaceship",
    "desc": "  A {spaceship} travelling at seventeen forty-fifths\n   of the {speed of light}.  This was the first known {macro-spaceship}\n   speed.  See {Caterpillar} for details.\n",
    "grid": []
  },
  {
    "name": "180-degree kickback",
    "desc": "  The only other two-{glider} collision besides the\n   standard {kickback} that produces a clean output glider with no\n   leftover {ash}.  The 180-degree change in direction is occasionally\n   useful in {glider synthesis}, but is rarely used in {signal}\n   circuitry or in {self-supporting} patterns like the {Caterpillar} or\n   {Centipede}, because 90-degree collisions are generally much easier\n   to arrange.\n",
    "grid": [
      "010",
      "100",
      "111",
      "000",
      "000",
      "011",
      "101",
      "001"
    ]
  },
  {
    "name": "1G seed",
    "desc": "  See {seed}.\n",
    "grid": []
  },
  {
    "name": "(2,1)c/6 spaceship",
    "desc": "  A {knightship} that travels obliquely at the\n   fastest possible speed.  To date the only known example of a\n   spaceship with this velocity is {Sir Robin}.\n",
    "grid": []
  },
  {
    "name": "(23,5)c/79 Herschel climber",
    "desc": "  The following glider-supported\n   {Herschel climber} reaction used in the {self-supporting} {waterbear}\n   {knightship}, which can be repeated every 79 ticks, moving the\n   {Herschel} 23 cells to the right and 5 cells upward, and releasing\n   two {glider}s to the northwest and southwest.  As the diagram shows,\n   it is possible to substitute a loaf or other {still life}s for some\n   or all of the support gliders.  This fact is used to advantage at the\n   front end of the waterbear.\n",
    "grid": [
      "000000000000000101000000000000000100",
      "000000000000000110000000000000001010",
      "000000000000000010000000000000001001",
      "000000000000000000000000000000000110",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "100000000000000000000000000000000000",
      "101000000000000000000000000000000000",
      "111000000000000000000000000000000000",
      "001000000000000000000000000000000000"
    ]
  },
  {
    "name": "24-cell quadratic growth",
    "desc": "  A 39786x143 {quadratic growth} pattern found\n   by Michael Simkin in October 2014, two days after\n   {25-cell quadratic growth} and a week before\n   {switch-engine ping-pong}.\n",
    "grid": []
  },
  {
    "name": "25-cell quadratic growth",
    "desc": "  A 25-cell quadratic growth pattern found by\n   Michael Simkin in October 2014, with a bounding box of 21372x172. It\n   was the smallest-population quadratic growth pattern for two days,\n   until the discovery of {24-cell quadratic growth}. It superseded\n   {wedge}, which had held the record for eight years.  See\n   {switch-engine ping-pong} for the lowest-population\n   {superlinear growth} pattern as of July 2018, along with a list of\n   the record-holders.\n",
    "grid": []
  },
  {
    "name": "25P3H1V0.1",
    "desc": " (c/3 orthogonally, p3)  A {spaceship} discovered by Dean\n   Hickerson in August 1989.  It was the first c/3 spaceship to be\n   discovered. In terms of its 25 cells, it is tied with {25P3H1V0.2} as\n   the smallest c/3 spaceship.  Unlike 25P3H1V0.2, it has a population\n   of 25 in all of its phases, as well as a smaller bounding box.\n",
    "grid": [
      "0000000110100000",
      "0000110101101110",
      "0111100110000001",
      "1000010001000110",
      "0110000000000000"
    ]
  },
  {
    "name": "25P3H1V0.2",
    "desc": " (c/3 orthogonally, p3)  A {spaceship} discovered by David\n   Bell in early 1992, with a minimum of 25 cells - the lowest number of\n   cells known for any c/3 spaceship.  A note in\n   {Spaceships in Conway's Life} indicates that it was found with a\n   search that limited the number of live cells in each column, and\n   possibly also the maximum cross-section (4 cells in this case).  See\n   also {edge-repair spaceship} for a very similar c/3 spaceship with a\n   minimum population of 26.\n",
    "grid": [
      "0000000000100000",
      "0000000011101110",
      "0000000110000001",
      "0010001001000110",
      "0111100000000000",
      "1000100000000000",
      "0101001000000000",
      "0000010000000000"
    ]
  },
  {
    "name": "26-cell quadratic growth",
    "desc": "  = {wedge}.\n",
    "grid": []
  },
  {
    "name": "295P5H1V1",
    "desc": " (c/5 diagonally, p5) The first {spaceship} of its type to be\n   discovered, found by Jason Summers on 22 November 2000.\n",
    "grid": [
      "0000000000000110000000000000000000000000000000000000",
      "0000011000011010100000000000000000000000000000000000",
      "0000111000011110000000000000000000000000000000000000",
      "0001100000011000001000000000000000000000000000000000",
      "0011001100010010010000000000000000000000000000000000",
      "0110000010000000100110000000000000000000000000000000",
      "0110100011110000000000000000000000000000000000000000",
      "0000100011001101000000000000000000000000000000000000",
      "0000011100001010000000000000000000000000000000000000",
      "0000001100011001000000000000000000000000000000000000",
      "0000001000001000000000000000000000000000000000000000",
      "0111101001001000100000000000000000000000000000000000",
      "0111000111110011111110100000000000000000000000000000",
      "1010000100000000001001100000000000000000000000000000",
      "1110100010001000001110000000000000000000000000000000",
      "0000000101001000000011000000000000000000000000000000",
      "0100010000011000000001100101000000000000000000000000",
      "0000100000001000000001110101110000000000000000000000",
      "0001000000001110000001000010000000000000000000000000",
      "0000010000001010000010100000000000000000000000000000",
      "0000010000001011000100001000000000000000000000000000",
      "0000000000000101111000100000100100000000000000000000",
      "0000000000001100110101000101110000000000000000000000",
      "0000000000000000010000001001110001110000000000000000",
      "0000000000000000000010010000001100000000000000000000",
      "0000000000000000110000100100000000001100000000000000",
      "0000000000000000001000000000000010001000000000000000",
      "0000000000000000110000110000000010000000000000000000",
      "0000000000000000010001110000000010101010000000000000",
      "0000000000000000010000110000000010000011000000000000",
      "0000000000000000000000001000000001001110000000000000",
      "0000000000000000000001001000000001000000001000000000",
      "0000000000000000000000000011110000000011000100000000",
      "0000000000000000000000010000001100000011000100000000",
      "0000000000000000000000010000100000000000010000000000",
      "0000000000000000000000010000000000000001000000000000",
      "0000000000000000000000000110101000000010010000000000",
      "0000000000000000000000000100001000000000111000000000",
      "0000000000000000000000000000111011001000100010110000",
      "0000000000000000000000000000010011010000010001001000",
      "0000000000000000000000000000000000000110010001000000",
      "0000000000000000000000000000000000101101101001100010",
      "0000000000000000000000000000000100000100010000000101",
      "0000000000000000000000000000000011000000000000110001",
      "0000000000000000000000000000000000000010000000110000",
      "0000000000000000000000000000000000000001110001100100",
      "0000000000000000000000000000000000000010010111000000",
      "0000000000000000000000000000000000000010000110000000",
      "0000000000000000000000000000000000000001000000000000",
      "0000000000000000000000000000000000000000001001000000",
      "0000000000000000000000000000000000000000010000000000",
      "0000000000000000000000000000000000000000001100000000"
    ]
  },
  {
    "name": "2c/3",
    "desc": "  Two thirds of the speed of light - the speed of signals in a\n   {2c/3 wire} or of some {against the grain} {negative spaceship}\n   signals in the {zebra stripes} {agar}, and also the speed of\n   {burn}ing of the {blinker fuse} and the {bi-block fuse}.\n",
    "grid": []
  },
  {
    "name": "2c/3 wire",
    "desc": "  A {wire} discovered by Dean Hickerson in March 1997, using\n   his {dr} {search program}.  It supports {signal}s that travel through\n   the wire diagonally at two thirds of the {speed of light}.\n",
    "grid": [
      "0000001001000000000000000000000000000000000000000",
      "0000111111000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000",
      "0001001111110000000000000000000000000000000000000",
      "1101010100001000000000000000000000000000000000000",
      "1101010111111000000000000000000000000000000000000",
      "0000110100000001000000000000000000000000000000000",
      "0000000100111111000000000000000000000000000000000",
      "0000000101000000000000000000000000000000000000000",
      "0000001101001111110000000000000000000000000000000",
      "0000000001010000001000000000000000000000000000000",
      "0000000001010011111000000000000000000000000000000",
      "0000000000110100000001000000000000000000000000000",
      "0000000000000100111111000000000000000000000000000",
      "0000000000000101000000000000000000000000000000000",
      "0000000000001101001111110000000000000000000000000",
      "0000000000000001010000001000000000000000000000000",
      "0000000000000001010011111000000000000000000000000",
      "0000000000000000110100000001000000000000000000000",
      "0000000000000000000100111111000000000000000000000",
      "0000000000000000000101000000000000000000000000000",
      "0000000000000000001101001111110000000000000000000",
      "0000000000000000000001010000001000000000000000000",
      "0000000000000000000001010011111000000000000000000",
      "0000000000000000000000110100000001000000000000000",
      "0000000000000000000000000100111111000000000000000",
      "0000000000000000000000000101000000000000000000000",
      "0000000000000000000000001101001111110000000000000",
      "0000000000000000000000000001010000001000000000000",
      "0000000000000000000000000001010011111000000000000",
      "0000000000000000000000000000110100000001000000000",
      "0000000000000000000000000000000100111111000000000",
      "0000000000000000000000000000000101000000000000000",
      "0000000000000000000000000000001101001111110000000",
      "0000000000000000000000000000000001010000001000000",
      "0000000000000000000000000000000001010011111000000",
      "0000000000000000000000000000000000110100000001000",
      "0000000000000000000000000000000000000100111111000",
      "0000000000000000000000000000000000000101000000000",
      "0000000000000000000000000000000000001101001111110",
      "0000000000000000000000000000000000000001010000001",
      "0000000000000000000000000000000000000001010011101",
      "0000000000000000000000000000000000000000110100010",
      "0000000000000000000000000000000000000000000100100",
      "0000000000000000000000000000000000000000000101000",
      "0000000000000000000000000000000000000000001101010",
      "0000000000000000000000000000000000000000000000110"
    ]
  },
  {
    "name": "2c/5 spaceship",
    "desc": "  A {spaceship} travelling at two fifths of the\n   {speed of light}.  The only such spaceships that are currently known\n   travel orthogonally.  Examples include {30P5H2V0}, {44P5H2V0},\n   {60P5H2V0}, and {70P5H2V0}.  As of June 2018, only 30P5H2V0 and\n   60P5H2V0 have known {glider synthesis} {recipe}s.\n",
    "grid": []
  },
  {
    "name": "2c/7 spaceship",
    "desc": "  A {spaceship} travelling at two sevenths of the\n   {speed of light}.  The only such spaceships that are currently known\n   travel orthogonally.  The first to be found was the {weekender},\n   found by David Eppstein in January 2000.  See also\n   {weekender distaff}.\n",
    "grid": []
  },
  {
    "name": "2 eaters",
    "desc": "  = {two eaters}\n",
    "grid": []
  },
  {
    "name": "2-engine Cordership",
    "desc": "  The smallest known Cordership, with a minimum\n   population of 100 cells, discovered by Aidan F. Pierce on 31 December\n   2017.  Luka Okanishi produced a 9-glider synthesis of the spaceship\n   on the same day.\n",
    "grid": [
      "00000000000010000000000000000000000000000",
      "00000000000010000011100000000000000000000",
      "00000000000101000110010000000000000000000",
      "00000000000010001000001000000000000000000",
      "00000000000010001000000000000000000000000",
      "00000000000000000100110000000000000000000",
      "00000000000000000011000000000001100000000",
      "00000000000000000000000000000001100000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "01110000000000000000000000000000000000011",
      "01110000000000000000000001000000000000011",
      "00100000000000011000000000110000000000000",
      "00011000000000101110000000011000000000000",
      "00001000000000100010000000000100000000000",
      "00010000000000011010000011111000000000000",
      "00000000000000001000000000010000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000",
      "01010000000000000000000000000000000000000",
      "10000000000000000000000000000000000000000",
      "01001100000000000000000000000000000000000",
      "00100010000000000000000000000000000000000",
      "00001100000000000000000000000000000000000",
      "00001000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000011000000000000000000000000000000000",
      "00000011000000000000000000000000000000000",
      "00000000000000000001000000000000000000000",
      "00000000000000000001110000000000000000000",
      "00000000000000000000110000000000000000000",
      "00000000000000000000100000000000000000000",
      "00000000000000000000000000000000000000000",
      "00000000000000000011010000000000000000000",
      "00000000000000000011110000000000000000000",
      "00000000000000000000110000000000000000000"
    ]
  },
  {
    "name": "2-glider collision",
    "desc": "  Two gliders can react with each other in many\n   different ways, either at right angles, or else head-on.  A large\n   number of the reactions cleanly destroy both gliders leaving nothing.\n   Many of the remaining reactions cleanly create some common objects,\n   and so are used as the first steps in {glider synthesis} or as part\n   of constructing interesting objects using {rake}s.  Only a small\n   number of collisions can be considered {dirty} due to creating\n   multiple objects or a mess.\n     Here is a list of the possible results along with how many\n   different ways they can occur (ignoring reflections and rotations).\n   -------------------------------\n   result     right-angle  head-on\n   -------------------------------\n   nothing             11       17\n   {beehive}            1        0\n   {B-heptomino}        1        2\n   {bi-block}           1        0\n   {blinker}            2        1\n   {block}              3        3\n   {boat}               0        1\n   {eater1}             1        0\n   {glider}             1        1\n   {honey farm}         3        2\n   {interchange}        1        0\n   {loaf}               0        1\n   {lumps of muck}      1        0\n   {octomino}           0        1\n   {pi-heptomino}       2        1\n   {pond}               1        1\n   {teardrop}           1        0\n   {traffic light}      2        1\n   {four skewed blocks} 0        1\n   {dirty}              6        0\n   -------------------------------\n   The messiest of the two-glider collisions in the \"dirty\" category is\n   {2-glider mess}.\n",
    "grid": []
  },
  {
    "name": "2-glider mess",
    "desc": "  A constellation made up of eight {blinker}s, four\n   {block}s, a {beehive} and a {ship}, plus four emitted {glider}s,\n   created by the following {2-glider collision}.\n",
    "grid": [
      "001000000000",
      "101000000000",
      "011000000000",
      "000000000001",
      "000000000110",
      "000000000011"
    ]
  },
  {
    "name": "30P5H2V0",
    "desc": " (2c/5 orthogonally, p5)  A spaceship discovered by Paul Tooke\n   on 7 December 2000.  With just 30 cells, it is currently the smallest\n   known 2c/5 spaceship.  A {glider synthesis} for 30P5H2V0 was found by\n   Martin Grant in January 2015, based on a predecessor by Tanner\n   Jacobi.\n",
    "grid": [
      "0000100000000",
      "0001110000000",
      "0011011000000",
      "0000000000000",
      "0101010100100",
      "1100010001110",
      "1100010000001",
      "0000000000101",
      "0000000010100",
      "0000000001001",
      "0000000000001"
    ]
  },
  {
    "name": "31c/240",
    "desc": "  The rate of travel of the {31c/240 Herschel-pair climber}\n   reaction, and {Caterpillar}-type spaceships based on that reaction.\n   Each {Herschel} travels 31 cells orthogonally every 240 {tick}s.\n",
    "grid": []
  },
  {
    "name": "31c/240 Herschel-pair climber",
    "desc": "  The mechanism defining the rate of\n   travel of the {Centipede} and {shield bug} spaceships.  Compare\n   {pi climber}.  It consists of a pair of {Herschel}s climbing two\n   parallel chains of blocks.  Certain spacings between the block chains\n   allow gliders from each Herschel to delete the extra ash objects\n   produced by the other Herschel.  Two more gliders escape, one to each\n   side, leaving only an exact copy of the original block chains, but\n   shifted forward by 9 cells:\n",
    "grid": [
      "1100000000000000000000000000000000000000000000000000000000011",
      "1100000000000000000000000000000000000000000000000000000000011",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000000000000000000011",
      "1100000000000000000000000000000000000000000000000000000000011",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000111000",
      "0000000000000000000000000000000000000000000000000000000100100",
      "0000000000000000000000000000000000000000000000000000000100100",
      "0000000000000000000000000000000000000000000000000000001111000",
      "0000000111000000000000000000000000000000000000000000001100000",
      "0000000010000000000000000000000000000000000000000000010000000",
      "0000001110000000000000000000000000000000000000000000001000000",
      "0000000000000000000000000000000000000000000000000000001000000"
    ]
  },
  {
    "name": "3c/7 spaceship",
    "desc": "  A {spaceship} travelling at three sevenths of the\n   {speed of light}.  The only such spaceships that are currently known\n   travel orthogonally.  The first to be found was the\n   {spaghetti monster}, found by Tim Coe in June 2016.\n",
    "grid": []
  },
  {
    "name": "3-engine Cordership",
    "desc": "  See {Cordership}.\n",
    "grid": []
  },
  {
    "name": "44P5H2V0",
    "desc": " (2c/5 orthogonally, p5)  A {spaceship} discovered by Dean\n   Hickerson on 23 July 1991, the first 2c/5 spaceship to be found.\n   Small {tagalong}s were found by Robert Wainwright and David Bell that\n   allowed the creation of arbitrarily large 2c/5 spaceships. These were\n   the only known 2c/5 spaceships until the discovery of {70P5H2V0} in\n   December 1992.\n",
    "grid": [
      "000010000010000",
      "000111000111000",
      "001001000100100",
      "011100000001110",
      "001010000010100",
      "000011000110000",
      "100001000100001",
      "000001000100000",
      "110001000100011",
      "001001000100100",
      "000010000010000"
    ]
  },
  {
    "name": "45-degree LWSS-to-G",
    "desc": "  = {45-degree MWSS-to-G}.\n",
    "grid": []
  },
  {
    "name": "45-degree MWSS-to-G",
    "desc": "  The following small {converter}, which accepts an\n   MWSS or LWSS as input and produces an output glider travelling at a\n   45-degree angle relative to the input direction.\n",
    "grid": [
      "00000000010110000100000",
      "00000000011010001010000",
      "00000000000000001010000",
      "00000001111100011011100",
      "00000010010010000000010",
      "00000011000110011011100",
      "00000000000000011010000",
      "00000000000000000000001",
      "00000000000000000000111",
      "00000000000000000001000",
      "00000000000000000001100",
      "01111100000000000000000",
      "10000100000000000000000",
      "00000100000000000000000",
      "10001000000000000000000",
      "00100000000000001100000",
      "00000000000000010010000",
      "00000000000000001100000",
      "00000000110000000000000",
      "00000001010000000000000",
      "00000001000000000000000",
      "00000011000000000000000",
      "00000000000000000001100",
      "00000000000000000001000",
      "00000000000000000000111",
      "00000000000000000000001"
    ]
  },
  {
    "name": "4-8-12 diamond",
    "desc": "  The following {pure glider generator}.\n",
    "grid": [
      "000011110000",
      "000000000000",
      "001111111100",
      "000000000000",
      "111111111111",
      "000000000000",
      "001111111100",
      "000000000000",
      "000011110000"
    ]
  },
  {
    "name": "4 boats",
    "desc": " (p2)\n",
    "grid": [
      "00010000",
      "00101000",
      "01011000",
      "10100110",
      "01100101",
      "00011010",
      "00010100",
      "00001000"
    ]
  },
  {
    "name": "4F",
    "desc": "  = {Fast Forward Force Field}.  This term is no longer in common\n   use.\n",
    "grid": []
  },
  {
    "name": "4g-to-5g reaction",
    "desc": "  A reaction involving 4 gliders which cleanly\n   produces 5 gliders.  The one shown below was found by Dieter Leithner\n   in July 1992:\n",
    "grid": [
      "101000000000000000000000000000000000000000000",
      "011000000000000000000000000000000000000000000",
      "010000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000001000000000000000000000000000",
      "000000000000000101001000000000000000000000000",
      "000000000000000011001010000000000000000000010",
      "000000000000000000001100000000000000000000110",
      "000000000000000000000000000000000000000000101"
    ]
  },
  {
    "name": "56P6H1V0",
    "desc": " (c/6 orthogonally, p6)  A 56-cell {spaceship} discovered by\n   Hartmut Holzwart in 2009, the smallest known c/6 orthogonal spaceship\n   as of July 2018.\n",
    "grid": [
      "00000111000000000011100000",
      "11101000000011000000010111",
      "00001000100100100100010000",
      "00001000001000010000010000",
      "00000000001100110000000000",
      "00000001000100100010000000",
      "00000001010000001010000000",
      "00000000111111111100000000",
      "00000000001000010000000000",
      "00000000100000000100000000",
      "00000001000000000010000000",
      "00000000100000000100000000"
    ]
  },
  {
    "name": "58P5H1V1",
    "desc": " (c/5 diagonally, p5)  A {spaceship} discovered by Matthias\n   Merzenich on 5 September 2010. In terms of its minimum population of\n   58 cells it is the smallest known c/5 diagonal spaceship. It provides\n   sparks at its trailing edge which can perturb gliders, and this\n   property was used to create the first c/5 diagonal puffers. These\n   sparks also allow the attachment of tagalongs which was used to\n   create the first c/5 diagonal wickstretcher in January 2011.\n",
    "grid": [
      "00000000000000000000110",
      "00000000000000000000110",
      "00000000000000000001001",
      "00000000000000001101001",
      "00000000000000000000001",
      "00000000000000110001001",
      "00000000000000110000010",
      "00000000000000010111110",
      "00000000000000001000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000001110000000",
      "00000000000001000000000",
      "00000000000110000000000",
      "00000110000100000000000",
      "00000111000100000000000",
      "00010000100000000000000",
      "00010001000000000000000",
      "00000001000000000000000",
      "00110101000000000000000",
      "11000001000000000000000",
      "11000011000000000000000",
      "00111100000000000000000"
    ]
  },
  {
    "name": "5c/9 wire",
    "desc": "  A {wire} discovered by Dean Hickerson in April 1997, using\n   his {dr} {search program}.  It supports {signal}s that travel through\n   the wire diagonally at five ninths of the {speed of light}.  See also\n   {2c/3 wire}.\n",
    "grid": [
      "0000101100000000000000000000000000000000000000000000",
      "0000110010000000000000000000000000000000000000000000",
      "0000000100100000000000000000000000000000000000000000",
      "0011111011010010000000000000000000000000000000000000",
      "0100100010011110000000000000000000000000000000000000",
      "0101101010100000010000000000000000000000000000000000",
      "1101011110100111110000000000000000000000000000000000",
      "0001000000101000001100000000000000000000000000000000",
      "1101011110100101101010000000000000000000000000000000",
      "1001010010110101010010000000000000000000000000000000",
      "0011001001000101000010110000000000000000000000000000",
      "0000110000111101100110010000000000000000000000000000",
      "0000100010100000010001000000000000000000000000000000",
      "0000011110101111101110001000000000000000000000000000",
      "0000000001010000101001111000000000000000000000000000",
      "0000000100010010001010000001000000000000000000000000",
      "0000000110010101111010011111000000000000000000000000",
      "0000000000110100000010100000110000000000000000000000",
      "0000000000000101111010010110101000000000000000000000",
      "0000000000000101001011010101001000000000000000000000",
      "0000000000001100100100010100001011000000000000000000",
      "0000000000000011000011110110011001000000000000000000",
      "0000000000000010001010000001000100000000000000000000",
      "0000000000000001111010111110111000100000000000000000",
      "0000000000000000000101000010100111100000000000000000",
      "0000000000000000010001001000101000000100000000000000",
      "0000000000000000011001010111101001111100000000000000",
      "0000000000000000000011010000001010000011000000000000",
      "0000000000000000000000010111101001011010100000000000",
      "0000000000000000000000010100101101010100100000000000",
      "0000000000000000000000110010010001010000101100000000",
      "0000000000000000000000001100001111011001100100000000",
      "0000000000000000000000001000101000000100010000000000",
      "0000000000000000000000000111101011111011100010000000",
      "0000000000000000000000000000010100001010011110000000",
      "0000000000000000000000000001000100100010100000010000",
      "0000000000000000000000000001100101011110100111110000",
      "0000000000000000000000000000001101000000101000001100",
      "0000000000000000000000000000000001011110100101101001",
      "0000000000000000000000000000000001010010110101010011",
      "0000000000000000000000000000000011001001000101000000",
      "0000000000000000000000000000000000110000111101100000",
      "0000000000000000000000000000000000100010100000010000",
      "0000000000000000000000000000000000011110101111101000",
      "0000000000000000000000000000000000000001010000101000",
      "0000000000000000000000000000000000000100010010001100",
      "0000000000000000000000000000000000000110010101110010",
      "0000000000000000000000000000000000000000110100000100",
      "0000000000000000000000000000000000000000000010111000",
      "0000000000000000000000000000000000000000000001100000"
    ]
  },
  {
    "name": "60P312",
    "desc": " (p312) Found by Dave Greene, 1 November 2004, based on\n   {92P156}.\n",
    "grid": [
      "000000000000000000001100000000000000000000",
      "000000000000000000001100000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000011000000000",
      "000000000000000000000011000000100100000000",
      "000000000000000000000010000000011000000000",
      "000000100000000000000010000000000000000000",
      "000001010000000000000001000000000000000000",
      "000001010000000000000000000000000000000000",
      "000000100000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000001001000000",
      "000000000000000000000000000000000111000000",
      "110000000000000000000000000000000000000011",
      "110000000000000000000000000000000000000011",
      "000000111000000000000000000000000000000000",
      "000000100100000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000001000000",
      "000000000000000000000000000000000010100000",
      "000000000000000000100000000000000010100000",
      "000000000000000000010000000000000001000000",
      "000000000110000000010000000000000000000000",
      "000000001001000000110000000000000000000000",
      "000000000110000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000001100000000000000000000",
      "000000000000000000001100000000000000000000"
    ]
  },
  {
    "name": "60P5H2V0",
    "desc": " (2c/5 orthogonally, p5)  A 60-cell {spaceship} discovered by\n   Tim Coe in May 1996.  It was the first non-c/2 orthogonal spaceship\n   to be successfully constructed via {glider synthesis}.\n",
    "grid": [
      "0000010000000100000",
      "0001101100011011000",
      "0000001100011000000",
      "0000000010100000000",
      "0100001010101000010",
      "1110000010100000111",
      "1000001010101000001",
      "0010010010100100100",
      "0011000110110001100",
      "1000000010100000001",
      "1000000110110000001"
    ]
  },
  {
    "name": "67P5H1V1",
    "desc": " (c/5 diagonally, p5)  A {spaceship} discovered by Nicolay\n   Beluchenko in July 2006. It was the smallest known c/5 diagonal\n   spaceship until the discovery of {58P5H1V1} in September 2010.\n",
    "grid": [
      "0000011100000000000000",
      "0000100011000000000000",
      "0001100010000000000000",
      "0010000010000000000000",
      "0101100001100000000000",
      "1100100000010000000000",
      "0001100100000000000000",
      "0001101100000000000000",
      "0000100000000000000000",
      "0000011111000000000000",
      "0000001001110011000000",
      "0000000001011001011000",
      "0000000001000101001000",
      "0000000000111110000010",
      "0000000001001001000001",
      "0000000000000000000001",
      "0000000000000000111000",
      "0000000000000000100000",
      "0000000000000001000000",
      "0000000000000000110000"
    ]
  },
  {
    "name": "70P5H2V0",
    "desc": " (2c/5 orthogonally, p5)  A {spaceship} discovered by Hartmut\n   Holzwart on 5 December 1992.\n",
    "grid": [
      "001000000000000100",
      "010100000000001010",
      "110110000000011011",
      "110000000000000011",
      "001000000000000100",
      "001111000000111100",
      "001001100001100100",
      "000110010010011000",
      "000011011110110000",
      "000001010010100000",
      "000000100001000000",
      "000000000000000000",
      "000001000000100000",
      "000110110011011000",
      "000010000000010000",
      "000011000000110000"
    ]
  },
  {
    "name": "7x9 eater",
    "desc": "  A high-{clearance} {eater5} variant that can suppress\n   passing gliders in tight spaces, such as on the inside corner of an\n   {R64} {Herschel conduit}.  Like the eater5 and {sidesnagger}, the 7x9\n   eater is able to eat gliders coming from two directions, though this\n   ability is not commonly used.\n",
    "grid": [
      "010000000000",
      "001000000000",
      "111000000000",
      "000000000000",
      "000000100000",
      "000001000000",
      "000001110000",
      "000000000000",
      "000000000000",
      "000000100011",
      "000001010001",
      "000001100010",
      "000000000100",
      "000001111101",
      "000001000011",
      "000000111000",
      "000000001011",
      "000000000101"
    ]
  },
  {
    "name": "83P7H1V1",
    "desc": "  = {lobster}\n",
    "grid": []
  },
  {
    "name": "86P5H1V1",
    "desc": " (c/5 diagonally, p5)  A {spaceship} discovered by Jason\n   Summers on January 8, 2005.  It was the smallest known c/5 diagonal\n   spaceship until the discovery of {67P5H1V1} in July 2006.\n",
    "grid": [
      "00000000011100000000000",
      "00000000100000000000000",
      "00000001000000000000000",
      "00000000000110000000000",
      "00000000110100000000000",
      "00000000000000111000000",
      "00000000000100110011000",
      "00100000000110100011000",
      "01001000000100110000000",
      "10001000000000000000000",
      "10000000000010010000000",
      "10011011100010001101100",
      "00010001001100100100000",
      "00000000000000000110010",
      "00000111100010000010001",
      "00000110101000000000010",
      "00000100000100000011000",
      "00000000000111000000000",
      "00000011000001101000000",
      "00000011000100001000000",
      "00000000000100000000000",
      "00000000000001010000000",
      "00000000000000100000000"
    ]
  },
  {
    "name": "90-degree kickback",
    "desc": "  See {kickback reaction}.\n",
    "grid": []
  },
  {
    "name": "92P156",
    "desc": " (p156) Discovered by Jason Summers on October 31, 2004.  It is\n   actually an eight-barrel {glider gun}, with all output gliders\n   suppressed by {eater1}s. Replacing each pair of eater1s with a\n   {beehive} doubles the period and produces {60P312}.\n",
    "grid": [
      "000000000000000000001100000000000000000000",
      "000000000000000000001100000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000001100000000000000000000001100000000",
      "000000000100000000000011000000001000000000",
      "000000000101000000000010000000101000000000",
      "000001000011000000000010000000110000100000",
      "000001110000000000000001000000000011100000",
      "000000001000000000000000000000000100000000",
      "000000011000000000000000000000000110000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000001001000000",
      "000000000000000000000000000000000111000000",
      "110000000000000000000000000000000000000011",
      "110000000000000000000000000000000000000011",
      "000000111000000000000000000000000000000000",
      "000000100100000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000011000000000000000000000000110000000",
      "000000001000000000000000000000000100000000",
      "000001110000000000100000000000000011100000",
      "000001000011000000010000000000110000100000",
      "000000000101000000010000000000101000000000",
      "000000000100000000110000000000001000000000",
      "000000001100000000000000000000001100000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000001100000000000000000000",
      "000000000000000000001100000000000000000000"
    ]
  },
  {
    "name": "9hd",
    "desc": "  Separated by 9 {half diagonal}s.  Specifically used to describe\n   the distance between the two {construction lane}s in the\n   {linear propagator}.\n",
    "grid": []
  },
  {
    "name": "Achim's p144",
    "desc": " (p144)  This was found (minus the blocks shown below) on\n   a cylinder of width 22 by Achim Flammenkamp in July 1994.  Dean\n   Hickerson reduced it to a finite form using {figure-8}s the same day.\n   The neater finite form shown here, replacing the figure-8s with\n   blocks, was found by David Bell in August 1994.  See {factory} for a\n   use of this oscillator.\n",
    "grid": [
      "1100000000000000000000000011",
      "1100000000000000000000000011",
      "0000000000000000001100000000",
      "0000000000000000010010000000",
      "0000000000000000001100000000",
      "0000000000000010000000000000",
      "0000000000000101000000000000",
      "0000000000001000100000000000",
      "0000000000001001000000000000",
      "0000000000000000000000000000",
      "0000000000001001000000000000",
      "0000000000010001000000000000",
      "0000000000001010000000000000",
      "0000000000000100000000000000",
      "0000000011000000000000000000",
      "0000000100100000000000000000",
      "0000000011000000000000000000",
      "1100000000000000000000000011",
      "1100000000000000000000000011"
    ]
  },
  {
    "name": "Achim's p16",
    "desc": " (p16)  Found by Achim Flammenkamp, July 1994.\n",
    "grid": [
      "0000000110000",
      "0000000101000",
      "0010000101100",
      "0110000010000",
      "1001000000000",
      "1110000000000",
      "0000000000000",
      "0000000000111",
      "0000000001001",
      "0000100000110",
      "0011010000100",
      "0001010000000",
      "0000110000000"
    ]
  },
  {
    "name": "Achim's p4",
    "desc": " (p4)  Dave Buckingham found this in a less compact form\n   (using two halves of {sombreros}) in 1976.  The form shown here was\n   found by Achim Flammenkamp in 1988.  The {rotor} is two copies of the\n   rotor of {1-2-3-4}, so the oscillator is sometimes called the \"dual\n   1-2-3-4\".\n",
    "grid": [
      "00110001100",
      "01001010010",
      "01011011010",
      "11000000011",
      "00101010100",
      "11000000011",
      "01011011010",
      "01001010010",
      "00110001100"
    ]
  },
  {
    "name": "Achim's p5",
    "desc": "  = {pseudo-barberpole}\n",
    "grid": []
  },
  {
    "name": "Achim's p8",
    "desc": " (p8)  Found by Achim Flammenkamp, July 1994.\n",
    "grid": [
      "011000000",
      "100000000",
      "010001000",
      "010001100",
      "000101000",
      "001100010",
      "000100010",
      "000000001",
      "000000110"
    ]
  },
  {
    "name": "acorn",
    "desc": " (stabilizes at time 5206)  A {methuselah} found by Charles\n   Corderman.  It has a final population of 633 and covers an area of\n   215 by 168 cells, not counting the 13 gliders it produces.  Its {ash}\n   consists of typical stable objects and blinkers, along with the\n   relatively rare {mango} and a temporary {eater1}.\n",
    "grid": [
      "0100000",
      "0001000",
      "1100111"
    ]
  },
  {
    "name": "A for all",
    "desc": " (p6)  Found by Dean Hickerson in March 1993.\n",
    "grid": [
      "0000110000",
      "0001001000",
      "0001111000",
      "0101001010",
      "1000000001",
      "1000000001",
      "0101001010",
      "0001111000",
      "0001001000",
      "0000110000"
    ]
  },
  {
    "name": "against the grain",
    "desc": "  A term used for {negative spaceship}s travelling in\n   {zebra stripes} agar, perpendicular to the stripes, and also for\n   {against-the-grain grey ship}s.\n     Below is a sample {signal}, found by Hartmut Holzwart in April\n   2006, that travels against the grain at {2c/3}.  This \"negative\n   spaceship\" travels upward and will quickly reach the edge of the\n   finite patch of stabilized agar shown here.\n",
    "grid": [
      "0001001001001001001001001001001001000",
      "0111111111111111111111111111111111110",
      "1000000000000000000000000000000000001",
      "0111111111111111111111111111111111110",
      "0000000000000000000000000000000000000",
      "0111111111111111111111111111111111110",
      "1000000000000000000000000000000000001",
      "0111111111111111111111111111111111110",
      "0000000000000000000000000000000000000",
      "0111111111111111111111111111111111110",
      "1000000000000000000000000000000000001",
      "0111111111111111111111111111111111110",
      "0000000000000000000000000000000000000",
      "0111111111111111111111111111111111110",
      "1000000000000000000000000000000000001",
      "0111111111111111110011111111111111110",
      "0000000000000000000000000000000000000",
      "0111111111111111000000111111111111110",
      "1000000000000000100001000000000000001",
      "0111111111111111100001111111111111110",
      "0000000000000000000000000000000000000",
      "0111111111111100011110001111111111110",
      "1000000000000000001100000000000000001",
      "0111111111111000000000000111111111110",
      "0000000000000100000000001000000000000",
      "0111111111111110000000011111111111110",
      "1000000000000001000000100000000000001",
      "0111111111111111000000111111111111110",
      "0000000000110000100001000011000000000",
      "0111111100000011110011110000001111110",
      "1000000010001100010010001100010000001",
      "0111111100000000010010000000001111110",
      "0000000001000001000000100000100000000",
      "0111111111000000100001000000111111110",
      "1000000000100001101101100001000000001",
      "0111111111110000100001000011111111110",
      "0000000000001100001100001100000000000",
      "0111111100111010010010010111001111110",
      "1000000000000001110011100000000000001",
      "0111110000001110100001011100000011110",
      "0000001000010000000000000010000100000",
      "0111111000000001000000100000000111110",
      "1000000100011001001100100110001000001",
      "0111111110000010110011010000011111110",
      "0000000001001011000000110100100000000",
      "0111111111000110000000011000111111110",
      "1000000000010000000000000010000000001",
      "0111111111111111100001111111111111110",
      "0000000000000000011110000000000000000",
      "0111111111111111110011111111111111110",
      "1000000000000000000000000000000000001",
      "0111111111111111111111111111111111110",
      "0001001001001001001001001001001001000"
    ]
  },
  {
    "name": "against-the-grain grey ship",
    "desc": "  A {grey ship} in which the region of\n   density 1/2 consists of lines of ON cells lying perpendicular to the\n   direction in which the spaceship moves.  See also\n   {with-the-grain grey ship}.\n",
    "grid": []
  },
  {
    "name": "agar",
    "desc": "  Any pattern covering the whole plane that is periodic in both\n   space and time.  The simplest (nonempty) agar is the {stable} one\n   extended by the known {spacefiller}s.  For some more examples see\n   {chicken wire}, {houndstooth agar}, {onion rings}, {squaredance} and\n   {Venetian blinds}.  Tiling the plane with the pattern O......O\n   produces another interesting example: a p6 agar which has a phase of\n   {density} 3/4, which is the highest yet obtained for any phase of an\n   oscillating pattern.  See {lone dot agar} for an agar composed of\n   isolated cells.\n",
    "grid": []
  },
  {
    "name": "aircraft carrier",
    "desc": " (p1)  This is the smallest {still life} that has more\n   than one {island}.\n",
    "grid": [
      "1100",
      "1001",
      "0011"
    ]
  },
  {
    "name": "airforce",
    "desc": " (p7)  Found by Dave Buckingham in 1972.  The rotor consists\n   of two copies of that used in the {burloaferimeter}.\n",
    "grid": [
      "00000001000000",
      "00000010100000",
      "00000001000000",
      "00000000000000",
      "00000111110000",
      "00001000001011",
      "00010110001011",
      "00010100101000",
      "11010001101000",
      "11010000010000",
      "00001111100000",
      "00000000000000",
      "00000010000000",
      "00000101000000",
      "00000010000000"
    ]
  },
  {
    "name": "AK47 reaction",
    "desc": "  The following reaction (found by Rich Schroeppel and\n   Dave Buckingham) in which a honey farm predecessor, catalysed by an\n   eater and a block, reappears at another location 47 generations\n   later, having produced a glider and a traffic light.  This was in\n   1990 the basis for the Dean Hickerson's construction of the first\n   {true} p94 gun,  and for a very small (but {pseudo}) p94 glider gun\n   found by Paul Callahan in July 1994.  (The original true p94 gun was\n   enormous, and has now been superseded by comparatively small\n   {Herschel loop} guns and Mike Playle's tiny {AK94 gun}.)\n",
    "grid": [
      "0000010000",
      "0000101000",
      "0001000100",
      "0001000100",
      "0001000100",
      "0000101000",
      "0000010000",
      "0000000000",
      "0011000000",
      "0001000000",
      "1110000011",
      "1000000011"
    ]
  },
  {
    "name": "AK94 gun",
    "desc": "  The smallest known gun using the {AK47 reaction}, found by\n   Mike Playle in May 2013 using his {Bellman} program.\n",
    "grid": [
      "00000001000000010000000110000000000000",
      "00000001110000011100000110000000000000",
      "00000000001000000010000000000000000000",
      "00000000011000000110000000000000000110",
      "00000000000000000000000000000011001001",
      "00000000000000000000000000000010100110",
      "00000000000000000000000000000000011000",
      "00000100000000000000000000000000001000",
      "00000111000000000000000000000000001011",
      "00000000100000000000000000000001101001",
      "00000001100000000000000000000001101100",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000100000000000000000000",
      "00110110000000001010000000000110000000",
      "10010110000000010001000000000100000000",
      "11010000000000010001000000000011100000",
      "00010000000000010001000000000000100000",
      "00011000000000001010000000000000000000",
      "01100101000000000100000000000000000000",
      "10010011000000000000000000000000000000",
      "01100000000000000001100000000000000000",
      "00000000000000000001000000000000000000",
      "00000000000001100000111000000000000000",
      "00000000000001100000001000000000000000"
    ]
  },
  {
    "name": "Al Jolson",
    "desc": "  = {Jolson}\n",
    "grid": []
  },
  {
    "name": "almost knightship",
    "desc": "  A promising {partial result} discovered by Eugene\n   Langvagen in March 2004.  This was an early near miss in the ongoing\n   search for a small {elementary} (2,1)c/6 {knightship}. After six\n   generations, only two cells are incorrect.\n",
    "grid": [
      "0000111000000",
      "0001100110000",
      "0010011101100",
      "0111000000000",
      "0001100001100",
      "1101000000000",
      "1100111000000",
      "0000110100000",
      "1101110000000",
      "0100010110000",
      "0000010110000",
      "1000100001000",
      "1000100111011",
      "1000000000000",
      "0101001000000",
      "0000010000011",
      "0000001011000",
      "0000001100100",
      "0000000000010"
    ]
  },
  {
    "name": "almosymmetric",
    "desc": " (p2)  Found in 1971.\n",
    "grid": [
      "000010000",
      "110010100",
      "101000000",
      "000000011",
      "010000000",
      "100000010",
      "110101000",
      "000001000"
    ]
  },
  {
    "name": "ambidextrous",
    "desc": "  A type of {Herschel transceiver} where the {receiver}\n   can be used in either of two mirror-image orientations.  See also\n   {chirality}.\n",
    "grid": []
  },
  {
    "name": "anteater",
    "desc": "  A pattern that consumes {ants}.  Matthias Merzenich\n   discovered a c/5 anteater on 15 April 2011.  See {wavestretcher} for\n   details.\n",
    "grid": []
  },
  {
    "name": "antlers",
    "desc": "  = {moose antlers}\n",
    "grid": []
  },
  {
    "name": "ants",
    "desc": " (p5 wick)  The standard form is shown below.  It is also possible\n   for any ant to be displaced by one or two cells relative to either or\n   both of its neighbouring ants.  Dean Hickerson found {fencepost}s for\n   both ends of this wick in October 1992 and February 1993.  See\n   {electric fence}, and also {wickstretcher}.\n",
    "grid": [
      "11000110001100011000110001100011000110001100",
      "00110001100011000110001100011000110001100011",
      "00110001100011000110001100011000110001100011",
      "11000110001100011000110001100011000110001100"
    ]
  },
  {
    "name": "antstretcher",
    "desc": "  Any {wickstretcher} or {wavestretcher} that stretches\n   {ants}.  Nicolay Beluchenko and Hartmut Holzwart constructed the\n   following small {extensible} antstretcher in January 2006:\n",
    "grid": [
      "000000000000000000000000000000000000000000000000000000110000000",
      "000000000000000000000000000000000000000000000000000001100000000",
      "000000000000000000000000000000000000000000000001100000100000000",
      "000000000000000000000000000000000000000000000011000001100000000",
      "000000000000000000000000000000000000000000000000100001010011000",
      "000000000000000000000000000000000000000000000000001100011011110",
      "000000000000000000000000000000000000000000000000001100000000001",
      "000000000000000000000000000000000000000000000000000000000000001",
      "000000000000000000000000000000000000000000000000000000001000000",
      "000000000000000000000000000000000000000000000000000000000011000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000011100",
      "000000000000000000000000000000000000000000000000000000000110010",
      "000000000000000000000000000000011000000000000000000000000001000",
      "000000000000000000000000000000110000000000000000000000000000000",
      "000000000000000000000000000000010100000000000000000001110010000",
      "000000000000000000000000001000011100000000000000000001001110000",
      "000000000000000000000000011111011100101100000000000000001100000",
      "000000000000000000000000010011000000100011011000000000110110000",
      "000000000000000000000000000000000001000011000110110000000110000",
      "000000000000000000000000000110011011001100000110001101010000000",
      "000000000000000000000000000000000001000000011000001100000000000",
      "000000000000000000000111000100000110000000000000110000100000000",
      "000000000000000000000100000100101100000000000000000001000000000",
      "000000000000000000000010001101000000000000000000000000000000000",
      "000000000000000000000000011000101000000000000000000000000000000",
      "000000000000011100000000001000000000000000000000000000000000000",
      "000000000000010000011100110000000000000000000000000000000000000",
      "000000000000001001101110110000000000000000000000000000000000000",
      "000000000000000010000000000100000000000000000000000000000000000",
      "000000000000000001010110000100000000000000000000000000000000000",
      "000000000000000000011010000000000000000000000000000000000000000",
      "000000000000000001100010100000000000000000000000000000000000000",
      "000000000000000011000000000000000000000000000000000000000000000",
      "000000000000000000100000000000000000000000000000000000000000000",
      "000000000000000110000000000000000000000000000000000000000000000",
      "000000000000001110000000000000000000000000000000000000000000000",
      "000000000000011010000000000000000000000000000000000000000000000",
      "000000000000111101000000000000000000000000000000000000000000000",
      "000000000000000001110000000000000000000000000000000000000000000",
      "000000000000000000110000000000000000000000000000000000000000000",
      "000000000011101100000000000000000000000000000000000000000000000",
      "000000000100011100000000000000000000000000000000000000000000000",
      "000000000000111000000000000000000000000000000000000000000000000",
      "000000001010100000000000000000000000000000000000000000000000000",
      "000000011110000000000000000000000000000000000000000000000000000",
      "000000010000000000000000000000000000000000000000000000000000000",
      "000000001100000000000000000000000000000000000000000000000000000",
      "000000000100100000000000000000000000000000000000000000000000000",
      "110000000000000000000000000000000000000000000000000000000000000",
      "101000111000000000000000000000000000000000000000000000000000000",
      "100010000100000000000000000000000000000000000000000000000000000",
      "000110000000000000000000000000000000000000000000000000000000000",
      "000100000100000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "anvil",
    "desc": "  The following {induction coil}.\n",
    "grid": [
      "0111100",
      "1000010",
      "0111010",
      "0001011"
    ]
  },
  {
    "name": "apgluxe",
    "desc": "  See {apgsearch}\n",
    "grid": []
  },
  {
    "name": "apgmera",
    "desc": "  See {apgsearch}.\n",
    "grid": []
  },
  {
    "name": "apgnano",
    "desc": "  See {apgsearch}.\n",
    "grid": []
  },
  {
    "name": "apgsearch",
    "desc": "  One of several versions of a client-side Ash Pattern\n   Generator {soup} search script by Adam P. Goucher, for use with\n   Conway's Life and a wide variety of other rules. Development of the\n   original {Golly}-based Python script started in August 2014.  After\n   the addition in 2016 of apgnano (native C++) and apgmera\n   (self-modifying, 256-bit SIMD compatibility), development continues\n   in 2017 with apgluxe (Larger Than Life and Generations rules, more\n   soup shapes).  Several customized variants of the Python script have\n   also been created by other programmers, to perform types of searches\n   not supported by Goucher's original apgsearch 1.x.\n     All of these versions of the search utility work with a \"haul\" that\n   usually consists of many thousands or millions of random soup\n   patterns.  Each soup is run to stability, and detailed object\n   {census} results are reported to {Catagolue}.  For any rare objects\n   discovered in the {ash}, the source soup can be easily retrieved from\n   the Catagolue server.\n",
    "grid": []
  },
  {
    "name": "APPS",
    "desc": " (c/5 orthogonally, p30)  An asymmetric {PPS}.  The same as the\n   {SPPS}, but with the two halves 15 generations out of phase with one\n   another.  Found by Alan Hensel in May 1998.\n",
    "grid": []
  },
  {
    "name": "ark",
    "desc": "  A pair of mutually stabilizing {switch engine}s.  The archetype\n   is {Noah's ark}.  The diagram below shows an ark found by Nick Gotts\n   that takes until generation 736692 to stabilize, and can therefore be\n   considered as a {methuselah}.\n",
    "grid": [
      "00000000000000000000000000010000",
      "00000000000000000000000000001000",
      "00000000000000000000000000000100",
      "00000000000000000000000000001000",
      "00000000000000000000000000010000",
      "00000000000000000000000000000111",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "11000000000000000000000000000000",
      "00100000000000000000000000000000",
      "00100000000000000000000000000000",
      "00011110000000000000000000000000"
    ]
  },
  {
    "name": "arm",
    "desc": "  A long extension, sometimes also called a \"wing\", hanging off\n   from the main body of a {spaceship} or {puffer} perpendicular to the\n   direction of travel.  For example, here is a sparking c/3 spaceship\n   which contains two arms.\n",
    "grid": [
      "000000000000111000000000000",
      "000000000001000000000000000",
      "000000000011000000000000000",
      "000010110011001110000000000",
      "000110110110000010000110000",
      "001001100010110000110110000",
      "000000001111000000110001000",
      "000010101100000000110000000",
      "000000100000000000000000000",
      "000110000000000000000000000",
      "001100100000000000000000000",
      "000011101100000000000000000",
      "100100000111000000000000000",
      "010111101000100000000000000",
      "000000001100001000000100000",
      "000000000100001100001101110",
      "000000001000100110011000001",
      "000000000010010100100000110",
      "000000000001011100001000000",
      "000000000000111001110100000",
      "000000000001100011100000000",
      "000000000000000000100100000",
      "000000000000000000010000000"
    ]
  },
  {
    "name": "armless",
    "desc": "  A method of generating {slow salvo}s across a wide range of\n   lanes without using a {construction arm} with a movable {elbow}.\n   Instead, streams of gliders on two fixed opposing {lane}s collide\n   with each other to produce clean 90-degree output gliders.  Slowing\n   down one of the streams by 8N ticks will move the output lanes of the\n   gliders toward the source of that stream by N {full diagonal}s.  This\n   construction method was used to create the supporting slow salvos in\n   the {half-baked knightship}s, and also in the {Parallel HBK gun}.\n",
    "grid": []
  },
  {
    "name": "ash",
    "desc": "  The {stable} or oscillating objects left behind when a chaotic\n   reaction stabilizes, or \"burns out\". Experiments show that for random\n   {soup}s with moderate initial densities (say 0.25 to 0.5) the\n   resulting ash has a density of about 0.0287.  (This is, of course,\n   based on what happens in finite fields. In infinite fields the\n   situation may conceivably be different in the long run because of the\n   effect of certain initially very rare objects such as {replicator}s.)\n",
    "grid": []
  },
  {
    "name": "asynchronous",
    "desc": "  Indicates that precise relative timing is not needed for\n   two or more input {signal}s entering a {circuit}, or two or more sets\n   of {glider}s participating in a {glider synthesis}.  In some cases\n   the signals or sets of gliders can arrive in any order at all - i.e.,\n   they have non-overlapping effects.\n     However, in some cases such as {slow salvo} constructions, there is\n   a required order for some of the incoming signals.  These signals can\n   still be referred to as \"asynchronous\" because the number of ticks\n   between them is infinitely adjustable:  arbitrarily long delays can\n   be added with no change to the final result.  Compare {synchronized}.\n",
    "grid": []
  },
  {
    "name": "aVerage",
    "desc": " (p5)  Found by Dave Buckingham, 1973.  The average number of\n   live {rotor} cells is five (V), which is also the period.\n",
    "grid": [
      "0001100000000",
      "0000111000000",
      "0010000100000",
      "0101111010000",
      "0101000010010",
      "1101110010101",
      "0101000010010",
      "0101111010000",
      "0010000100000",
      "0000111000000",
      "0001100000000"
    ]
  },
  {
    "name": "B",
    "desc": "  = {B-heptomino}\n",
    "grid": []
  },
  {
    "name": "B29",
    "desc": " (c/4 diagonally, p4)  The following {spaceship}, found by Hartmut\n   Holzwart in April 2004.  A glider synthesis of this spaceship was\n   completed by Tanner Jacobi in April 2015.\n",
    "grid": [
      "00000001110000000",
      "00000001000000000",
      "11100000010000000",
      "10000001010000000",
      "01000011011110000",
      "00011110111110110",
      "00001100000001101"
    ]
  },
  {
    "name": "B-52 bomber",
    "desc": "  The following p104 {double-barrelled} {glider} {gun}. It\n   uses a {B-heptomino} and emits one glider every 52 generations. It\n   was found by Noam Elkies in March 1996, except that Elkies used\n   {blocker}s instead of {mold}s, the improvement being found by David\n   Bell later the same month.\n",
    "grid": [
      "011000000000000000000000000000000000000",
      "011000000000000000001000000000000000000",
      "000000000000000000010100000000000010100",
      "000000000000000000001000000000000100000",
      "110000000110000000000000000000000010010",
      "110100000110000000000000000000000010101",
      "000100000000000000000000000100000001001",
      "000100000000000000000000000110000000110",
      "100100000000000000000110000010000000000",
      "011000000000000000000100000000000000000",
      "000000000000000000000111000000000000000",
      "000000000000000000000000000000000000110",
      "000000000000000000000000000000000000110",
      "011000000000000000000000000000000000000",
      "100100000000000000000000000000000000000",
      "101010000000000000000101000011000001100",
      "010010000000000000000011000011000001101",
      "000001000000000000100010000000000000001",
      "001010000000000001010000000000000000001",
      "000000000000000000100000000000000001001",
      "000000000000000000000000000000000000110"
    ]
  },
  {
    "name": "B60",
    "desc": "  A {Herschel conduit} discovered by Michael Simkin in 2015 using\n   his search program, {CatForce}.  It is one of two known {Blockic}\n   {elementary conduit}s.  After 60 ticks, it produces a Herschel\n   rotated 180 degrees at (-6,-10) relative to the input.  It can most\n   easily be connected to another B60 conduit, producing a closed loop,\n   the {Simkin glider gun}.\n",
    "grid": [
      "100000000000110000011",
      "111000000000110000011",
      "001000000000000000000",
      "001000000000000110000",
      "000000000000000110000",
      "000000000000000000000",
      "000000000000000000000",
      "000000000000000000000",
      "000000000000000000000",
      "000000100000000000000",
      "000000101000000000000",
      "000000111000000000000",
      "000000001000000000000"
    ]
  },
  {
    "name": "babbling brook",
    "desc": "  Any {oscillator} whose {rotor} consists of a string of\n   cells each of which is adjacent to exactly two other rotor cells,\n   except for the endpoints which are adjacent to only one other rotor\n   cell.  Compare {muttering moat}.  Examples include the {beacon}, the\n   {great on-off}, the {light bulb} and the {spark coil}.  The following\n   less trivial example (by Dean Hickerson, August 1997) is the only one\n   known with more than four cells in its rotor.  It is p4 and has a\n   6-cell rotor.\n",
    "grid": [
      "0000000100000000",
      "0000011100001100",
      "0000100011001000",
      "0100101100101000",
      "1010100001100110",
      "0110011000010101",
      "0001010011010010",
      "0001001100010000",
      "0011000011100000",
      "0000000010000000"
    ]
  },
  {
    "name": "backrake",
    "desc": "  Another term for a backwards {rake}.  A p8 example by Jason\n   Summers is shown below.  See {total aperiodic} for a p12 example.\n",
    "grid": [
      "000001110000000000011100000",
      "000010001000000000100010000",
      "000110000100000001000011000",
      "001010110110000011011010100",
      "011010000101101101000010110",
      "100001000100101001000100001",
      "000000000000101000000000000",
      "110000000110101011000000011",
      "000000000000101000000000000",
      "000000111000000000111000000",
      "000000100010000000001000000",
      "000000101000011100000000000",
      "000000000000100100001100000",
      "000000000000000100000000000",
      "000000000001000100000000000",
      "000000000001000100000000000",
      "000000000000000100000000000",
      "000000000000101000000000000"
    ]
  },
  {
    "name": "backward glider",
    "desc": "  A {glider} which moves at least partly in the\n   opposite direction to the {puffer}(s) or {spaceship}(s) under\n   consideration.\n",
    "grid": []
  },
  {
    "name": "bait",
    "desc": "  An object in a {converter}, usually a small {still life}, that\n   is temporarily destroyed by an incoming {signal}, but in such a way\n   that a usable output signal is produced.  In general such a converter\n   produces multiple output signals (or a signal {splitter} is added)\n   and one branch of the output is routed to a {factory} mechanism that\n   rebuilds the bait object so that the converter can be re-used.\n",
    "grid": []
  },
  {
    "name": "baker",
    "desc": " (c p4 fuse)  A {fuse} by Keith McClelland.\n",
    "grid": [
      "0000000000000011",
      "0000000000000101",
      "0000000000001000",
      "0000000000010000",
      "0000000000100000",
      "0000000001000000",
      "0000000010000000",
      "0000000100000000",
      "0000001000000000",
      "0000010000000000",
      "0000100000000000",
      "0001000000000000",
      "1110000000000000",
      "0100000000000000"
    ]
  },
  {
    "name": "baker's dozen",
    "desc": " (p12)  A {loaf} {hassle}d by two {block}s and two\n   {caterer}s.  The original form (using p4 and p6 oscillators to do the\n   hassling) was found by Robert Wainwright in August 1989.\n",
    "grid": [
      "11000000000110000000000",
      "11110100000110000000000",
      "10100111000000000000000",
      "00000000000100000000000",
      "00001100001010000000000",
      "00001000001001000010000",
      "00000000000110000110000",
      "00000000000000000000000",
      "00000000000000011100101",
      "00000000001100000101111",
      "00000000001100000000011"
    ]
  },
  {
    "name": "bakery",
    "desc": " (p1)  A common formation of two bi-loaves.\n",
    "grid": [
      "0000110000",
      "0001001000",
      "0001010000",
      "0110100010",
      "1001000101",
      "1010001001",
      "0100010110",
      "0000101000",
      "0001001000",
      "0000110000"
    ]
  },
  {
    "name": "banana spark",
    "desc": "  A common three-bit {polyplet} spark used in\n   {glider synthesis} and {signal} {circuit}ry.  The {buckaroo} is an\n   {oscillator} that produces this spark.  It can be used to turn a\n   glider 90 degrees:\n",
    "grid": [
      "0010000",
      "1010000",
      "0110000",
      "0000110",
      "0000001"
    ]
  },
  {
    "name": "barberpole",
    "desc": "  Any p2 oscillator in the infinite sequence {bipole},\n   {tripole}, {quadpole}, {pentapole}, {hexapole}, {heptapole} ... (It\n   wasn't my idea to suddenly change from Latin to Greek.) This sequence\n   of oscillators was found by the MIT group in 1970. The term is also\n   used (usually in the form \"barber pole\") to describe other\n   {extensible} sections of oscillators or spaceships, especially those\n   (usually of period 2) in which all generations look alike except for\n   a translation and/or rotation/reflection.  Any barberpole can be\n   lengthened by the reaction shown in {barbershop}.  See also\n   {pseudo-barberpole}.\n",
    "grid": []
  },
  {
    "name": "barberpole intersection",
    "desc": "  = {quad}\n",
    "grid": []
  },
  {
    "name": "barbershop",
    "desc": "  An object created by Jason Summers in 1999 which builds an\n   infinite {barberpole}.  It uses {slide gun}s to repeatedly lengthen a\n   {barberpole} at a speed of c/124.  The key lengthening reaction from\n   Mark Niemiec is shown below:\n",
    "grid": [
      "00000000001010000000",
      "00000000000110000000",
      "01000000000100000100",
      "00100000000000000101",
      "11100000000000000110",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000100",
      "00000000000000001100",
      "00000000000000001010",
      "00000000110000000000",
      "00000001010000000000",
      "00000000000000000000",
      "00000101000000000000",
      "00000110000000000000"
    ]
  },
  {
    "name": "barber's pole",
    "desc": "  = {barberpole}\n",
    "grid": []
  },
  {
    "name": "barge",
    "desc": " (p1)\n",
    "grid": [
      "0100",
      "1010",
      "0101",
      "0010"
    ]
  },
  {
    "name": "basic shuttle",
    "desc": "  = {queen bee shuttle}\n",
    "grid": []
  },
  {
    "name": "beacon",
    "desc": " (p2)  The third most common {oscillator}.  Found by Conway,\n   March 1970.\n",
    "grid": [
      "1100",
      "1000",
      "0001",
      "0011"
    ]
  },
  {
    "name": "beacon maker",
    "desc": " (c p8 fuse)\n",
    "grid": [
      "0000000000000011",
      "0000000000000101",
      "0000000000001000",
      "0000000000010000",
      "0000000000100000",
      "0000000001000000",
      "0000000010000000",
      "0000000100000000",
      "0000001000000000",
      "0000010000000000",
      "0000100000000000",
      "0001000000000000",
      "1110000000000000",
      "0010000000000000",
      "0010000000000000"
    ]
  },
  {
    "name": "beehive",
    "desc": " (p1)  The second most common {still life}.\n",
    "grid": [
      "0110",
      "1001",
      "0110"
    ]
  },
  {
    "name": "beehive and dock",
    "desc": " (p1)\n",
    "grid": [
      "000110",
      "001001",
      "000110",
      "000000",
      "011110",
      "100001",
      "110011"
    ]
  },
  {
    "name": "beehive on big table",
    "desc": "  = {beehive and dock}\n",
    "grid": []
  },
  {
    "name": "beehive pusher",
    "desc": "  = {hivenudger}\n",
    "grid": []
  },
  {
    "name": "beehive stopper",
    "desc": "   A {Spartan} logic circuit discovered by Tanner\n   Jacobi on 12 May 2015.  It converts an input {glider} {signal} into a\n   {beehive}, in such a way that the beehive can cleanly absorb a single\n   glider from a perpendicular glider {stream}.  The circuit can't be\n   re-used until the beehive \"bit\" is cleared by the passage of at least\n   one perpendicular input.\n",
    "grid": [
      "0100000000000000000000000000",
      "0010000000000000000000000000",
      "1110000000000000000000000000",
      "0000000000000000000000000000",
      "0000000000000000000000000000",
      "0000000000000000100000000000",
      "0000000000000001000000000000",
      "0000000000000001110000000000",
      "0000000000000000000000000000",
      "0000000000001000000000000000",
      "0000000000001010000000000000",
      "0000000000001100000000000000",
      "0001100000100000000000000000",
      "0001100001010000000000000000",
      "0000000001010000000000000000",
      "0000000000100000000000000000",
      "0000000000000000000000001100",
      "0000000000000000000000001010",
      "0000000000000000000000000010",
      "0000000000000001100000000011",
      "0000000011000001100000000000",
      "0000000101000000000000000000",
      "0000000110000000000000000000",
      "0000000000000000000000000000",
      "0000000000110000000000000000",
      "0000000000100000000000000000",
      "0000000000011100000000000000",
      "0000000000000100000000000000"
    ]
  },
  {
    "name": "beehive wire",
    "desc": "  See {lightspeed wire}.\n",
    "grid": []
  },
  {
    "name": "beehive with tail",
    "desc": " (p1)\n",
    "grid": [
      "011000",
      "100100",
      "011010",
      "000010",
      "000011"
    ]
  },
  {
    "name": "Bellman",
    "desc": "  A program for searching catalytic reactions, developed by\n   Mike Playle, which successfully found the {Snark}.\n",
    "grid": []
  },
  {
    "name": "belly spark",
    "desc": "  The spark of a {MWSS} or {HWSS} other than the\n   {tail spark}.\n",
    "grid": []
  },
  {
    "name": "Beluchenko's p37",
    "desc": " (p37)  Found by Nicolay Beluchenko on April 14, 2009.\n   It was the first {period} 37 {oscillator} to be found, and remains\n   the smallest.\n",
    "grid": [
      "0000000000011000000000001100000000000",
      "0000000000011000000000001100000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000001000000000000000000000001000000",
      "0000010100000100000000010000010100000",
      "0000100100000101100011010000010010000",
      "0000011000000000010100000000001100000",
      "0000000000000001010101000000000000000",
      "0000000000000000100010000000000000000",
      "0000000000000000000000000000000000000",
      "1100000000000000000000000000000000011",
      "1100000000000000000000000000000000011",
      "0000011000000000000000000000001100000",
      "0000000000000000000000000000000000000",
      "0000001010000000000000000000101000000",
      "0000001001000000000000000001001000000",
      "0000000110000000000000000000110000000",
      "0000000000000000000000000000000000000",
      "0000000110000000000000000000110000000",
      "0000001001000000000000000001001000000",
      "0000001010000000000000000000101000000",
      "0000000000000000000000000000000000000",
      "0000011000000000000000000000001100000",
      "1100000000000000000000000000000000011",
      "1100000000000000000000000000000000011",
      "0000000000000000000000000000000000000",
      "0000000000000000100010000000000000000",
      "0000000000000001010101000000000000000",
      "0000011000000000010100000000001100000",
      "0000100100000101100011010000010010000",
      "0000010100000100000000010000010100000",
      "0000001000000000000000000000001000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000011000000000001100000000000",
      "0000000000011000000000001100000000000"
    ]
  },
  {
    "name": "Beluchenko's p51",
    "desc": " (p51)  Found by Nicolay Beluchenko on February 17,\n   2009.  It was the first non-{trivial} {period} 51 {oscillator} to be\n   found.\n",
    "grid": [
      "0000000000000001100011000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000001100000000000000000000011000000",
      "0000001100000000000000000000011000000",
      "0000000000000000000000000000000000000",
      "0001100000000000000000000000000011000",
      "0001100000000011000001100000000011000",
      "0000000001110110000000110111000000000",
      "0000000010100000000000000010100000000",
      "0000000011000000000000000001100000000",
      "0000000010000000000000000000100000000",
      "0000000000000000000000000000000000000",
      "0000000010000000000000000000100000000",
      "0000000110000000000000000000110000000",
      "1000000100000000000000000000010000001",
      "1000000000000000000000000000000000001",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "1000000000000000000000000000000000001",
      "1000000100000000000000000000010000001",
      "0000000110000000000000000000110000000",
      "0000000010000000000000000000100000000",
      "0000000000000000000000000000000000000",
      "0000000010000000000000000000100000000",
      "0000000011000000000000000001100000000",
      "0000000010100000000000000010100000000",
      "0000000001110110000000110111000000000",
      "0001100000000011000001100000000011000",
      "0001100000000000000000000000000011000",
      "0000000000000000000000000000000000000",
      "0000001100000000000000000000011000000",
      "0000001100000000000000000000011000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000001100011000000000000000"
    ]
  },
  {
    "name": "bent keys",
    "desc": " (p3)  Found by Dean Hickerson, August 1989.  See also\n   {odd keys} and {short keys}.\n",
    "grid": [
      "010000000010",
      "101000000101",
      "010110011010",
      "000010010000",
      "000010010000"
    ]
  },
  {
    "name": "BFx59H",
    "desc": "  One of the earliest and most remarkable {converter}s,\n   discovered by Dave Buckingham in July 1996.  In 59 generations it\n   transforms a B-heptomino into a clean Herschel with very good\n   clearance, allowing easy connections to other conduits.  It forms the\n   final stage of many of the known {composite conduit}s, including the\n   majority of the original sixteen {Herschel conduit}s.  Here a\n   {ghost Herschel} marks the output location:\n",
    "grid": [
      "011000000000000000000000",
      "001000000000000000000000",
      "010000000000000000000000",
      "011000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "100011000000000000000100",
      "110011000000000000000100",
      "011000000000000000000111",
      "010000000000000000000001",
      "100000000000000000000000"
    ]
  },
  {
    "name": "B-heptomino",
    "desc": " (stabilizes at time 148)  This is a very common\n   {methuselah} that evolves into three {block}s, two {glider}s and a\n   {ship} after 148 generations. Compare with {Herschel}, which appears\n   at generation 20 of the B-heptomino's evolution. B-heptominoes\n   acquired particular importance in 1996 due to Dave Buckingham's work\n   on {B track}s.  See in particular\n   {My Experience with B-heptominos in Oscillators}.\n",
    "grid": [
      "1011",
      "1110",
      "0100"
    ]
  },
  {
    "name": "B-heptomino shuttle",
    "desc": "  = {twin bees shuttle}\n",
    "grid": []
  },
  {
    "name": "bi-block",
    "desc": " (p1)  The smallest {pseudo still life}.\n",
    "grid": [
      "11011",
      "11011"
    ]
  },
  {
    "name": "bi-block fuse",
    "desc": "  A {clean} {fuse} made by a row of {bi-block}s separated\n   by 2 cell gaps.  The bi-block row {wick} is usually created by a\n   {bi-block puffer}. The {burn}ing advances 8 cells every 12\n   generations making its speed {2c/3}.\n",
    "grid": [
      "11001100110011001100110011001100110011001100110",
      "11001100110011001100110011001100110011001101001",
      "00000000000000000000000000000000000000000000110",
      "11001100110011001100110011001100110011001100000",
      "11001100110011001100110011001100110011001100000"
    ]
  },
  {
    "name": "bi-block puffer",
    "desc": "  Any {puffer} whose output is {bi-block}s.  The term\n   is particularly used for p8 c/2 puffers, in which case a\n   {bi-block fuse} is created.  A bi-block puffer is easily made using\n   two {backrake}s whose gliders impact symmetrically.  Jason Summers\n   {weld}ed two backrakes to form a more compact puffer, as shown below.\n",
    "grid": [
      "0000000000010100000000000011000000000000000000000000000000",
      "0000000000100100000000001000010000000000000000000000000000",
      "0000000001100000001000010000000000000000000000000000000000",
      "0000000010000001101000010000010000000000000000000000000000",
      "0000000111111001000000011111100000000000000000000000000000",
      "0000110000000100011110000000000000000000000000000000000000",
      "0001000111010000100000000000000000000000000000000000000000",
      "0010001000110100110100100000000000000000000000000000000000",
      "0010000011000100000100000000000000000000000000000000000000",
      "0011100011110100000001011000000000000000000000000000000000",
      "0000000000010000000001001000000100000000000000000000000000",
      "0011100000010100000001001000010100000000000000000000000000",
      "0100000100000100000000110000001100000100110011001100110011",
      "1000110100011000000000000000000000001100110011001100110011",
      "1000100000011100000000000000000000000000000000000000000000",
      "1000110100011000000000000000000000001100110011001100110011",
      "0100000100000100000000110000001100000100110011001100110011",
      "0011100000010100000001001000010100000000000000000000000000",
      "0000000000010000000001001000000100000000000000000000000000",
      "0011100011110100000001011000000000000000000000000000000000",
      "0010000011000100000100000000000000000000000000000000000000",
      "0010001000110100110100100000000000000000000000000000000000",
      "0001000111010000100000000000000000000000000000000000000000",
      "0000110000000100011110000000000000000000000000000000000000",
      "0000000111111001000000011111100000000000000000000000000000",
      "0000000010000001101000010000010000000000000000000000000000",
      "0000000001100000001000010000000000000000000000000000000000",
      "0000000000100100000000001000010000000000000000000000000000",
      "0000000000010100000000000011000000000000000000000000000000"
    ]
  },
  {
    "name": "bi-boat",
    "desc": "  = {boat-tie}\n",
    "grid": []
  },
  {
    "name": "biclock",
    "desc": "  The following {pure glider generator} consisting of two\n   {clock}s.\n",
    "grid": [
      "0010000",
      "1100000",
      "0011000",
      "0100010",
      "0001100",
      "0000011",
      "0000100"
    ]
  },
  {
    "name": "big beacon",
    "desc": "  = {figure-8}\n",
    "grid": []
  },
  {
    "name": "big fish",
    "desc": "  = {HWSS}\n",
    "grid": []
  },
  {
    "name": "big glider",
    "desc": " (c/4 diagonally, p4)  This was found by Dean Hickerson in\n   December 1989 and was the first known diagonal {spaceship} other than\n   the {glider}.\n",
    "grid": [
      "000111000000000000",
      "000100111000000000",
      "000010100000000000",
      "110000000100000000",
      "101000010010000000",
      "100000000110000000",
      "011000000000000000",
      "010010000010110000",
      "010000000001101000",
      "000101000000110010",
      "000011010000110001",
      "000000001000000010",
      "000000011110001010",
      "000000010110001111",
      "000000001000110100",
      "000000000000011000",
      "000000000101110000",
      "000000000010010000"
    ]
  },
  {
    "name": "big S",
    "desc": " (p1)\n",
    "grid": [
      "0000110",
      "0001001",
      "0001011",
      "1101000",
      "1001000",
      "0110000"
    ]
  },
  {
    "name": "big table",
    "desc": "  = {dock}\n",
    "grid": []
  },
  {
    "name": "billiard table",
    "desc": "  = {billiard table configuration}.\n",
    "grid": []
  },
  {
    "name": "billiard table configuration",
    "desc": "  Any {oscillator} in which the {rotor} is\n   enclosed within the {stator}.  Examples include {airforce},\n   {cauldron}, {clock II}, {Hertz oscillator}, {negentropy}, {pinwheel},\n   {pressure cooker} and {scrubber}.\n",
    "grid": []
  },
  {
    "name": "bi-loaf",
    "desc": "  This term has been used in at least three different senses. A\n   bi-loaf can be half a {bakery}:\n",
    "grid": [
      "0100000",
      "1010000",
      "1001000",
      "0110100",
      "0001010",
      "0001001",
      "0000110"
    ]
  },
  {
    "name": "bipole",
    "desc": " (p2)  The {barberpole} of length 2.\n",
    "grid": [
      "11000",
      "10100",
      "00000",
      "00101",
      "00011"
    ]
  },
  {
    "name": "bi-pond",
    "desc": " (p1)\n",
    "grid": [
      "0110000",
      "1001000",
      "1001000",
      "0110110",
      "0001001",
      "0001001",
      "0000110"
    ]
  },
  {
    "name": "bi-ship",
    "desc": "  = {ship-tie}\n",
    "grid": []
  },
  {
    "name": "bistable switch",
    "desc": "  A {Spartan} {memory cell} found by Paul Callahan in\n   1994.  It can be in one of two states, containing either a {boat} or\n   a {block}. Input gliders on the appropriate paths can change the boat\n   to a block, or vice-versa, while also emitting an output glider.\n   Unlike many memory cells, attempts to change the state to the one it\n   is already in are ignored with the glider passing through with no\n   reaction.  This makes it easy to reset the memory cell to a known\n   state.  Which of the two states is considered the SET and which\n   considered the RESET is just a matter of convention.\n     The pattern below shows the \"boat\" state of the memory cell in its\n   original 1994 form.  Two gliders are also shown to indicate the input\n   paths used to change the states.  A smaller version is shown under\n   {century eater}, with the circuit in its \"block\" state.\n     As shown, the rightmost glider changes the state from a boat to a\n   block and emits a glider to the upper right, while the leftmost\n   glider passes through unchanged.  Alternatively, when the state\n   contains a block, then the leftmost glider changes the state from a\n   block to a boat, and emits a glider to the lower right, while the\n   rightmost glider passes through unchanged.\n",
    "grid": [
      "000000000000000000000000000000001000000000000000000000000",
      "000000000000000000000000000000001110000000000000000000000",
      "000000000000000000000000000000000001000000000000000000000",
      "000000000000000000000000000000000011000000000000000000000",
      "010000000000000000000000000000000000000000000000000000000",
      "001000000000000000000000000110000000000000000011000000000",
      "111000000000000000000000000010000000000000000010000000000",
      "000000000000000000000000000010100000000000001010000000000",
      "000000000000000000000000000001100000000000001100000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000010000000000000000000",
      "000000000000000000000000000000000000101000000000000000000",
      "000000000000000000000000000000000000101000000000000000000",
      "000000000000000000000000000000000000010000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000010000000000011",
      "000000000000000000000000000000000000000000001000000000011",
      "000000000000000000000000000000000000000000111000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000010000000000000",
      "000000000000000000000000000000000000000000101000000000000",
      "000000000000000000000000000000000000000000011000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000011000000000000000000000000",
      "000000000000000000000000000000101000000000000000000000000",
      "000000000000000000000000000000100000000000000000000000000",
      "000000000000000000000000000001100000000000000000000000000"
    ]
  },
  {
    "name": "bit",
    "desc": "  A live {cell}, if used in reference to {still life} {population}.\n   For example, a {beehive} is a 6-bit still life.  Other uses generally\n   involve information storage:  a {memory cell} such as a {honey bit}\n   that can hold one binary bit of information for later retrieval.\n",
    "grid": []
  },
  {
    "name": "biting off more than they can chew",
    "desc": " (p3)  Found by Peter Raynham, July\n   1972.\n",
    "grid": [
      "100000000000",
      "111000000000",
      "000100000000",
      "001100000000",
      "000110000000",
      "000011000000",
      "000100100000",
      "000100110000",
      "000011011100",
      "000000001010",
      "000000000010",
      "000000000011"
    ]
  },
  {
    "name": "Black&White",
    "desc": "  = {Immigration}\n",
    "grid": []
  },
  {
    "name": "blasting cap",
    "desc": "  The {pi-heptomino} (after the shape at generation 1). A\n   term used at MIT and still occasionally encountered.\n",
    "grid": []
  },
  {
    "name": "blinker",
    "desc": " (p2)  The smallest and most common {oscillator}.  Found by\n   Conway, March 1970.\n",
    "grid": [
      "111"
    ]
  },
  {
    "name": "blinker fuse",
    "desc": "  A {clean} {fuse} made from a row of blinkers separated\n   by one cell gaps.  The blinker row {wick} is usually created by a\n   {blinker puffer}.  The fuse can {burn} in at least three different\n   ways at a speed of {2c/3} depending on the method used to ignite the\n   end of the row of blinkers. This variant has found the most use.  The\n   burning advances 12 cells every 18 generations.\n",
    "grid": [
      "000000000000000000000000000000000000000000000000000010",
      "000000000000000000000000000000000000000000000110100101",
      "000000000000000000000000000000000000000000001010111101",
      "111011101110111011101110111011101110111011101000000000",
      "000000000000000000000000000000000000000000001010111101",
      "000000000000000000000000000000000000000000000110100101",
      "000000000000000000000000000000000000000000000000000010"
    ]
  },
  {
    "name": "blinker puffer",
    "desc": "  Any {puffer} whose output is {blinker}s.  However, the\n   term is particularly used for p8 c/2 puffers.  The first such blinker\n   puffer was found by Robert Wainwright in 1984, and was unexpectedly\n   simple:\n",
    "grid": [
      "000100000",
      "010001000",
      "100000000",
      "100001000",
      "111110000",
      "000000000",
      "000000000",
      "000000000",
      "011000000",
      "110111000",
      "011110000",
      "001100000",
      "000000000",
      "000001100",
      "000100001",
      "001000000",
      "001000001",
      "001111110"
    ]
  },
  {
    "name": "blinker pull",
    "desc": "  The following glider/blinker collision, which moves a\n   blinker (-1,3) toward the glider source:\n",
    "grid": [
      "1110",
      "0000",
      "0000",
      "0000",
      "0111",
      "0100",
      "0010"
    ]
  },
  {
    "name": "blinkers bit pole",
    "desc": " (p2)  Found by Robert Wainwright, June 1977.\n",
    "grid": [
      "0000011",
      "1110101",
      "0000000",
      "0101001",
      "1000010",
      "1100010"
    ]
  },
  {
    "name": "blinker ship",
    "desc": "  A {growing spaceship} in which the wick consists of a\n   line of {blinker}s.  An example by Paul Schick based on his\n   {Schick engine} is shown below.  Here the front part is p12 and moves\n   at c/2, while the back part is p26 and moves at 6c/13.  Every 156\n   generations 13 blinkers are created and 12 are destroyed, so the wick\n   becomes one blinker longer.\n",
    "grid": [
      "000000000011110000000000000",
      "000000000010001000000000000",
      "000000000010000000000000000",
      "011000000001001000000000000",
      "110110000000000000000000000",
      "011110001000000000000000000",
      "001100010110000000010000111",
      "000000100010000000010000101",
      "001100010110000000010000111",
      "011110001000000000000000000",
      "110110000000000000000000000",
      "011000000001001000000000000",
      "000000000010000000000000000",
      "000000000010001000000000000",
      "000000000011110000000000000"
    ]
  },
  {
    "name": "block",
    "desc": " (p1)  The most common {still life}, and also the most common\n   object produced by {2-glider collision}s (six different ways).\n",
    "grid": [
      "11",
      "11"
    ]
  },
  {
    "name": "blockade",
    "desc": " (p1)  A common formation of four blocks.  The final form of\n   {lumps of muck}.\n",
    "grid": [
      "11000000000000000000000",
      "11000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "01100000000000000000110",
      "01100000000000000000110",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000011",
      "00000000000000000000011"
    ]
  },
  {
    "name": "block and dock",
    "desc": " (p1)\n",
    "grid": [
      "000110",
      "000110",
      "000000",
      "011110",
      "100001",
      "110011"
    ]
  },
  {
    "name": "block and glider",
    "desc": " (stabilizes at time 106)\n",
    "grid": [
      "1100",
      "1010",
      "0011"
    ]
  },
  {
    "name": "blocker",
    "desc": " (p8)  Found by Robert Wainwright.  See also {filter}.\n",
    "grid": [
      "0000001010",
      "0000010000",
      "1100100001",
      "1101001011",
      "0000110000"
    ]
  },
  {
    "name": "block factory",
    "desc": "  Any {factory} {circuit} that produces a {block} in\n   response to an input signal.  For a useful high-{clearance} example\n   see {keeper}.\n",
    "grid": []
  },
  {
    "name": "Blockic",
    "desc": "  Adjective for {constellation}s consisting entirely of\n   {block}s.  It's possible to arrange blocks in a way that can be\n   {trigger}ed by a single glider to produce any {glider constructible}\n   pattern.  A simple example of a Blockic pattern is shown under\n   {fuse}.  See also {seed}.\n",
    "grid": []
  },
  {
    "name": "block keeper",
    "desc": "  See {keeper}.\n",
    "grid": []
  },
  {
    "name": "block-laying switch engine",
    "desc": "  See {stabilized switch engine}.\n",
    "grid": []
  },
  {
    "name": "block on big table",
    "desc": "  = {block and dock}\n",
    "grid": []
  },
  {
    "name": "block on table",
    "desc": " (p1)\n",
    "grid": [
      "0011",
      "0011",
      "0000",
      "1111",
      "1001"
    ]
  },
  {
    "name": "block pull",
    "desc": "  The following glider/block collision, which moves a block\n   (2,1) toward the glider source.  Performing this reaction twice using\n   a {salvo} of two gliders can move a block diagonally back by three\n   cells, which can be of use for a {sliding block memory}.\n",
    "grid": [
      "110",
      "110",
      "000",
      "000",
      "000",
      "000",
      "111",
      "100",
      "010"
    ]
  },
  {
    "name": "block pusher",
    "desc": "  A pattern emitting streams of {glider}s which can\n   repeatedly push a block further away.  This can be used as part of a\n   {sliding block memory}.\n     The following pattern, in which three gliders push a block one cell\n   diagonally, is an example of how a block pusher works.\n",
    "grid": [
      "0000000000000000000101",
      "0000000000000000000110",
      "0000000000000000000010",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0001000000000000000000",
      "0010000000000000000000",
      "0011100000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "1100010000000000000000",
      "1100010100000000000000",
      "0000011000000000000000"
    ]
  },
  {
    "name": "blom",
    "desc": " (stabilizes at time 23314)  The following {methuselah}, found by\n   Dean Hickerson in July 2002.\n",
    "grid": [
      "100000000001",
      "011110000001",
      "001100000001",
      "000000000010",
      "000000001010"
    ]
  },
  {
    "name": "blonk",
    "desc": "  A {block} or a {blinker}.  This term is mainly used in the\n   context of {sparse Life} and was coined by Rich Schroeppel in\n   September 1992.\n",
    "grid": []
  },
  {
    "name": "blonker",
    "desc": " (p6)  The following {oscillator}, found by Nicolay Beluchenko\n   in April 2004.\n",
    "grid": [
      "100110000100",
      "110010110100",
      "000010100000",
      "000001100000",
      "000000010000",
      "000000010001",
      "000000000101",
      "000000000010"
    ]
  },
  {
    "name": "BLSE",
    "desc": "  = {block-laying switch engine}\n",
    "grid": []
  },
  {
    "name": "BNE14T30",
    "desc": "  A {B-heptomino} to {glider} {converter} found by Tanner\n   Jacobi on 26 May 2016.  This converter has the unusual property of\n   being an {edge shooter} where no part of the reaction's {envelope}\n   extends beyond the glider's output {lane}.  It can be easily\n   connected to {Herschel circuit}ry via {HFx58B} or other known\n   {elementary} conduits.\n",
    "grid": [
      "00000000000110000",
      "00000000000101000",
      "00000000000001000",
      "00000001100010110",
      "00000000100010001",
      "00000000101101101",
      "00000000010101010",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "10000000000000000",
      "01000000000000000",
      "01100000000000000",
      "11000000000000000",
      "10000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "11000000000000000",
      "11000000000000000"
    ]
  },
  {
    "name": "boat",
    "desc": " (p1)  The only 5-cell {still life}.\n",
    "grid": [
      "110",
      "101",
      "010"
    ]
  },
  {
    "name": "boat-bit",
    "desc": "  A binary digit represented by the presence of a {boat} next\n   to a {snake} (or other suitable object, such as an\n   {aircraft carrier}).  The bit can be toggled by a {glider} travelling\n   along a certain path.  A correctly timed glider on a crossing path\n   can detect whether the transition was from 1 to 0 (in which case the\n   crossing glider is deleted) or from 0 to 1 (in which case it passes\n   unharmed).  Three gliders therefore suffice for a\n   {non-destructive read}.  The mechanisms involved are shown in the\n   diagram below.  Here the bit is shown in state 0.  It is about to be\n   set to 1 and then switched back to 0 again.  The first crossing\n   glider will survive, but the second will be destroyed.\n",
    "grid": [
      "0000001000000000000000000",
      "0000000100000000000000000",
      "0000011100000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000100000000",
      "0000000000000010100000000",
      "0000000000110001100000000",
      "0000000000011000000000000",
      "0000000000100000000001011",
      "0000000000000000000001101",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0100000000000000000000000",
      "0110000000000000000000000",
      "1010000000000000000000000"
    ]
  },
  {
    "name": "boat maker",
    "desc": " (c p4 fuse)\n",
    "grid": [
      "000000000000000011",
      "000000000000000101",
      "000000000000001000",
      "000000000000010000",
      "000000000000100000",
      "000000000001000000",
      "000000000010000000",
      "000000000100000000",
      "000000001000000000",
      "000000010000000000",
      "000000100000000000",
      "000001000000000000",
      "111110000000000000",
      "000010000000000000",
      "000010000000000000",
      "000010000000000000",
      "000010000000000000"
    ]
  },
  {
    "name": "boat on boat",
    "desc": "  = {boat-tie}\n",
    "grid": []
  },
  {
    "name": "boat-ship-tie",
    "desc": "  = {ship tie boat}\n",
    "grid": []
  },
  {
    "name": "boatstretcher",
    "desc": "  See {tubstretcher}.\n",
    "grid": []
  },
  {
    "name": "boat-tie",
    "desc": " (p1)  A 10-cell {still life} consisting of two {boat}s placed\n   tip-to-tip.  The name is a pun on \"bow tie\".\n",
    "grid": [
      "010000",
      "101000",
      "011000",
      "000110",
      "000101",
      "000010"
    ]
  },
  {
    "name": "bobsled",
    "desc": "  = {switch engine channel}.\n",
    "grid": []
  },
  {
    "name": "boojum reflector",
    "desc": " (p1)  Dave Greene's name for the following 180-degree\n   {glider} {reflector} which he found in April 2001, winning $100\n   bounties offered by Alan Hensel and Dieter Leithner.  The name is\n   taken from Lewis Carroll's _The Hunting of the Snark_, referring to\n   the fact that a small 90-degree stable reflector was really what was\n   wanted.  180-degree reflectors are relatively undesirable and have\n   limited use in larger circuitry constructions.\n     The boojum reflector was the smallest and fastest known stable\n   reflector until the discovery of the {rectifier} in 2009, followed by\n   the {Snark} in 2013.\n",
    "grid": [
      "00001010000001100000000000000000000000000000",
      "00000110000001100000000000000000000000000000",
      "00000100000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000001000",
      "00000000000000000000000000000000000000010100",
      "00000000000000000000000000000000000000010100",
      "00000000000000000000110000000000000000110110",
      "00000000000000000000110000000000000000000000",
      "00000000000000000000000000000000000000110110",
      "00110000000000000000000000000000000000110100",
      "01010000000000000000000000000000000000000001",
      "01000000000000000000000000000000000000000011",
      "11000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000001100000000",
      "00000000000000000000000000000000001100001100",
      "00000000000110000000000000000000000000001010",
      "00000000001010000000000000000000000000000010",
      "00000000001000000000000000000000000000000011",
      "00000000011000000000000000000000001100000000",
      "00000000000000000000000000000000001100000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000100000000000000",
      "00000000000000000000000000001010000000000000",
      "00000000000000000000000000000100000000000000"
    ]
  },
  {
    "name": "bookend",
    "desc": "  The following {induction coil}.  It is generation 1 of\n   {century}.\n",
    "grid": [
      "0011",
      "1001",
      "1110"
    ]
  },
  {
    "name": "bookends",
    "desc": " (p1)\n",
    "grid": [
      "1100011",
      "1010101",
      "0010100",
      "0110110"
    ]
  },
  {
    "name": "boss",
    "desc": " (p4)  Found by Dave Buckingham, 1972.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00001010000",
      "00011011000",
      "00100000100",
      "01010101010",
      "01010001010",
      "11010001011",
      "10010101001",
      "00100000100",
      "00011011000",
      "00001010000",
      "00001010000",
      "00000100000"
    ]
  },
  {
    "name": "bottle",
    "desc": " (p8)  Found by Achim Flammenkamp in August 1994.  The name is a\n   back-formation from {ship in a bottle}.\n",
    "grid": [
      "000011000000110000",
      "000100100001001000",
      "000101000000101000",
      "011001110011100110",
      "100000010010000001",
      "101100000000001101",
      "010100000000001010",
      "000110000000011000",
      "000000000000000000",
      "000000000000000000",
      "000110000000011000",
      "010100000000001010",
      "101100000000001101",
      "100000010010000001",
      "011001110011100110",
      "000101000000101000",
      "000100100001001000",
      "000011000000110000"
    ]
  },
  {
    "name": "bouncer",
    "desc": "  A label used for the small periodic {colour-changing}\n   {glider} {reflector}s discovered mainly by Noam Elkies in the late\n   1990s.  See  {p5 bouncer}, {p6 bouncer}, {p7 bouncer}, {p8 bouncer},\n   or {p15 bouncer}.\n",
    "grid": []
  },
  {
    "name": "bounding box",
    "desc": "  The smallest rectangular array of cells that contains\n   the whole of a given pattern.  For {oscillator}s and {gun}s this\n   usually is meant to include all {phase}s of the pattern, but in the\n   case of guns, the outgoing stream(s) are excluded.  The bounding box\n   is one of the standard ways to measure the size of an object; the\n   other standard metric is the {population}.\n",
    "grid": []
  },
  {
    "name": "bow tie",
    "desc": "  = {boat-tie}\n",
    "grid": []
  },
  {
    "name": "brain",
    "desc": " (c/3 orthogonally, p3)  Found by David Bell, May 1992.\n",
    "grid": [
      "01110000000001110",
      "10101100000110101",
      "10101000000010101",
      "01011011011011010",
      "00000101010100000",
      "00010101010101000",
      "00110101010101100",
      "00111001010011100",
      "00110010001001100",
      "01000011011000010",
      "01000000000000010"
    ]
  },
  {
    "name": "branching spaceship",
    "desc": "  An {extensible} spaceship containing {component}s\n   which can be attached in multiple ways so that the result can contain\n   arbitrarily many {arm}s arranged like a binary tree.  Here is an\n   example of a period 2 c/2 branching spaceship, which also includes a\n   {wicktrailer}:\n",
    "grid": [
      "00000000000000000000010000000000000000010000000000000000000000",
      "00000000000000000000111000000000000000111000000000000000000000",
      "00000000000000000011011100000000000001110110000000000000000000",
      "00000000000000000001001011000010000110100100000000000000000000",
      "00000000000000001101000010101101101010000101100000000000000000",
      "00000000000000001101010010100000001010010101100000000000000000",
      "00000000000000001000000001110101011100000000100001110000000000",
      "00000000000000011000000011000000000110000000110010001000000000",
      "00000000000000010000000000000000000000000000000100001100000000",
      "00000000111000011110000000000000000000000000111100110100000000",
      "00000001000100110011000000000000000000000000001010000110000000",
      "00000011000010000001000011100000000000000000000000001000000000",
      "00000010110011110001100100010000000000000000000000000011100000",
      "00000110000101000000001000011000000000000000000000000000110000",
      "00000001000000000001111001101000000000000000000000000000010000",
      "00011100000000000000010100001100000000000000000000000000011000",
      "00110000000000000000000000010000000000000000000000000000000000",
      "00100000000000000000000000000111000000000000000000000000000000",
      "01100000000000000000000000000001100000000000000000000000000000",
      "01000000000000000000000000000000100001110000000000000000000000",
      "01111000000000000000000000000000110010001000000000000000000000",
      "11001100000000000000000000000000000100001100000000000000000000",
      "00000100001110000000000000000000111100110100000000000000000000",
      "00000110010001000000000000000000001010000110000000000000000000",
      "00000000100001100000000000000000000000001000000000000000000000",
      "00000111100110100000000000000000000000000011100000000000000000",
      "00000001010000110000000000000000000000000000110000000000000000",
      "00000000000001000000000000000000000000000000010000000000000000",
      "00000000000000011100000000000000000000000000011000000000000000",
      "00000000000000000110000000000000000000000000001000000000000000",
      "00000000000000000010000000000000000000000001111000011100000000",
      "00000000000000000011000000000000000000000011001100100010000000",
      "00000000000000000001000000000000000111000010000001000011000000",
      "00000000000000001111000000000000001000100110001111001101000000",
      "00000000000000011001100000000000011000010000000010100001100000",
      "00000000000000010000000000000000010110011110000000000010000000",
      "00000000000000110000000000000000110000101000000000000000111000",
      "00000000000000100000000000000000001000000000000000000000001100",
      "00000000000000111100000000000011100000000000000000000000000100",
      "00000000000001100110000000000110000000000000000000000000000110",
      "00000000000000000010000000000100000000000000000000000000000010",
      "00000000000000000011000000001100000000000000000000000000011110",
      "00000000000000000001000000001000000000000000000000000000110011",
      "00000000000000001111000000001111000000000000000000000000100000",
      "00000000000000011001100000011001100000000000000000000001100000",
      "00000000000000010000000000000000100000000000000000000001000000",
      "00000000000000110000000000000000110000000000000000000001111000",
      "00000000000000100000000000000000000000000000000000000011001100",
      "00000000000000111100000000000000000000000000000000000000000100",
      "00000000000001100110000000000000000000000000000000000000000110",
      "00000000000000000010000000000000000000000000000000000000000000",
      "00000000000000000011000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "breeder",
    "desc": "  Any pattern whose {population} grows at a quadratic rate,\n   although it is usual to exclude {spacefiller}s.  It is easy to see\n   that this is the fastest possible growth rate.\n     The term is also sometimes used to mean specifically the breeder\n   created by Bill Gosper's group at MIT, which was the first known\n   pattern exhibiting {superlinear growth}.\n     There are four common types of breeder, known as MMM, MMS, MSM and\n   SMM (where M=moving and S=stationary).  Typically an MMM breeder is a\n   {rake} {puffer}, an MMS breeder is a puffer producing puffers which\n   produce stationary objects ({still life}s and/or {oscillator}s), an\n   MSM breeder is a {gun} puffer and an SMM breeder is a rake gun. There\n   are, however, less obvious variants of these types.  Other less\n   common breeder categories (SSS, hybrid MSS/MSM, etc.) can be created\n   with some difficulty, based on {universal constructor} technology;\n   see {Pianola breeder}.\n     The original breeder was of type MSM (a p64 puffer puffing p30\n   glider guns).  The known breeder with the smallest initial population\n   is {switch-engine ping-pong}.\n",
    "grid": []
  },
  {
    "name": "bridge",
    "desc": "  A term used in naming certain {still life}s (and the {stator}\n   part of certain {oscillator}s).  It indicates that the object\n   consists of two smaller objects joined edge to edge, as in\n   {snake bridge snake}.\n",
    "grid": []
  },
  {
    "name": "broken lines",
    "desc": "  A pattern constructed by Dean Hickerson in May 2005\n   which produces complex broken lines of gliders and blocks.\n",
    "grid": []
  },
  {
    "name": "broth",
    "desc": "  = {soup}\n",
    "grid": []
  },
  {
    "name": "BRx46B",
    "desc": "  A {Spartan} {elementary conduit} discovered by Michael Simkin\n   on 25 April 2016, one of the relatively few known conduits that can\n   move a {B-heptomino} input to a B-heptomino output without an\n   intervening {Herschel} stage.\n",
    "grid": [
      "0000000000011",
      "0011000000011",
      "0011000000000",
      "0000000000000",
      "0000000000000",
      "1000000000010",
      "0100000000101",
      "0110000000101",
      "1100000000010",
      "1000000000000"
    ]
  },
  {
    "name": "BTC",
    "desc": "  = {billiard table configuration}\n",
    "grid": []
  },
  {
    "name": "B track",
    "desc": "  A {track} for {B-heptomino}es.  A B-heptomino becomes a\n   {Herschel} plus a {block} in twenty generations, so this term was\n   nearly synonymous with {Herschel track} until the discovery of\n   {elementary conduit}s that convert a B directly to another B, or to\n   some other non-Herschel signal output.  See for example {BRx46B}.\n",
    "grid": []
  },
  {
    "name": "BTS",
    "desc": "  A 19-cell {still life} made up of a {bookend}, a {table}, and a\n   {snake}.  Starting in 2015, with the help of Mike Playle's {Bellman}\n   search program, Tanner Jacobi discovered a surprising number of ways\n   to use this object as a {catalyst} for {signal} {circuit}ry.  One\n   example can be seen in the {CC semi-cenark} entry.\n",
    "grid": [
      "0011000",
      "1001000",
      "1110000",
      "0000000",
      "1101011",
      "0101101",
      "0100000",
      "1100000"
    ]
  },
  {
    "name": "buckaroo",
    "desc": " (p30)   A {queen bee shuttle} stabilized at one end by an\n   eater in such a way that it can turn a glider, as shown below.  The\n   glider turning reaction uses a {banana spark} and is\n   {colour-preserving}.  The mechanism was found by Dave Buckingham in\n   the 1970s.  The name is due to Bill Gosper.\n",
    "grid": [
      "001000000000000000000000",
      "101000000000000000000000",
      "011000000000000000000000",
      "000000000001000000000000",
      "000000000101000000000000",
      "000000001010000000000000",
      "000000010010000000000011",
      "000000001010000000000011",
      "000110000101000000000000",
      "001010000001000000000000",
      "001000000000000000000000",
      "011000000000000000000000"
    ]
  },
  {
    "name": "bullet heptomino",
    "desc": "  Generation 1 of the {T-tetromino}.\n",
    "grid": [
      "010",
      "111",
      "111"
    ]
  },
  {
    "name": "bumper",
    "desc": "  One of several periodic {colour-preserving} {glider}\n   {reflector}s discovered by Tanner Jacobi on 6 April 2016.  See\n   {p3 bumper}, {p4 bumper}, {p5 bumper}, {p6 bumper}, {p7 bumper},\n   {p8 bumper}, {p9 bumper}, {p11 bumper}, and {p15 bumper}.\n",
    "grid": []
  },
  {
    "name": "bun",
    "desc": "  The following {induction coil}.  By itself this is a common\n   {predecessor} of the {honey farm}.  See also {cis-mirrored R-bee}.\n",
    "grid": [
      "0110",
      "1001",
      "0111"
    ]
  },
  {
    "name": "bunnies",
    "desc": " (stabilizes at time 17332)  This is a {parent} of {rabbits}\n   and was found independently by Robert Wainwright and Andrew\n   Trevorrow.\n",
    "grid": [
      "10000010",
      "00100010",
      "00100101",
      "01010000"
    ]
  },
  {
    "name": "burloaf",
    "desc": "  = {loaf}\n",
    "grid": []
  },
  {
    "name": "burloaferimeter",
    "desc": " (p7)  Found by Dave Buckingham in 1972.  See also\n   {airforce}.\n",
    "grid": [
      "0000110000",
      "0000010000",
      "0000100000",
      "0001011100",
      "0001010010",
      "1101000101",
      "1101000010",
      "0000111100",
      "0000000000",
      "0000110000",
      "0000110000"
    ]
  },
  {
    "name": "burn",
    "desc": "  A reaction which travels indefinitely as a {wave} through the\n   components of a {wick} or an {agar}.  A burning wick is known as a\n   {fuse}.\n     If the object being burned has a spatial periodicity, then the\n   active area of the burning usually remains bounded and so eventually\n   develops a periodicity too.  It is unknown whether this will always\n   occur.\n     The speed of burning can range from arbitrarily slow up to the\n   {speed of light}.  The results of burning can be clean (leaving no\n   debris), or leaving debris usually much different from the original\n   object.  In rare cases, a {reburnable fuse} produces an exact copy of\n   the original object, allowing the creation of objects such as the\n   {telegraph}.\n     In many useful cases burning can be initiated by impacting an\n   object with {glider}s or other {spaceship}s.  An object might be able\n   to burn in more than one way, depending on how the burn is initiated.\n",
    "grid": []
  },
  {
    "name": "bushing",
    "desc": "  That part of the {stator} of an {oscillator} which is\n   adjacent to the {rotor}.  Compare {casing}.\n",
    "grid": []
  },
  {
    "name": "butterfly",
    "desc": "  The following pattern, or the formation of two beehives\n   that it evolves into after 33 generations.  (Compare {teardrop},\n   where the beehives are five cells closer together.)\n",
    "grid": [
      "1000",
      "1100",
      "1010",
      "0111"
    ]
  },
  {
    "name": "Bx125",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in November 1998.\n   After 125 ticks, it produces an inverted {Herschel} rotated 180\n   degrees at (-9, -17) relative to the input.  Its {recovery time} is\n   166 ticks.  A {ghost Herschel} in the pattern below marks the output\n   location:\n",
    "grid": [
      "00000000000000000000000000010000000000",
      "00100000000000000000000000101000000000",
      "00100000000000000000000000101000000000",
      "11100000000011000000000001101110000000",
      "10000000000011000000000000000001000000",
      "00000000000000000000000001101110000000",
      "00000000000000000000000001101000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000000000000011",
      "00000000000000000000000000000000000011",
      "00000000000000000000000000000000000000",
      "00000000010000000000000000000000000000",
      "00000000010100000000000000000000000000",
      "00000000011100000000000000000000000000",
      "00000000000100000000000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000110000000000000",
      "00000000000000000000000100000000000000",
      "00000000000000000000000011100000000000",
      "00000000000000000000000000100000000000"
    ]
  },
  {
    "name": "Bx222",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in October 1998.  It\n   is made up of three {elementary conduit}s, HF95P + PB68B + {BFx59H}.\n   After 222 ticks, it produces a mirror-reflected {Herschel} rotated\n   180 degrees, at (6, -16) relative to the input.  Its {recovery time}\n   is 271 ticks.  A {ghost Herschel} in the pattern below marks the\n   output location:\n",
    "grid": [
      "000000000000010000000000000000000000000000",
      "000011000001110000000110000000000000000000",
      "000001000010000000000100000000000000000000",
      "000001010001000000000010000000000000000000",
      "000000101000100000000110000000000000000000",
      "000000010001100000000000000000100000010000",
      "000000000000000000000000000011100000101000",
      "000000000000000000000000000100000000101000",
      "000000000000000000000000000110000001101110",
      "000000000000000000000000000000000000000001",
      "001000000000000000110000000000000001101110",
      "001000000000000000110000000000000001101000",
      "111000000000000000000000000000000000000000",
      "100000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000010",
      "000000000000000000000000000000000000001010",
      "000000000000000000000000000000000000001100",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000100000000000000000000000000000000000",
      "000000101000000000000000000000000000000000",
      "000000111000000000000000000000000000000000",
      "000000001000000000000000000001100000000000",
      "000000000000000000000000000001000000000000",
      "000000000000000000110000000000100000000000",
      "000000000000000000110011000001100000000000",
      "000000000000000000000010100000000000000000",
      "000000000000000000000000100000000000000000",
      "000000000000000000000000110000000000000000"
    ]
  },
  {
    "name": "by flops",
    "desc": " (p2)  Found by Robert Wainwright.\n",
    "grid": [
      "000100",
      "010100",
      "000001",
      "111110",
      "000001",
      "010100",
      "000100"
    ]
  },
  {
    "name": "c",
    "desc": "  = {speed of light}\n",
    "grid": []
  },
  {
    "name": "c/10 spaceship",
    "desc": "  A {spaceship} travelling at one tenth of the\n   {speed of light}.  The first such spaceship to be discovered was the\n   orthogonally travelling {copperhead}, found by 'zdr' on 5 March 2016.\n   Simon Ekstrom found the related {fireship} two weeks later.  A\n   {Caterloopillar} can theoretically be configured to move at c/10, but\n   there are technical difficulties with speeds of the form 4n+2, and as\n   of June 2018 this has not been done in practice.\n",
    "grid": []
  },
  {
    "name": "c/12 spaceship",
    "desc": "  A {spaceship} travelling at one twelfth of the\n   {speed of light}.  The only diagonal spaceships that are currently\n   known to move at this speed are the {Cordership}s.  An orthogonal\n   {Caterloopillar} has been configured to move at c/12.\n",
    "grid": []
  },
  {
    "name": "c/2 spaceship",
    "desc": "  A {spaceship} travelling at half the {speed of light}.\n   Such spaceships necessarily move orthogonally.  The first to be\n   discovered was the {LWSS}.  For other examples see {Coe ship},\n   {ecologist}, {flotilla}, {hammerhead}, {hivenudger}, {HWSS}, {MWSS},\n   {puffer train}, {puff suppressor}, {pushalong}, {Schick engine},\n   {sidecar}, {still life tagalong} and {x66}.\n",
    "grid": []
  },
  {
    "name": "c/3 spaceship",
    "desc": "  A {spaceship} travelling at one third of the\n   {speed of light}.  All known c/3 spaceships travel orthogonally.  The\n   first was {25P3H1V0.1}, found in August 1989 by Dean Hickerson.  For\n   further examples see {brain}, {dart}, {edge-repair spaceship}, {fly},\n   {turtle} and {wasp}.\n",
    "grid": []
  },
  {
    "name": "c/4 spaceship",
    "desc": "  A {spaceship} travelling at one quarter of the\n   {speed of light}.  The first such spaceship to be discovered was, of\n   course, the {glider}, and this remained the only known example until\n   December 1989, when Dean Hickerson found the first orthogonal\n   example, {119P4H1V0}, and also a new diagonal example (the\n   {big glider}). For other examples see {B29}, {Canada goose}, {crane},\n   {Enterprise}, {edge-repair spaceship} (third pattern),\n   {non-monotonic}, {Orion}, {quarter}, {sparky}, {swan} and {tagalong}.\n   It is known that c/4 is the fastest possible speed for a (45-degree)\n   diagonal spaceship.\n",
    "grid": []
  },
  {
    "name": "c/5 spaceship",
    "desc": "  A {spaceship} travelling at one fifth of the\n   {speed of light}.  The first such spaceship to be discovered was the\n   {snail}, found by Tim Coe in January 1996.  The first diagonally\n   moving example, {295P5H1V1}, was found by Jason Summers in November\n   2000.  For other c/5 ships see {58P5H1V1}, {67P5H1V1}, {86P5H1V1} and\n   {spider}.  A {Caterloopillar} has also been configured to move at\n   c/5.\n",
    "grid": []
  },
  {
    "name": "c/6 spaceship",
    "desc": "  A {spaceship} travelling at one sixth of the\n   {speed of light}.  The first such spaceship to be discovered was the\n   {dragon}, found by Paul Tooke in April 2000.  The first diagonally\n   moving example was the {seal}, found by Nicolay Beluchenko in\n   September 2005.  Another orthogonal c/6 spaceship, found by Paul\n   Tooke in March 2006, is shown below.  For the smallest known c/6\n   spaceship see {56P6H1V0}.\n",
    "grid": [
      "0010000000000000010000000000000000000000000000000000100000",
      "1001001110000000101111000000000000000110000000000011010000",
      "1001000000000000111010100000000010000010000000100010000000",
      "0101001000000000000000000000111001010111000001010100001000",
      "0011000000100001000000000000000011111100100100010001001000",
      "0101000110000010001100000011011001001100101011001000000000",
      "0010000010110010001100000011000010101001001010100000011001",
      "0010000111001000000000111000000011101011000001000000011101",
      "0000000000001111111110001000000001101110001111000000000101",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000001111111110001000000001101110001111000000000101",
      "0010000111001000000000111000000011101011000001000000011101",
      "0010000010110010001100000011000010101001001010100000011001",
      "0101000110000010001100000011011001001100101011001000000000",
      "0011000000100001000000000000000011111100100100010001001000",
      "0101001000000000000000000000111001010111000001010100001000",
      "1001000000000000111010100000000010000010000000100010000000",
      "1001001110000000101111000000000000000110000000000011010000",
      "0010000000000000010000000000000000000000000000000000100000"
    ]
  },
  {
    "name": "c/7 spaceship",
    "desc": "  A {spaceship} travelling at one seventh of the\n   {speed of light}.  The first such spaceship to be discovered was the\n   diagonally travelling {lobster}, found by Matthias Merzenich in\n   August 2011.  The first known orthogonal c/7 spaceship was the\n   {loafer}, discovered by Josh Ball in February 2013.  A\n   {Caterloopillar} has been configured to move at c/7.\n",
    "grid": []
  },
  {
    "name": "CA",
    "desc": "  = {cellular automaton}\n",
    "grid": []
  },
  {
    "name": "caber tosser",
    "desc": "  Any pattern whose {population} is asymptotic to c.log(t)\n   for some constant c, and which contains a {glider} (or other\n   {spaceship}) bouncing between a slower receding spaceship and a fixed\n   {reflector} which emits a spaceship (in addition to the reflected\n   one) whenever the bouncing spaceship hits it.\n     As the receding spaceship gets further away the bouncing spaceship\n   takes longer to complete each cycle, and so the extra spaceships\n   emitted by the reflector are produced at increasingly large\n   intervals.  More precisely, if v is the speed of the bouncing\n   spaceship and u the speed of the receding spaceship, then each\n   interval is (v+u)/(v-u) times as long as the previous one.  The\n   population at time t is therefore n.log(t)/log((v+u)/(v-u)) + O(1),\n   where n is the population of one of the extra spaceships (assumed\n   constant).\n     The first caber tosser was built by Dean Hickerson in May 1991.\n",
    "grid": []
  },
  {
    "name": "Callahan G-to-H",
    "desc": "  A stable {glider reflector} and glider-to-Herschel\n   {converter} discovered by Paul Callahan in November 1998.  Its\n   recovery time is 575 ticks.  The initial stage converts two gliders\n   into a Herschel.  A {ghost Herschel} in the pattern below marks the\n   output location:\n",
    "grid": [
      "0000100000000010000000000000000000",
      "0000111000001110000000000000000000",
      "0100000100010000000000000000000000",
      "0010001100011000000000000000000000",
      "1110000000000000000000000000000000",
      "0000000001000000000000000000000000",
      "0000000010100000000000000000000000",
      "0000000010100000000000000000000000",
      "0000000001000000000000000000000000",
      "0000000000000000000000000000000100",
      "0000000000000000000000000000000100",
      "0000000000000000000011000000000111",
      "0000000000000011000011000000000001",
      "0000000011000110000000000000000000",
      "0000000100100001000000000000000000",
      "0011000011000000000000000000000000",
      "0101000000000000000000000000000000",
      "0100000000000000000000000000000000",
      "1100000000000000000000000000000000",
      "0000000000110000000000000000000000",
      "0000000000100000000000000000000000",
      "0000000000011100000000000000000000",
      "0000000000000100000000000000000000"
    ]
  },
  {
    "name": "Cambridge pulsar CP 48-56-72",
    "desc": "  = {pulsar}  (The numbers refer to the\n   populations of the three {phase}s.  The Life pulsar was indeed\n   discovered at Cambridge, like the first real pulsar a few years\n   earlier.)\n",
    "grid": []
  },
  {
    "name": "Canada goose",
    "desc": " (c/4 diagonally, p4)  Found by Jason Summers, January\n   1999.  It consists of a {glider} plus a {tagalong}.\n",
    "grid": [
      "1110000000000",
      "1000000000110",
      "0100000011101",
      "0001100110000",
      "0000100000000",
      "0000000010000",
      "0000110001000",
      "0001010110000",
      "0001010010110",
      "0010000110000",
      "0011000000000",
      "0011000000000"
    ]
  },
  {
    "name": "candelabra",
    "desc": " (p3)  By Charles Trawick.  See also the note under {cap}.\n",
    "grid": [
      "0000110000110000",
      "0100100000010010",
      "1010100000010101",
      "0100101111010010",
      "0000101001010000",
      "0000010000100000"
    ]
  },
  {
    "name": "candlefrobra",
    "desc": " (p3)  Found by Robert Wainwright in November 1984.\n",
    "grid": [
      "0000010000",
      "0101101011",
      "1010001011",
      "0100001000",
      "0000011000"
    ]
  },
  {
    "name": "canoe",
    "desc": " (p1)\n",
    "grid": [
      "00011",
      "00001",
      "00010",
      "10100",
      "11000"
    ]
  },
  {
    "name": "cap",
    "desc": "  The following {induction coil}.  It can also easily be stabilized\n   to form a p3 oscillator.  See {candelabra} for a slight variation on\n   this.\n",
    "grid": [
      "0110",
      "1001",
      "1111"
    ]
  },
  {
    "name": "carnival shuttle",
    "desc": " (p12)  Found by Robert Wainwright in September 1984\n   (using {MW emulator}s at the end, instead of the {monogram}s shown\n   here).\n",
    "grid": [
      "00000000000000000000000000000000010001",
      "11000110000000000000000000000000011111",
      "01010100010010000001100010010000000100",
      "01101100110001100001100110001100001010",
      "01010100010010000001100010010000000100",
      "11000110000000000000000000000000011111",
      "00000000000000000000000000000000010001"
    ]
  },
  {
    "name": "carrier",
    "desc": "  = {aircraft carrier}\n",
    "grid": []
  },
  {
    "name": "casing",
    "desc": "  That part of the {stator} of an {oscillator} which is not\n   adjacent to the {rotor}.  Compare {bushing}.\n",
    "grid": []
  },
  {
    "name": "catacryst",
    "desc": "  A 58-cell {quadratic growth} pattern found by Nick Gotts in\n   April 2000.  This was formerly the smallest such pattern known, but\n   has since been superseded by the related {metacatacryst}.  See\n   {switch-engine ping-pong} for the lowest-population\n   {superlinear growth} pattern as of July 2018, along with a list of\n   the record-holders.\n     The catacryst consists of three {ark}s plus a glider-producing\n   {switch engine}.  It produces a block-laying switch engine every\n   47616 generations.  Each block-laying switch engine has only a finite\n   life, but the length of this life increases linearly with each new\n   switch engine, so that the pattern overall grows quadratically, as an\n   unusual type of MMS {breeder}.\n",
    "grid": []
  },
  {
    "name": "Catagolue",
    "desc": "  An online database of objects in Conway's Game of Life and\n   similar cellular automata, set up by Adam P. Goucher in 2015 at\n   {http://catagolue.appspot.com}. It gathers data from a distributed\n   search of random initial configurations and records the eventual\n   decay products.  Within a year of operation it had completed a\n   {census} of the {ash} objects from over two trillion asymmetric 16x16\n   {soup}s.  As of June 2018, well over two hundred trillion ash objects\n   have been counted, from over a trillion asymmetric soups.\n     It is often possible to use Catagolue search results find\n   equivalent {glider synthesis} recipes for selected parts of\n   long-running active reactions.  These random {soup} searches have\n   made it possible to find efficient construction methods for thousands\n   of increasingly rare {still life}s and {oscillator}s, and the\n   occasional {puffer} or {spaceship}.  In many of these cases a\n   {glider synthesis} was previously very difficult or unknown.\n",
    "grid": []
  },
  {
    "name": "catalyst",
    "desc": "  An object that participates in a reaction but emerges from\n   it unharmed.  All {eater}s are catalysts.  Some small {still life}s\n   can act as catalysts in some situations, such as the {block}, {ship},\n   and {tub}.  The still lifes and oscillators that form a {conduit} are\n   examples of catalysts.\n     A relatively rare form of catalysis occurs in a\n   {transparent debris effect}, where the catalyst in question is\n   completely destroyed and then rebuilt.  The term is also sometimes\n   used for a modification of an active reaction in a {rake} by passing\n   {spaceship}s.\n",
    "grid": []
  },
  {
    "name": "catch and throw",
    "desc": "  A {technology} used (e.g., in the {Caterpillar}) to\n   adjust the timing of a glider by turning it into a stationary object\n   using one interaction, and then later restoring it using a second\n   interaction.  The interactions are caused by passing objects which\n   are not otherwise affected.  The direction of the glider is not\n   usually changed.\n     Here is an example where a glider is turned into a {boat} by the\n   first {LWSS}, and is then restored by the remaining {spaceship}s:\n",
    "grid": [
      "000000000000000000000000000000000011000000000000011000000011110",
      "000000000000000000000000000000001000010000000000110111100010001",
      "000000000000000000000000000000010000000000000000011111100010000",
      "000000000000000000000000000000010000010000000000001111000001001",
      "010000000000000000000000000000011111100000000000000000000000000",
      "001000000000000000000000000000000000000000000000000000000000000",
      "111000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000111100000000000000000000000000000000000000000000000000000000",
      "000100010000000000000000000000000000000000000000000000000000000",
      "000100000000000000000000000000011000000000000000000000000000000",
      "000010010000000000000000000000110111000000000000000000000000000",
      "000000000000000000000000000000011111000000000000000000000000000",
      "000000000000000000000000000000001110000000000000000000000000000"
    ]
  },
  {
    "name": "caterer",
    "desc": " (p3)  Found by Dean Hickerson, August 1989.  Compare with\n   {jam}.  In terms of its minimum {population} of 12 this is the\n   smallest p3 {oscillator}.  See also {double caterer} and\n   {triple caterer}.\n",
    "grid": [
      "00100000",
      "10001111",
      "10001000",
      "10000000",
      "00010000",
      "01100000"
    ]
  },
  {
    "name": "Caterloopillar",
    "desc": "  A family of adjustable-speed {spaceship}s constructed\n   by Michael Simkin in 2016, based on an \"engineless caterpillar\" idea\n   originally proposed by David Bell.  The front and back halves of\n   Caterloopillars each function as universal constructors, with each\n   half constructing the building blocks of the other half, while also\n   reading and moving a construction tape. The overall design is\n   reminiscent of M.C. Escher's lithograph \"Drawing Hands\". The name\n   \"Caterloopillar\" is a reference to Douglas Hofstader's Strange Loop\n   concept.\n     Simkin has written an automated script that can construct a\n   Caterloopillar for any rational speed strictly less than c/4, with\n   some exceptions.  Speeds closer to the c/4 limit in general require\n   larger constructions, and for any given computer system it is easy to\n   choose a speed that makes it impractical to construct a\n   Caterloopillar.\n     As of June 2018 one significant remaining exception is that\n   Caterloopillars with periods c/(6+4N) can't be constructed.  This is\n   only a limitation of the current construction script, not of the\n   underlying Caterloopillar {toolkit}.  For technical reasons, the\n   lowest speed that the current script can produce is around c/95.  The\n   slowest Caterloopillars that have been explicitly constructed to date\n   are c/87 and c/92.  These are among the smallest in terms of\n   population, though their bounding boxes are larger than some of the\n   higher-speed Caterloopillars.\n",
    "grid": []
  },
  {
    "name": "Caterpillar",
    "desc": "  A {spaceship} that works by laying tracks at its front\n   end.  The first example constructed was a p270 17c/45 spaceship built\n   by Gabriel Nivasch in December 2004, based on work by himself, Jason\n   Summers and David Bell.  This Caterpillar has a population of about\n   12 million in each generation and was put together by a computer\n   program that Nivasch wrote.  At the time it was by far the largest\n   and most complex Life object ever constructed, and it is still one of\n   the largest in terms of population.\n     The 17c/45 Caterpillar is based on the following reaction between a\n   {pi-heptomino} and a {blinker}:\n",
    "grid": [
      "0000000000000001",
      "1000000000000011",
      "1000000000000110",
      "1000000000000011",
      "0000000000000001"
    ]
  },
  {
    "name": "CatForce",
    "desc": "  An optimized {search program} written by Michael Simkin in\n   2015, using brute-force enumeration of small {Spartan} objects in a\n   limited area, instead of a depth-first tree search.  One major\n   purpose of CatForce is to find glider-constructible completions for\n   signal conduits.  An early CatForce discovery was the {B60} conduit,\n   which enabled a record-breaking new glider gun.\n",
    "grid": []
  },
  {
    "name": "Catherine wheel",
    "desc": "  = {pinwheel}\n",
    "grid": []
  },
  {
    "name": "cauldron",
    "desc": " (p8)  Found in 1971 independently by Don Woods and Robert\n   Wainwright.  Compare with {Hertz oscillator}.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00000100000",
      "00000000000",
      "00011111000",
      "10100000101",
      "11010001011",
      "00010001000",
      "00010001000",
      "00001110000",
      "00000000000",
      "00001101000",
      "00001011000"
    ]
  },
  {
    "name": "cavity",
    "desc": "  = {eater plug}\n",
    "grid": []
  },
  {
    "name": "CC semi-cenark",
    "desc": "  The {colour-changing} version of Tanner Jacobi's\n   century-based semi-Snark mechanism, using a {C-to-G} consisting of a\n   {BTS} {catalyst} and a {block}.  See {CP semi-cenark} for the\n   {colour-preserving} version, or {semi-cenark} for repeat time details\n   and an alternate initial catalyst.\n",
    "grid": [
      "01000000000000110000000000",
      "00100000000001010000000000",
      "11100000110010000000000000",
      "00000000100101100000000000",
      "00000100001101010000000000",
      "00010100000000100000000000",
      "00001100000000000000110000",
      "00000000000000000000100000",
      "00000001100000000010100000",
      "00000001100000000011000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00001100001100000000000000",
      "00010100010100000000000000",
      "00010000001000000000000000",
      "00110000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000011000",
      "00000000000000000001001000",
      "00000000000000000001110000",
      "00000000000000000000000000",
      "00000000000000110001101011",
      "00000000000000110000101101",
      "00000000000000000000100000",
      "00000000000000000001100000"
    ]
  },
  {
    "name": "CC semi-Snark",
    "desc": "  A small 90-degree {colour-changing} {glider reflector}\n   requiring two input gliders on the same lane for each output glider.\n   It was discovered by Sergei Petrov on 1 July 2013, using a\n   custom-written search utility.  It functions as a very compact\n   {period doubler} in some {signal} {circuit}ry, for example the\n   {linear propagator}.  The semi-Snark can period-double a regular\n   glider {stream} of period 51 or more, or an {intermittent stream}\n   with two gliders every 67 ticks or more, since the block reset glider\n   can be sent just 16 ticks before its partner.\n",
    "grid": [
      "0000001000000000011",
      "0000000110000000010",
      "0000001100000001010",
      "0000000000000001100",
      "0000000000100000000",
      "1100000000011000000",
      "1100000000110000000",
      "0000000000000000000",
      "0000000000000000000",
      "0000000000000000011",
      "0000000000110000011",
      "0000000000110000000",
      "0000000000000000000",
      "0000010000000000000",
      "0000101000000000000",
      "0000110000001100000",
      "0000000000001000000",
      "0000000000000111000",
      "0000000000000001000"
    ]
  },
  {
    "name": "cell",
    "desc": "  The fundamental unit of space in the Life universe.  The term is\n   often used to mean a live cell - the sense is usually clear from the\n   context.\n",
    "grid": []
  },
  {
    "name": "cellular automaton",
    "desc": "  A certain class of mathematical objects of which\n   {Life} is an example.  A cellular automaton consists of a number of\n   things.  First there is a positive integer n which is the dimension\n   of the cellular automaton.  Then there is a finite set of states S,\n   with at least two members.  A state for the whole cellular automaton\n   is obtained by assigning an element of S to each point of the\n   n-dimensional lattice Z^n (where Z is the set of all integers). The\n   points of Z^n are usually called cells.  The cellular automaton also\n   has the concept of a neighbourhood.  The neighbourhood N of the\n   origin is some finite (nonempty) subset of Z^n.  The neighbourhood of\n   any other cell is obtained in the obvious way by translating that of\n   the origin.  Finally there is a transition rule, which is a function\n   from S^N to S (that is to say, for each possible state of the\n   neighbourhood the transition rule specifies some cell state). The\n   state of the cellular automaton evolves in discrete time, with the\n   state of each cell at time t+1 being determined by the state of its\n   neighbourhood at time t, in accordance with the transition rule.\n     There are some variations on the above definition.  It is common to\n   require that there be a quiescent state, that is, a state such that\n   if the whole universe is in that state at generation 0 then it will\n   remain so in generation 1.  (In Life the OFF state is quiescent, but\n   the ON state is not.)  Other variations allow spaces other than Z^n,\n   neighbourhoods that vary over space and/or time, probabilistic or\n   other non-deterministic transition rules, etc.\n     It is common for the neighbourhood of a cell to be the 3x...x3\n   (hyper)cube centred on that cell.  (This includes those cases where\n   the neighbourhood might more naturally be thought of as a proper\n   subset of this cube.)   This is known as the Moore neighbourhood.\n",
    "grid": []
  },
  {
    "name": "census",
    "desc": "  A count of the number of different individual Life objects\n   within one larger object, most often the final {ash} of a random\n   {soup} experiment.  This includes the number of {block}s, {blinker}s,\n   {glider}s, and other common objects, as well as any rarer larger\n   {still life}s, {oscillator}s or {spaceship}s.\n",
    "grid": []
  },
  {
    "name": "centinal",
    "desc": " (p100)  Found by Bill Gosper.  This combines the mechanisms\n   of the p46 and p54 shuttles (see {twin bees shuttle} and\n   {p54 shuttle}).\n",
    "grid": [
      "1100000000000000000000000000000000000000000000000011",
      "0100000000000000000000000000000000000000000000000010",
      "0101000000000000000000000110000000000000000000001010",
      "0011000000001000000000000110000000000001100000001100",
      "0000000000011000000000000000000000000001010000000000",
      "0000000000110000000000000000000000000000010000000000",
      "0000000000011001100000000000000000000001110000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000011001100000000000000000000001110000000000",
      "0000000000110000000000000000000000000000010000000000",
      "0000000000011000000000000000000000000001010000000000",
      "0011000000001000000000000110000000000001100000001100",
      "0101000000000000000000000110000000000000000000001010",
      "0100000000000000000000000000000000000000000000000010",
      "1100000000000000000000000000000000000000000000000011"
    ]
  },
  {
    "name": "Centipede",
    "desc": " (31c/240 orthogonally, p240)  The smallest known {31c/240}\n   spaceship, constructed by Chris Cain in September 2014 as a\n   refinement of the {shield bug}.\n",
    "grid": []
  },
  {
    "name": "century",
    "desc": " (stabilizes at time 103)  This is a common pattern which\n   evolves into three {block}s and a {blinker}.  In June 1996 Dave\n   Buckingham built a neat {p246 gun} using a century as the engine.\n   See also {bookend} and {diuresis}.\n",
    "grid": [
      "0011",
      "1110",
      "0100"
    ]
  },
  {
    "name": "century eater",
    "desc": "  A 20-cell {still life} that functions as an {eater} for\n   the active reaction produced by any {century} relative.  The most\n   well-known use is to replace a four-object {constellation} in Paul\n   Callahan's {bistable switch}, as shown below.  In September 2014 Josh\n   Ball showed that a variant of this still life has a relatively\n   inexpensive {slow glider construction} {recipe}.\n",
    "grid": [
      "000000000000101100000000000000",
      "000000000000110100000000000000",
      "000000000000000000000000000000",
      "000000000011111000000000000000",
      "000000000100100100000000000000",
      "000000000110001010000000000000",
      "000000000000000110000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000011",
      "000000000000000000000000000011",
      "000000000000000000000000000000",
      "100000000000000000000000000000",
      "011000000000000000000000000000",
      "110000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000011000000000000000000000000",
      "000101000000000000000000000000",
      "000100000000000000000000000000",
      "001100000000110000000000000000",
      "000000000000110000000000000000"
    ]
  },
  {
    "name": "century-to-glider converter",
    "desc": "  Any {signal} {circuit} that accepts a\n   {century} as input and produces a clean output {glider}.  For\n   example, in November 2017 Adam P. Goucher noticed that this\n   previously known C-to-G {converter} can replace the {century eater}\n   in Paul Callahan's {bistable switch}, producing an extra glider\n   output.\n",
    "grid": [
      "0000000000000000000000110000000",
      "0000000000000000000000010000000",
      "0000000000000000000000010100000",
      "0000000000000000000000001010000",
      "0000000000000000000000000100011",
      "0000000000000000000000000000011",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "1100000000000000000000000000000",
      "1100000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000001000000000",
      "0000000000000000000011100000000",
      "0000000000000000000000110000000"
    ]
  },
  {
    "name": "channel",
    "desc": "  A {lane} or {signal} path used in construction circuitry.\n   Until the invention of {single-channel} {construction arm}s, signals\n   in a channel would usually be {synchronized} with one or more\n   coordinated signals on other paths, as in the {Gemini}, which used\n   twelve channels to run three construction arms simultaneously, or the\n   10hd {Demonoid} which needed only two channels.  See also {Geminoid}.\n",
    "grid": []
  },
  {
    "name": "chaotic growth",
    "desc": "  An object whose {fate} is unknown, except that it\n   appears to grow forever in an unpredictable manner.  In Life, no\n   pattern has yet been found that is chaotic.  This is in contrast to\n   many other Life-like rules, where even small objects can appear to\n   grow chaotically.\n     It is possible that chaotic growth may occur rarely or even\n   regularly for large enough random Life objects, but if so the minimum\n   size of such patterns must be larger than what can currently be\n   experimentally simulated (but see {novelty generator}).\n     In any case, it is not decidable whether a pattern that apparently\n   grows randomly forever is in fact displaying chaotic growth.\n   Continuing to evolve such a pattern might at any time result in it\n   suddenly cleaning itself up and becoming predictable.\n",
    "grid": []
  },
  {
    "name": "chemist",
    "desc": " (p5)\n",
    "grid": [
      "000000010000000",
      "000000011100000",
      "000000000010000",
      "000001110010011",
      "000010101010101",
      "000010001010100",
      "011010000010110",
      "001010100010000",
      "101010101010000",
      "110010011100000",
      "000010000000000",
      "000001110000000",
      "000000010000000"
    ]
  },
  {
    "name": "C-heptomino",
    "desc": "  Name given by Conway to the following {heptomino}, a less\n   common variant of the {B-heptomino}.\n",
    "grid": [
      "0111",
      "1110",
      "0100"
    ]
  },
  {
    "name": "Cheshire cat",
    "desc": "  A block {predecessor} by C. R. Tompkins that\n   unaccountably appeared both in Scientific American and in\n   {Winning Ways}.  See also {grin}.\n",
    "grid": [
      "010010",
      "011110",
      "100001",
      "101101",
      "100001",
      "011110"
    ]
  },
  {
    "name": "chicken wire",
    "desc": "  A type of {stable} {agar} of {density} 1/2.  The\n   simplest version is formed from the tile:\n",
    "grid": [
      "1100",
      "0011"
    ]
  },
  {
    "name": "chirality",
    "desc": "  A term borrowed from chemistry to describe asymmetrical\n   patterns with two distinct mirror-image orientations.  One common use\n   is in relation to {Herschel transmitter}s, where the spacing between\n   the two gliders in the {tandem glider} output can limit the\n   {receiver} to a single chirality.\n",
    "grid": []
  },
  {
    "name": "cigar",
    "desc": "  = {mango}\n",
    "grid": []
  },
  {
    "name": "circuit",
    "desc": "  Any combination of {conduit}s or {converter}s that moves or\n   processes an active {signal}.  This includes components with multiple\n   states such as {period multiplier}s or {switch}es, which can be used\n   to build {gun}s, logic gates, {universal constructor}s, and other\n   computation or construction circuitry.\n",
    "grid": []
  },
  {
    "name": "cis-beacon on anvil",
    "desc": " (p2)\n",
    "grid": [
      "0001100",
      "0000100",
      "0100000",
      "0110000",
      "0000000",
      "0111100",
      "1000010",
      "0111010",
      "0001011"
    ]
  },
  {
    "name": "cis-beacon on table",
    "desc": " (p2)\n",
    "grid": [
      "0011",
      "0001",
      "1000",
      "1100",
      "0000",
      "1111",
      "1001"
    ]
  },
  {
    "name": "cis-boat with tail",
    "desc": " (p1)\n",
    "grid": [
      "01000",
      "10100",
      "11010",
      "00010",
      "00011"
    ]
  },
  {
    "name": "cis fuse with two tails",
    "desc": " (p1)  See also {pulsar quadrant}.\n",
    "grid": [
      "000100",
      "011100",
      "100011",
      "010010",
      "001010",
      "000100"
    ]
  },
  {
    "name": "cis-mirrored R-bee",
    "desc": " (p1)\n",
    "grid": [
      "0110110",
      "1010101",
      "1010101",
      "0100010"
    ]
  },
  {
    "name": "cis snake",
    "desc": "  = {canoe}\n",
    "grid": []
  },
  {
    "name": "clean",
    "desc": "  Opposite of {dirty}.  A reaction which produces a small number\n   of different products which are desired or which are easily deleted\n   is said to be clean.  For example, a {puffer} which produces just one\n   object per period is clean.  Clean reactions are useful because they\n   can be used as building blocks in larger constructions.\n     When a {fuse} is said to be clean, or to {burn} cleanly, this\n   usually means that no debris at all is left behind.\n",
    "grid": []
  },
  {
    "name": "clearance",
    "desc": "  In signal circuitry, the distance from an {edge shooter}\n   output {lane} to the last unobstructed lane adjacent to the\n   edge-shooter circuitry.  For example, an {Fx119 inserter} has an\n   unusually high 27{hd} clearance.\n     Also, oscillator and eater variants may be said to have better\n   clearance if they allow {glider}s or other {signal}s to pass closer\n   to them than the standard variant allows.  The following\n   high-clearance {eater1} variant by Karel Suhajda allows gliders to\n   pass one lane closer on the southeast side, than is allowed by the\n   standard fishhook shape.\n",
    "grid": [
      "0100000011",
      "0010011001",
      "1110001010",
      "0000001011",
      "0001101000",
      "0001001000",
      "0000110000"
    ]
  },
  {
    "name": "clock",
    "desc": " (p2)  Found by Simon Norton, May 1970.  This is the fifth or\n   sixth most common {oscillator}, being about as frequent as the\n   {pentadecathlon}, but much less frequent than the {blinker}, {toad},\n   {beacon} or {pulsar}.  It is surprisingly rare considering its small\n   size.\n",
    "grid": [
      "0010",
      "1010",
      "0101",
      "0100"
    ]
  },
  {
    "name": "clock II",
    "desc": " (p4)  Compare with {pinwheel}.\n",
    "grid": [
      "000000110000",
      "000000110000",
      "000000000000",
      "000011110000",
      "110100001000",
      "110100101000",
      "000100101011",
      "000101001011",
      "000011110000",
      "000000000000",
      "000011000000",
      "000011000000"
    ]
  },
  {
    "name": "clock inserter",
    "desc": "  = {clock insertion}.\n",
    "grid": []
  },
  {
    "name": "clock insertion",
    "desc": "  A uniquely effective method of adding a glider to the\n   front edge of a {salvo}, by first constructing a {clock}, then\n   converting it to a glider using a one-bit {spark}.  Here it rebuilds\n   a sabotaged glider in a deep pocket between other gliders:\n",
    "grid": [
      "00000000000000000000000000000000000000000000000000100000000",
      "00000000000000000000000000000000000000000000000000101000000",
      "00000000000000000000000000000000000000000000000000110000000",
      "00000000000000000000000000000000000000000000000100000010000",
      "00000000000000000000000000000000000000000000001000000100000",
      "00000000000000000000000000000000000000000000001110000111000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000001000000100000000",
      "00000000000000000000000000000000000000000001010000101000001",
      "00000000000000000000000000000000000000000001100000110000110",
      "00000000000000000000000000000000000000001000000010000000011",
      "00000000000000000000000000000000000000010000000000000000000",
      "00000000000000000000000000000000000000011100000000000101000",
      "00000000000000000000000000000000000000000000000000000110000",
      "00000000000000000000000000000000000000000000000000000010000",
      "10000000000000000000000000000000000000000000000000010000000",
      "01100000000000000000000000000000000000000000000001100000000",
      "11000000000000000000000000000000000000000000000000110000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000100000000000000000000000000000",
      "00000000000000000000100000010100000000000000000000000000000",
      "00000000000000000010100000001100000000000000000000000000000",
      "00000000000000000001100000000000000000000000000000000000000",
      "00000000000000000000000001000000000000000000000000000000000",
      "00000000000000000000000000100001110000000000000000000000000",
      "00000000000000000000000011100001000000000000000000000000000",
      "00000000000000000000000000000000100000000000000000000000000",
      "00000000000000000000000000000000000001100000000000000000000",
      "00000000000000000000000000001100000001010000000000000000000",
      "00000000000000000000000000001010000001000000000000000000000",
      "00000000000000000000000000001000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000011000000000000",
      "00000000000000000000000000000000000000000000010100000000000",
      "00000000000000000000000000000000000000000000010000000000000"
    ]
  },
  {
    "name": "cloud of smoke",
    "desc": "  = {smoke}\n",
    "grid": []
  },
  {
    "name": "cloverleaf",
    "desc": "  This name was given by Robert Wainwright to his p2\n   oscillator {washing machine}.  But Achim Flammenkamp also gave this\n   name to {Achim's p4}.\n",
    "grid": []
  },
  {
    "name": "cluster",
    "desc": "  Any pattern in which each live cell is connected to every\n   other live cell by a path that does not pass through two consecutive\n   dead cells.  This sense is due to Nick Gotts, but the term has also\n   been used in other senses, often imprecise.\n",
    "grid": []
  },
  {
    "name": "CNWH",
    "desc": "  Conweh, creator of the Life universe.\n",
    "grid": []
  },
  {
    "name": "Coe ship",
    "desc": " (c/2 orthogonally, p16)  A {puffer engine} discovered by Tim\n   Coe in October 1995.\n",
    "grid": [
      "0000111111",
      "0011000001",
      "1101000001",
      "0000100010",
      "0000001000",
      "0000001100",
      "0000011110",
      "0000011011",
      "0000000110"
    ]
  },
  {
    "name": "Coe's p8",
    "desc": " (p8)  Found by Tim Coe in August 1997.\n",
    "grid": [
      "110000000000",
      "110011000000",
      "000001100000",
      "000010010000",
      "000000010011",
      "000001010011"
    ]
  },
  {
    "name": "Collatz 5N+1 simulator",
    "desc": "  An {unknown fate} pattern constructed by David\n   Bell in December 2017 that simulates the Collatz 5N+1 algorithm using\n   {sliding block memory} and {p1} {technology}, while always having a\n   population below 32000.\n     The algorithm is simple.  Starting with a number, if it is even\n   divide it by 2, otherwise multiply it by 5 and add 1.  When this\n   process is iterated a sequence of numbers is generated.  When\n   starting with the value of 7, it is currently unknown whether or not\n   the sequence ever forms a cycle.\n     Because of this the fate of the simulator is also currently\n   unknown. It may become stable, or become an oscillator with a high\n   period, or have a bounding box which grows irregularly.\n",
    "grid": []
  },
  {
    "name": "colour",
    "desc": "  = {colour of a glider}\n",
    "grid": []
  },
  {
    "name": "colour-changing",
    "desc": "  See {colour of a glider}.  The {reflector} shown in\n   {p8 bouncer} is colour-changing, as are its 5/6/7/8 and higher-period\n   versions.\n",
    "grid": []
  },
  {
    "name": "colour-changing semi-Snark",
    "desc": "  = {CC semi-Snark}.\n",
    "grid": []
  },
  {
    "name": "colourised Life",
    "desc": "  A {cellular automaton} that is the same as Life\n   except for the use of a number of different ON states (\"colours\").\n   All ON states behave the same for the purpose of applying the Life\n   rule, but additional rules are used to specify the colour of the\n   resulting ON cells.  Examples are {Immigration} and {QuadLife}.\n",
    "grid": []
  },
  {
    "name": "colour of a glider",
    "desc": "  The colour of a {glider} is a property of the\n   glider that remains constant while the glider is moving along a\n   straight path, but that can be changed when the glider bounces off a\n   {reflector}.  It is an important consideration when building\n   something using reflectors.\n     The colour of a glider can be defined as follows.  First choose\n   some cell to be the origin.  This cell is then considered to be\n   white, and all other cells to be black or white in a checkerboard\n   pattern.  (So the cell with coordinates (m,n) is white if m+n is\n   even, and black otherwise.)  Then the colour of a glider is the\n   colour of its leading cell when it is in a phase that can be rotated\n   to look like this:\n",
    "grid": [
      "111",
      "001",
      "010"
    ]
  },
  {
    "name": "colour-preserving",
    "desc": "  See {colour of a glider}.  {Snark}s and {bumper}s\n   are colour-preserving reflectors.\n",
    "grid": []
  },
  {
    "name": "colour-preserving semi-Snark",
    "desc": "  = {CP semi-Snark}\n",
    "grid": []
  },
  {
    "name": "complementary blinker",
    "desc": "  = {fore and back}\n",
    "grid": []
  },
  {
    "name": "component",
    "desc": "  A partial {glider synthesis} that can be used in the same\n   way in multiple {glider recipe}s.  A component transforms part of an\n   object under construction in a well-defined way, without affecting\n   the rest of the object.  For example, this well-known component can\n   be used to add a {hook} to any object that includes a protruding\n   {table} end, converting it to a {long bookend}:\n",
    "grid": [
      "000000010000000000000000000100000000000000000001",
      "000001100000000000000000011000000000000000000110",
      "000000110000000000000000001100000000000000000011",
      "000000000000000000000000000000000000000000000000",
      "001000000000000000000010000000000000000000100000",
      "101000000000000000001010000000000000000010100000",
      "011001000000000000000110010000000000000001100100",
      "000001010000000000000000010100000000000000000101",
      "000001100000000000000000011000000000000000000110",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000001000000000000000000000000000",
      "000100100000000000010101001000000000000110010010",
      "000111100000000000001101111000000000000100011110",
      "000000000000000000000010000000000000000011100000",
      "000001100000000000000010100000000000000000101000",
      "000001100000000000000001010000000000000000011000",
      "000000000000000000000000100000000000000000000000"
    ]
  },
  {
    "name": "composite",
    "desc": "  See {composite conduit}.\n",
    "grid": []
  },
  {
    "name": "composite conduit",
    "desc": "  A signal-processing {conduit} that can be\n   subdivided into two or more {elementary conduit}s.\n",
    "grid": []
  },
  {
    "name": "compression",
    "desc": "  = {repeat time}, {recovery time}.\n",
    "grid": []
  },
  {
    "name": "computational universality",
    "desc": "  See {universal computer}.\n",
    "grid": []
  },
  {
    "name": "conduit",
    "desc": "  Any arrangement of {still life}s and/or {oscillator}s that\n   moves an active object to another location, perhaps also transforming\n   it into a different active object at the same time, but without\n   leaving any permanent debris (except perhaps gliders, or other\n   spaceships) and without any of the still lifes or oscillators being\n   permanently damaged.  Probably the most important conduit is the\n   following remarkable one (Dave Buckingham, July 1996) in which a\n   {B-heptomino} is transformed into a {Herschel} in 59 generations.\n",
    "grid": [
      "0000000001101",
      "1011000000111",
      "1101000000010",
      "0000000000000",
      "0000000001100",
      "0000000001100"
    ]
  },
  {
    "name": "conduit 1",
    "desc": "  = {BFx59H}.\n",
    "grid": []
  },
  {
    "name": "confused eaters",
    "desc": " (p4)  Found by Dave Buckingham before 1973.\n",
    "grid": [
      "10000000000",
      "11100000000",
      "00010000000",
      "00100000000",
      "00100100000",
      "00000100000",
      "00010100000",
      "00011001100",
      "00000001010",
      "00000000010",
      "00000000011"
    ]
  },
  {
    "name": "constellation",
    "desc": "  A general term for a group of two or more separate\n   objects, usually small still lifes and low-period oscillators.\n   Compare {pseudo still life}.\n",
    "grid": []
  },
  {
    "name": "construction arm",
    "desc": "  An adjustable mechanism in a {universal constructor}\n   that allows new objects to be constructed in any chosen location that\n   the arm can reach.  A construction arm generally consists of a\n   {shoulder} containing fixed guns or edge shooters, a movable\n   {construction elbow} that slides forward and backward along the\n   {construction lane}(s), and in the case of {single-arm} universal\n   constructors, a {hand} target object at the construction site that\n   can be progressively modified by a {slow salvo} to produce each\n   desired object.\n",
    "grid": []
  },
  {
    "name": "construction elbow",
    "desc": "  One of the components of a {construction arm} in a\n   {universal constructor}.  The elbow usually consists of a single\n   {Spartan} still life or small constellation.  It accepts\n   {elbow operation} recipes, in the form of {salvo}s coming from the\n   construction arm's {shoulder}.\n     These recipes may do one of several things:  1) {pull} the elbow\n   closer to the shoulder, 2) {push} the elbow farther from the\n   shoulder, 3) emit a glider on a particular output {lane} (while also\n   optionally pushing or pulling the elbow); 4) create a \"{hand}\" target\n   block or other useful object as a target for output gliders, to one\n   side of the {construction lane}; 5)  duplicate the elbow, or 6)\n   destroy the elbow.\n     Elbows that receive and emit orthogonally-travelling {spaceship}s\n   instead of gliders are technically possible, but no working examples\n   are currently known.  The discussion below assumes that gliders are\n   used to communicate between the shoulder, elbow, and hand locations.\n     If a mechanism can be programmed to generate recipes for at least\n   the first three options listed above, it is generally capable of\n   functioning as a {universal constructor}.  The main requirement is\n   that push and pull {elbow operation}s should be available that are\n   either minimal (1{fd}) or the distances should be relatively prime.\n     Depending on the {elbow operation} library, there may be only one\n   type of elbow, or there may be two or more elbow objects, with\n   recipes that convert between them.  The {9hd} library had just one\n   elbow type, a block.  The original 10{hd} library had two elbows,\n   blocks in mirror-symmetric locations; this was expanded to a larger\n   list for the {10hd Demonoid}.  The {0hd Demonoid} also has a\n   multi-elbow recipe library.  A {slow elbow} toolkit may make use of\n   an even larger number of glider output recipes, because the {target}\n   elbow object in that case is not restricted to a single diagonal\n   line.\n     If only one colour, parity, or phase of glider can be emitted, then\n   the mechanism will be limited to producing {monochromatic salvo}s or\n   {monoparity salvo}s.  These are less efficient at most construction\n   tasks, but are still generally accepted to enable\n   {universal toolkit}s.  See also {half-baked knightship}.\n",
    "grid": []
  },
  {
    "name": "construction envelope",
    "desc": "  The region affected by an active reaction, such\n   as a {glider synthesis} of an object.  The envelope corresponds to\n   the state-2 blue cells in {LifeHistory}.  See also {edgy}.\n",
    "grid": []
  },
  {
    "name": "construction lane",
    "desc": "  Part of a {construction arm} between the {shoulder}\n   and the {elbow} - in particular, one of the fixed {lane}s that\n   {elbow operation} signals travel on.  All known\n   {universal constructor}s have used arms with two or more construction\n   lanes, except for the ones in the {0hd Demonoid} and in recent\n   {single-channel} construction recipes.\n",
    "grid": []
  },
  {
    "name": "construction recipe",
    "desc": "  One or more streams of {glider}s or other signals\n   fed into a {universal constructor} to create a target object.\n   Compare {glider recipe}.\n",
    "grid": []
  },
  {
    "name": "construction universality",
    "desc": "  See {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "converter",
    "desc": "  A {conduit} in which the input object is not of the same\n   type as the output object.  This term tends to be preferred when\n   either the input object or the output object is a {spaceship}.\n     The following diagram shows a p8 {pi-heptomino}-to-{HWSS}\n   converter.  This was originally found by Dave Buckingham in a larger\n   form (using a {figure-8} instead of the {boat}).  The improvement\n   shown here is by Bill Gosper (August 1996).  Dieter Leithner has\n   since found (much larger) {oscillator}s of periods 44, 46 and 60 that\n   can be used instead of the {Kok's galaxy}.\n",
    "grid": [
      "010100100000000",
      "011101011000000",
      "100000010000010",
      "010000011000101",
      "000000000000011",
      "110000010000000",
      "010000001000000",
      "110101110000000",
      "001001010000000",
      "000000000000111",
      "000000000000101",
      "000000000000101"
    ]
  },
  {
    "name": "convoy",
    "desc": "  A collection of {spaceship}s all moving in the same direction\n   at the same speed.  Convoys are usually not destroyed by the\n   reactions that they cause.  Compare {salvo}.  For examples, see\n   {reanimation}, {fly-by deletion} and {glider turner}.\n",
    "grid": []
  },
  {
    "name": "copperhead",
    "desc": " (c/10 orthogonally, p10)  The following small c/10\n   {spaceship}, discovered by conwaylife.com forum user 'zdr' on 5 March\n   2016, using a simple depth-first search program.  A\n   {glider synthesis} was found on the same day.\n",
    "grid": [
      "011110",
      "000000",
      "010010",
      "101101",
      "100001",
      "000000",
      "100001",
      "110011",
      "111111",
      "010010",
      "001100",
      "001100"
    ]
  },
  {
    "name": "Corder-",
    "desc": "  Prefix used for things involving {switch engine}s, after\n   Charles Corderman.\n",
    "grid": []
  },
  {
    "name": "Corder engine",
    "desc": "  = {switch engine}\n",
    "grid": []
  },
  {
    "name": "Cordergun",
    "desc": "  A {gun} firing {Cordership}s.  The first was built by Jason\n   Summers in July 1999, using a {glider synthesis} by Stephen Silver.\n",
    "grid": []
  },
  {
    "name": "Cordership",
    "desc": "  Any {spaceship} based on {switch engine}s.  These\n   necessarily move at a speed of c/12 diagonally with a period of 96 or\n   a multiple thereof.  The first Cordership was constructed by Dean\n   Hickerson in April 1991, using 13 switch engines.  He soon reduced\n   this to 10, and in August 1993 to 7.  In July 1998 he reduced it to\n   6.  In January 2004, Paul Tooke found the 3-engine {glide symmetric}\n   Cordership shown below.\n",
    "grid": [
      "000000000000000000000000000000001101000000000000000000000000000",
      "000000000000000000000000000000011101000000101000000000000000000",
      "000000000000000000000000000000100001010000100000000000000000000",
      "000000000000000000000000000000011000000101000100000000000000000",
      "000000000000000000000000000000001000100100110000000000000000000",
      "000000000000000000000000000000000001011000100000000000000000000",
      "000000000000000000000000000000000010100000000000000001100000000",
      "000000000000000000000000000000000010100000000000000001100000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000000000011000000011",
      "000000000000000000000000000000000000000100000000010111100000000",
      "000000000000000000000000000000000010001111100000110100011000000",
      "000000000000000000000000000000000101000000011000010011011000000",
      "000000000000000000000000000000000100000001011000001111110000000",
      "000000000000000000000000000000000010000000011000000100000000000",
      "000000000000000000000000000000000001000111100000000000000000000",
      "000000000000000000000000000000000000000011100000000000000000000",
      "000000000000000000000000101000000000110000000000000000000000000",
      "000000000000000000000000101010000001010000000000000000000000000",
      "000000000000000000000001001101000011000000000000000000000000000",
      "000000000000000000000000110001010110100000000000000000000000000",
      "000000000000000000000000110001101111100000000000000000000000000",
      "000000000000000000000000000010110001100000000000000000000000000",
      "000000000000000000000000000101000000000000000000000000000000000",
      "001101000000000000000000000000000000000000000000000000000000000",
      "011101000000101000000000000000000000000000000000000000000000000",
      "100001010000100000000000000000000000000000000000000000000000000",
      "011000000101000100000000000000000000000000000000000000000000000",
      "001000100100110000000000010000000000000000000000000000000000000",
      "000001011000100000000000111000000000000000000000000000000000000",
      "000010100000000000000000100100000000000000000000000000000000000",
      "000010100000000000000001000010000000000000000000000000000000000",
      "000000000000000000000000100000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000100100000000000000000000000000000000000",
      "000000000000000000000000010100000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000100000000000000000000000000000000000000000",
      "000000000000000000001110000000000000000000000000000000000000000",
      "000000000000000000011011000000000000000000000000000000000000000",
      "000000000100000000110100000100000000000000000000000000000000000",
      "000010001111100001100000011000000000000000000000000000000000000",
      "000101000000011001100000001100000000000000000000000000000000000",
      "000100000001011000000000000000000000000000000000000000000000000",
      "000010000000011000000000000000000000000000000000000000000000000",
      "000001000111100000000000000000000000000000000000000000000000000",
      "000000000011100000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000001100000000000000000000000000000000000000000000000000",
      "000000000001100000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "cousins",
    "desc": " (p3)  This contains two copies of the {stillater} {rotor}.\n",
    "grid": [
      "0000010110000",
      "0001110101000",
      "1010000001000",
      "1101101101011",
      "0001010000101",
      "0001010111000",
      "0000110100000"
    ]
  },
  {
    "name": "cover",
    "desc": "  The following {induction coil}.  See {scrubber} for an example\n   of its use.\n",
    "grid": [
      "00001",
      "00111",
      "01000",
      "01000",
      "11000"
    ]
  },
  {
    "name": "covered table",
    "desc": "  = {cap}\n",
    "grid": []
  },
  {
    "name": "cow",
    "desc": " (c p8 fuse)\n",
    "grid": [
      "110000000110011001100110011001100110011001100110011001100000",
      "110000101110011001100110011001100110011001100110011001100011",
      "000011010000000000000000000000000000000000000000000000000101",
      "000011000111111111111111111111111111111111111111111111111100",
      "000011010000000000000000000000000000000000000000000000000010",
      "110000101110011001100110011001100110011001100110011001100110",
      "110000000110011001100110011001100110011001100110011001100000"
    ]
  },
  {
    "name": "CP pulsar",
    "desc": "  = {pulsar}\n",
    "grid": []
  },
  {
    "name": "CP semi-cenark",
    "desc": "  A {colour-preserving} variant of Tanner Jacobi's\n   century-based semi-Snark mechanism, the {semi-cenark}.  See\n   {CC semi-cenark} for the {colour-changing} version, or {semi-cenark}\n   for repeat time details and an alternate initial catalyst.\n",
    "grid": [
      "010000000000001100000000",
      "001000000000010100000000",
      "111000001100100000000000",
      "000000001001011000000000",
      "000001000011010100000000",
      "000101000000001000000000",
      "000011000000000000001100",
      "000000000000000000001000",
      "000000011000000000101000",
      "000000011000000000110000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000011000011000000000000",
      "000101000101000000000000",
      "000100000010000000000000",
      "001100000000000000011000",
      "000000000000000000001000",
      "000000000000000000001011",
      "000000000000000001101101",
      "000000000000000000100000",
      "000000000000000010100000",
      "000000000000000011000000"
    ]
  },
  {
    "name": "CP semi-Snark",
    "desc": "  A period-multiplying {colour-preserving} {signal}\n   {conduit} found by Tanner Jacobi in October 2017, producing one\n   output {glider} for every two input gliders.  It is made by replacing\n   one of the eaters in a {Snark} with a {catalyst} found using\n   {Bellman}.  The catalyst causes the formation of a {tub} which\n   requires a second glider to delete.  However, this adds 5 ticks to\n   the repeat time, so that it becomes 48.  This is still 3 ticks faster\n   than the {CC semi-Snark}.\n",
    "grid": [
      "010000000000000000000000000000",
      "001000000000000011000000000000",
      "111000000000000001000000000000",
      "000000000000000100000110000000",
      "000000000000000110000010000000",
      "000000000000000000000010110000",
      "000000000000000110011010010000",
      "000000000000000110001011000000",
      "000000000000000000001000000000",
      "000000000000000000011000000000",
      "000000000000000000000000000000",
      "000000000000000000000000011000",
      "000000000000010000000000001000",
      "000000000000001000000000001011",
      "000000000000111000110000111001",
      "000000000000000000110001000110",
      "000000000000000000000001111000",
      "000000000110000000000000001000",
      "000000001010000000000001110000",
      "000000001000000000000010000000",
      "000000011000000000000001111100",
      "000000000000000000000000000100",
      "000000000000000000000000010000",
      "000000000000000000000000011000"
    ]
  },
  {
    "name": "crab",
    "desc": "  = {quarter}.\n",
    "grid": []
  },
  {
    "name": "crane",
    "desc": " (c/4 diagonally, p4)  The following {spaceship} found by Nicolay\n   Beluchenko in September 2005, a minor modification of a {tubeater}\n   found earlier by Hartmut Holzwart.  The wing is of the same form as\n   in the {swan} and {Canada goose}.\n",
    "grid": [
      "01100000000000000000",
      "11000000000000000000",
      "00100000000000000000",
      "00001100010000000000",
      "00001100101000000000",
      "00000001101000000000",
      "00000001100000000000",
      "00000001100000000000",
      "00000000000000000110",
      "00000000010000110100",
      "00000000011100110000",
      "00000000011100110000",
      "00000000001100000000",
      "00000000000000000000",
      "00000000000010000000",
      "00000000000110000000",
      "00000000000100000000",
      "00000000000010000000",
      "00000000000000000000",
      "00000000000001100000",
      "00000000000000101100",
      "00000000000000000010",
      "00000000000000011000",
      "00000000000000011000",
      "00000000000000000100",
      "00000000000000000011"
    ]
  },
  {
    "name": "cross",
    "desc": " (p3)  Found by Robert Wainwright in October 1989.  The members\n   of this family are all {polyomino}es.\n\n",
    "grid": [
      "00111100",
      "00100100",
      "11100111",
      "10000001",
      "10000001",
      "11100111",
      "00100100",
      "00111100"
    ]
  },
  {
    "name": "crowd",
    "desc": " (p3)  Found by Dave Buckingham in January 1973.\n",
    "grid": [
      "00000000000100",
      "00000000011100",
      "00000110100000",
      "00000100010000",
      "00000001101000",
      "00011110001000",
      "10100000101011",
      "11010100000101",
      "00010001111000",
      "00010110000000",
      "00001000100000",
      "00000101100000",
      "00111000000000",
      "00100000000000"
    ]
  },
  {
    "name": "crown",
    "desc": "  The p12 part of the following p12 {oscillator}, where it is\n   {hassle}d by a {caterer}, a {jam} and a {HW emulator}.  This\n   oscillator was found by Noam Elkies in January 1995.\n",
    "grid": [
      "0000000000100000000000",
      "0000000000100000010000",
      "0001000010001000110000",
      "0001100001110000000000",
      "0000000001110011100101",
      "0100111000000000101111",
      "1010100000000000000011",
      "1001000000000000000000",
      "0110000000011000000000",
      "0000001101000010110000",
      "0000001000000000010000",
      "0000000110000001100000",
      "0000111001111110011100",
      "0000100100000000100100",
      "0000011000000000011000"
    ]
  },
  {
    "name": "crucible",
    "desc": "  = {cauldron}\n",
    "grid": []
  },
  {
    "name": "crystal",
    "desc": "  A regular growth that is sometimes formed when a stream of\n   {glider}s, or other {spaceship}s, is fired into some junk.\n     The most common example is initiated by the following collision of\n   a glider with a {block}.  With a glider stream of even {period} at\n   least 82, this gives a crystal which forms a pair of {beehive}s for\n   every 11 gliders which hit it.\n",
    "grid": [
      "01000000",
      "00100011",
      "11100011"
    ]
  },
  {
    "name": "C-to-G",
    "desc": "  = {century-to-glider converter}\n",
    "grid": []
  },
  {
    "name": "cuphook",
    "desc": " (p3)  Found by Rich Schroeppel, October 1970.  This is one of\n   only three essentially different p3 {oscillator}s with only three\n   cells in the {rotor}.  The others are {1-2-3} and {stillater}.\n",
    "grid": [
      "000011000",
      "110101000",
      "110100000",
      "000100000",
      "000100100",
      "000011010",
      "000000010",
      "000000011"
    ]
  },
  {
    "name": "curl",
    "desc": "  = {loop}\n",
    "grid": []
  },
  {
    "name": "dart",
    "desc": " (c/3 orthogonally, p3)  Found by David Bell, May 1992.  A\n   25-glider recipe for the dart was found in December 2014 by Martin\n   Grant and Chris Cain, making it the first glider-constructible c/3\n   spaceship.\n",
    "grid": [
      "000000010000000",
      "000000101000000",
      "000001000100000",
      "000000111000000",
      "000000000000000",
      "000011000110000",
      "001000101000100",
      "011000101000110",
      "100000101000001",
      "010110101011010"
    ]
  },
  {
    "name": "dead spark coil",
    "desc": " (p1)  Compare {spark coil}.\n",
    "grid": [
      "1100011",
      "1010101",
      "0010100",
      "1010101",
      "1100011"
    ]
  },
  {
    "name": "debris",
    "desc": "  = {ash}.\n",
    "grid": []
  },
  {
    "name": "de Bruijn diagram",
    "desc": "  = {de Bruijn graph}\n",
    "grid": []
  },
  {
    "name": "de Bruijn graph",
    "desc": "  As applied to Life, a de Bruijn graph is a graph\n   showing which pieces can be linked to which other pieces to form a\n   valid part of a Life pattern of a particular kind.\n     For example, if we are interested in {still life}s, then we could\n   consider 2x3 rectangular pieces and the de Bruijn graph would show\n   which pairs of these can be overlapped to form 3x3 squares in which\n   the centre cell remains unchanged in the next generation.\n     David Eppstein's {search program} {gfind} is based on de Bruijn\n   graphs.\n",
    "grid": []
  },
  {
    "name": "Deep Cell",
    "desc": "  A pattern by Jared James Prince, based on David Bell's\n   {unit Life cell}, in which each unit cell simulates two Life cells,\n   in such a way that a Life universe filled with Deep Cells simulates\n   two independent Life universes running in parallel.\n     In fact, a Life universe filled with Deep Cells can simulate\n   infinitely many Life universes, as follows.  Let P_1, P_2, P_3, ...\n   be a sequence of Life patterns.  Set the Deep Cells to run a\n   simulation of P_1 in parallel with a simulation of a universe filled\n   with Deep Cells, with these simulated Deep Cells running a simulation\n   of P_2 in parallel with another simulation of a universe filled with\n   Deep Cells, with these doubly simulated Deep Cells simulating P_3 in\n   parallel with yet another universe of Deep Cells, and so on.\n     Deep Cell is available from {http://psychoticdeath.com/life.htm}.\n",
    "grid": []
  },
  {
    "name": "Demonoid",
    "desc": "  The first {self-constructing} diagonal spaceship. A 0{hd}\n   Demonoid was completed by Chris Cain in December 2015, shortly after\n   a much larger 10hd version was constructed the previous month in\n   collaboration with Dave Greene. The 0hd spaceship fits in a bounding\n   box about 55,000 cells square, and displaces itself by 65 cells\n   diagonally every 438,852 generations.\n     The first 0hd Demonoid was fired by a {gun}.  No spaceship gun\n   pattern had previously been completed before the first appearance of\n   the actual spaceship.\n     In June 2017 Dave Greene completed a much simpler {single-channel}\n   Demonoid using a temporary {lossless elbow}, which displaces itself\n   79 cells diagonally every 1,183,842 ticks.  This was an improvement\n   in terms of design complexity, but not in terms of speed, population,\n   or bounding box.  However, all of these could be further optimized.\n   A smaller Hashlife-friendly single-channel Demonoid design was\n   completed in 2018.\n",
    "grid": []
  },
  {
    "name": "demultiplexer",
    "desc": "  A simple {Herschel} {circuit} consisting of three\n   {eater1}s, found by Brice Due in August 2006.  An input Herschel\n   places a boat in a location accessible to an input glider.  If the\n   boat is present, a {one-time} {turner} reaction occurs and the glider\n   is turned 90 degrees onto a new lane.\n",
    "grid": [
      "000000000000000000000000000100000",
      "000000001100000000000000000101000",
      "000000000100000000000000000110000",
      "000000000101000000000000000000000",
      "000000000011000000000000000000000",
      "000000000000000000000001100000000",
      "000000000000000000000001010000000",
      "000000000000000000000000100000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000001100",
      "000000000010000000000000000001010",
      "000000000010100000000000000000010",
      "000000000011100000000000011000011",
      "000000000000100000000000010100000",
      "000000000000000000000000000100000",
      "000000000000000000000000000110000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "001100000000000000000000000000000",
      "010100000000000000000000000000000",
      "010000000000000000000000000000000",
      "110000000000000000000000000000000"
    ]
  },
  {
    "name": "demuxer",
    "desc": "  = {demultiplexer}\n",
    "grid": []
  },
  {
    "name": "density",
    "desc": "  The density of a pattern is the limit of the proportion of\n   live cells in a (2n+1)x(2n+1) square centred on a particular cell as\n   n tends to infinity, when this limit exists.  (Note that it does not\n   make any difference what cell is chosen as the centre cell.  Also\n   note that if the pattern is finite then the density is zero.)  There\n   are other definitions of density, but this one will do here.\n     In 1994 Noam Elkies proved that the maximum density of a stable\n   pattern is 1/2, which had been the conjectured value.  See the paper\n   listed in the bibliography.  Marcus Moore provided a simpler proof in\n   1995, and in fact proves that a {still life} with an m x n\n   {bounding box} has at most (mn+m+n)/2 cells.\n     But what is the maximum average density of an oscillating pattern?\n   The answer is conjectured to be 1/2 again, but this remains unproved.\n   The best upper bound so far obtained is 8/13 (Hartmut Holzwart,\n   September 1992).\n     The maximum possible density for a {phase} of an oscillating\n   pattern is also unknown.  An example with a density of 3/4 is known\n   (see {agar}), but densities arbitrarily close to 1 may perhaps be\n   possible.\n",
    "grid": []
  },
  {
    "name": "dependent conduit",
    "desc": "  A {Herschel conduit} in which the input {Herschel}\n   interacts with catalysts in the first few ticks.  The standard\n   interaction actually starts at T=-3, before the Herschel is\n   completely formed.  Compare {independent conduit}.  The Herschel is\n   prevented from emitting its {first natural glider}.  This is useful\n   in cases where the previous conduit cannot survive a first natural\n   glider emitted from its output Herschel.\n     This term is somewhat confusing, since it is actually the previous\n   conduit that depends on the dependent conduit to suppress the\n   problematic glider.  Dependent conduits such as the {F166} and\n   {Lx200} do not actually depend on anything.  They can be freely\n   connected to any other conduits that fit, as long as the output\n   Herschel evolves from its standard great-grandparent.  As of this\n   writing, the {Fx158} is the only known case where a conduit's output\n   Herschel has an alternate great-grandparent, which is incompatible\n   with dependent conduits' initial transparent block.\n",
    "grid": []
  },
  {
    "name": "destructive read",
    "desc": "  The most common type of test reaction in\n   {memory cell} circuitry.  Information is stored in a memory cell by\n   placing objects in known positions, or by changing the state of a\n   stable or periodic {toggle circuit}.  A destructive-read test\n   consists of sending one or more {signal}s to the memory cell.  A\n   distinct output signal is produced for each possible state of the\n   memory cell, which is reset to a known \"zero\" or \"rest\" state.  See\n   for example {boat-bit}, {keeper}, and {demultiplexer}.\n     To permanently store information in a destructive-read memory cell,\n   the output signal(s) must be used, in part, to send appropriate\n   signals back to the memory cell to restore its state to its previous\n   value.  With output looped back to input, this larger composite\n   circuit then effectively becomes a {non-destructive read} memory\n   cell.\n",
    "grid": []
  },
  {
    "name": "destructor arm",
    "desc": "  A dedicated {construction arm} in the {Gemini}\n   spaceship, used only for removing previously active {circuit}ry once\n   it is no longer needed.  More generally, any circuitry in a\n   self-constructing pattern dedicated exclusively to cleanup.\n",
    "grid": []
  },
  {
    "name": "D-heptomino",
    "desc": "  = {Herschel}\n",
    "grid": []
  },
  {
    "name": "diamond",
    "desc": "  = {tub}\n",
    "grid": []
  },
  {
    "name": "diamond ring",
    "desc": " (p3)  Found by Dave Buckingham in 1972.\n",
    "grid": [
      "0000001000000",
      "0000010100000",
      "0000101010000",
      "0000100010000",
      "0011001001100",
      "0100001000010",
      "1010110110101",
      "0100001000010",
      "0011001001100",
      "0000100010000",
      "0000101010000",
      "0000010100000",
      "0000001000000"
    ]
  },
  {
    "name": "diehard",
    "desc": "  Any pattern that vanishes, but only after a long time.  The\n   following example vanishes in 130 generations, which is probably the\n   limit for patterns of 7 or fewer cells.  Note that there is no limit\n   for higher numbers of cells.  E.g., for 8 cells we could have a\n   glider heading towards an arbitrarily distant blinker.\n",
    "grid": [
      "00000010",
      "11000000",
      "01000111"
    ]
  },
  {
    "name": "dinner table",
    "desc": " (p12)  Found by Robert Wainwright in 1972.\n",
    "grid": [
      "0100000000000",
      "0111000000011",
      "0000100000010",
      "0001100001010",
      "0000000001100",
      "0000000000000",
      "0000011100000",
      "0000011100000",
      "0011000000000",
      "0101000011000",
      "0100000010000",
      "1100000001110",
      "0000000000010"
    ]
  },
  {
    "name": "dirty",
    "desc": "  Opposite of {clean}.  A reaction which produces a large amount\n   of complicated junk which is difficult to control or use is said to\n   be dirty.  Many basic {puffer engine}s are dirty and need to be\n   {tame}d by accompanying {spaceship}s in order to produce clean\n   output.  Similarly, a dirty {conduit} is one that does not recover\n   perfectly after the passage of a {signal}; one or more extra {ash}\n   objects are left behind (or more rarely a {catalyst} is damaged) and\n   additional signals must be used to clean up the circuit before it can\n   be re-used.\n",
    "grid": []
  },
  {
    "name": "diuresis",
    "desc": " (p90)  Found by David Eppstein in October 1998.  His original\n   stabilization used {pentadecathlon}s.  The stabilization with\n   complicated {still life}s shown here (in two slightly different\n   forms) was found by Dean Hickerson the following day.  The name is\n   due to Bill Gosper (see {kidney}).\n",
    "grid": [
      "00000110000000000000000110000",
      "00000010000000000000000100000",
      "00000010100000000000010100000",
      "00000001100000000000011000000",
      "00000000000000000000000000000",
      "00001100000000000000000011000",
      "00001010000000000110000101000",
      "00000100000000001010000010000",
      "00100000000000001100000000010",
      "00111111000000001000001111110",
      "00000001000000000000001000000",
      "00001100000000000000000011000",
      "00001000000000000000000001000",
      "00000100000000000000000010000",
      "00111001000000000000001001110",
      "00100111000000001000001110001",
      "00010000000000001100000001110",
      "00001100000000001010000010000",
      "00000010000000000110000100110",
      "00001100000000000000000011010",
      "01001000000000000000000001000",
      "10101001100000000000011001000",
      "01001010100000000000010101100",
      "00001010000000000000000100100",
      "00000110000000000000000110000"
    ]
  },
  {
    "name": "dock",
    "desc": "  The following {induction coil}.\n",
    "grid": [
      "011110",
      "100001",
      "110011"
    ]
  },
  {
    "name": "domino",
    "desc": "  The 2-cell {polyomino}.  A number of objects, such as the\n   {HWSS} and {pentadecathlon}, produce domino {spark}s.\n",
    "grid": []
  },
  {
    "name": "dormant",
    "desc": "  An object that is either stable or oscillates without\n   producing any output, until it is {trigger}ed by an appropriate\n   signal, which then produces some desired action.  For example,\n   {freeze-dried} objects are dormant until the arrival of a particular\n   glider.\n",
    "grid": []
  },
  {
    "name": "do-see-do",
    "desc": "  The following reaction, found by David Bell in 1996, in\n   which two {glider}s appear to circle around each other as they are\n   reflected 90 degrees by a {twin bees shuttle}.  Four copies of the\n   reaction can be used to create a p92 glider loop which repeats the\n   do-see-do reaction forever.\n",
    "grid": [
      "00000000000000000000000000000000000000000000000000000101",
      "00000000000000000000000000000000000000000000000000000110",
      "00000000000000000000000000000000000000000000000000000010",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000011000000",
      "00000000000000000000000000000000000000000000000010000000",
      "00000000000000000000000000000000000000000000001010000000",
      "00000000000000000000000000000000000000000000001100000000",
      "00000000000000000000000000000010100000000000000000000000",
      "00000000000000000000000000000011000000000000000000000000",
      "00000000000000000000000000000001000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000111000000000000000000000000000000",
      "11000000001110000000011010110000000000000000000000000000",
      "11000000001000100000100000110000000000000000000000000000",
      "00000000001000010000011010110000000000000000000000000000",
      "00000000000100010000000111000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000100010000000000000000000000000000000000000000",
      "00000000001000010000000000000000000000000000000000000000",
      "11000000001000100000000000011000000000000000000000000000",
      "11000000001110000000000000011000000000000000000000000000"
    ]
  },
  {
    "name": "double-barrelled",
    "desc": "  Of a {gun}, emitting two streams of {spaceship}s (or\n   {rake}s) every period.  For examples, see {B-52 bomber},\n   {Simkin glider gun}, and {p246 gun}.  In most cases, the two streams\n   are alternately emitted 1/2 period apart.  It is also possible for\n   the two streams to be emitted simultaneously, as in this\n   double-barrelled glider gun by Bill Gosper:\n",
    "grid": [
      "00000000000000000100000000000000000000000000000000",
      "00000000000000000110000000000000000000000000000000",
      "00000000000000000011000000000000000000000000000000",
      "00000000000000000110000000000000000000000000000000",
      "00000000000000000000000000000000100000000000000000",
      "00000000000000000000000000000001100000000000000011",
      "00000000000000000000000000000011000000000000000011",
      "00000000000000000110000000000001100000000000000000",
      "11000000000000000011000000000000000000000000000000",
      "11000000000000000110000000000000000000000000000000",
      "00000000000000000100000000000000000000000000000000",
      "00000000000000000000000000000001100000000000000000",
      "00000000000000000000000000000011000000000000000000",
      "00000000000000000000000000000001100000000000000000",
      "00000000000000000000000000000000100000000000000000"
    ]
  },
  {
    "name": "double block reaction",
    "desc": "  A certain reaction that can be used to\n   stabilize the {twin bees shuttle} (qv).  This was discovered by David\n   Bell in October 1996.\n     The same reaction sometimes works in other situations, as shown in\n   the following diagram where a pair of blocks eats an {R-pentomino}\n   and a {LWSS}.  (The LWSS version was known at least as early 1994,\n   when Paul Callahan saw it form spontaneously as a result of firing an\n   LWSS stream at some random junk.)\n",
    "grid": [
      "0111100000110000",
      "1000100000011011",
      "0000100000010011",
      "1001000000000000",
      "0000000000000000",
      "0000000000000110",
      "0000000000000110"
    ]
  },
  {
    "name": "double caterer",
    "desc": " (p3)  Found by Dean Hickerson, October 1989.  Compare\n   {caterer} and {triple caterer}.\n",
    "grid": [
      "0000011000100000000",
      "0000100100111000000",
      "0000110100000100000",
      "0000001011110100000",
      "0011101010001011000",
      "0100100100010010100",
      "1010010001011000010",
      "0100000000001101110",
      "0011011011000100000",
      "0001000100000101110",
      "0001000100000011001",
      "0000000000000000011"
    ]
  },
  {
    "name": "double ewe",
    "desc": " (p3)  Found by Robert Wainwright before September 1971.\n",
    "grid": [
      "00000011000000000000",
      "00000001000000000000",
      "00000010000000000000",
      "00000011000000000000",
      "00000000011000000000",
      "00000011101000000000",
      "10110100000000000000",
      "11010100000000000000",
      "00000100010000000000",
      "00001000110000110000",
      "00001100001100010000",
      "00000000001000100000",
      "00000000000000101011",
      "00000000000000101101",
      "00000000010111000000",
      "00000000011000000000",
      "00000000000011000000",
      "00000000000001000000",
      "00000000000010000000",
      "00000000000011000000"
    ]
  },
  {
    "name": "double wing",
    "desc": "  = {moose antlers}.  This term is no longer in use.\n",
    "grid": []
  },
  {
    "name": "dove",
    "desc": "  The following {induction coil}, found in 2015 to be a possible\n   active reaction for the input or output of a {converter}.\n",
    "grid": [
      "01100",
      "10010",
      "01001",
      "00111"
    ]
  },
  {
    "name": "down boat with tail",
    "desc": "  = {cis-boat with tail}\n",
    "grid": []
  },
  {
    "name": "dr",
    "desc": "  Short identifier for Dean Hickerson's 'drifter' search program,\n   used at various times to find {wire}s, {eater}s, higher-period\n   {billiard table configuration}s, and related {signal}-carrying and\n   signal-processing mechanisms.  See also {drifter}.\n",
    "grid": []
  },
  {
    "name": "dragon",
    "desc": " (c/6 orthogonally, p6)  This {spaceship}, discovered by Paul\n   Tooke in April 2000, was the first known {c/6 spaceship}.  With 102\n   cells, it was the smallest known orthogonal c/6 spaceship until\n   Hartmut Holzwart discovered {56P6H1V0} in April 2009.\n",
    "grid": [
      "000000000000010011000000100111",
      "000001000111101111110000100111",
      "011111000010000100001110000000",
      "100000011010000001101110010111",
      "011111011100000000111100010111",
      "000001001000000000000001000000",
      "000000001100000000001101100000",
      "000000001100000000001101100000",
      "000001001000000000000001000000",
      "011111011100000000111100010111",
      "100000011010000001101110010111",
      "011111000010000100001110000000",
      "000001000111101111110000100111",
      "000000000000010011000000100111"
    ]
  },
  {
    "name": "drain trap",
    "desc": "  = {paperclip}.  This term is no longer in use.\n",
    "grid": []
  },
  {
    "name": "D read",
    "desc": "  = {destructive read}\n",
    "grid": []
  },
  {
    "name": "dried",
    "desc": "  = {freeze-dried}.\n",
    "grid": []
  },
  {
    "name": "drifter",
    "desc": "  A perturbation moving within a stable pattern.  Dean\n   Hickerson has written a {search program} to search for drifters, with\n   the hope of finding one which could be moved around a track.  Because\n   drifters can be very small, they could be packed more tightly than\n   {Herschel}s, and so allow the creation of {oscillator}s of periods\n   not yet attained, and possibly prove that Life is {omniperiodic}.\n   Hickerson has found a number of components towards this end, but it\n   has proved difficult to change the direction of movement of a\n   drifter, and so far no complete track has been found.  However,\n   Hickerson has had success using the same program to find {eater}s\n   with novel properties, such as {sparking eater}s and the ones shown\n   in {diuresis}.\n",
    "grid": []
  },
  {
    "name": "dual 1-2-3-4",
    "desc": "  = {Achim's p4}\n",
    "grid": []
  },
  {
    "name": "duoplet",
    "desc": "  A diagonal two-bit spark produced by many oscillators and\n   eater reactions.  Among other uses, it can reflect gliders 90\n   degrees.  The following pattern shows an {eater5} eating gliders and\n   producing duoplets which are then used to reflect a separate glider\n   stream.  If only one glider is present, the eater5 successfully\n   absorbs it, so this mechanism may be considered to be a simple AND\n   gate.\n",
    "grid": [
      "00100000000000000000000",
      "10100000000000000000000",
      "01100000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000001000000000000000",
      "00000101000000000000000",
      "00000011000000000000000",
      "00000000000000000000010",
      "00000000000000000000100",
      "00000000000000000000111",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000001000000",
      "00000000000000010000000",
      "00000000000000011100000",
      "00000000000000000000000",
      "00000000000000000000110",
      "00000000000000001000110",
      "00000000000000010100000",
      "00000000000000101000000",
      "00000000000000100000000",
      "00000000000001100000000"
    ]
  },
  {
    "name": "dying spark",
    "desc": "  See {spark}.  A spark by definition dies out completely\n   after some number of ticks.\n",
    "grid": []
  },
  {
    "name": "early universe",
    "desc": "  Conway's somewhat confusing term for {sparse Life}.\n",
    "grid": []
  },
  {
    "name": "eater",
    "desc": "  Any {still life} that has the ability to interact with certain\n   patterns without suffering any permanent damage.  (If it doesn't\n   suffer even temporary damage then it may be referred to as a {rock}.)\n   The {eater1} is a very common eater, and the term \"eater\" is often\n   used specifically for this object.  Other eaters include {eater2},\n   {eater3}, {eater4}, and {eater5}, and many hundreds of others are\n   known.  Below is a complex eater found by Dean Hickerson in 1998\n   using his {dr} {search program}.  It takes 25 {tick}s to recover\n   after feasting on a glider:\n",
    "grid": [
      "010000000000000",
      "001000000000000",
      "111000000000000",
      "000000110110100",
      "000000010101100",
      "000000010100000",
      "000000001100000",
      "110000000000000",
      "100101100000000",
      "001101000000000",
      "000101000001101",
      "001001110001011",
      "000110001000000",
      "000001111000000",
      "000001000000000",
      "000101011000000",
      "000110010000000",
      "000000010100000",
      "000000001100000"
    ]
  },
  {
    "name": "eater1",
    "desc": " (p1)  Usually simply called an {eater}, and also called a\n   fishhook.\n",
    "grid": [
      "1100",
      "1000",
      "0111",
      "0001"
    ]
  },
  {
    "name": "eater2",
    "desc": " (p1)  This {eater} was found by Dave Buckingham in the 1970s.\n   Mostly it works like the ordinary {eater1} but with two slight\n   differences that make it useful despite its size: it takes longer to\n   recover from each bite, and it can eat objects appearing at two\n   different positions.\n",
    "grid": [
      "1101000",
      "1101110",
      "0000001",
      "1101110",
      "0101000",
      "0101000",
      "0010000"
    ]
  },
  {
    "name": "eater3",
    "desc": " (p1)  This large symmetric {eater}, found by Dave Buckingham,\n   has a very different eating action from the {eater1} and {eater2}.\n   The {loaf} can take bites out things, being flipped over in the\n   process.  The rest of the object merely flips it back again.\n",
    "grid": [
      "000000000110",
      "000011001001",
      "010010000101",
      "101010000010",
      "010010110000",
      "000010010000",
      "000001000010",
      "000000111110",
      "000000000000",
      "000000001000",
      "000000010100",
      "000000001000"
    ]
  },
  {
    "name": "eater4",
    "desc": " (p1)  Another {eater} by Dave Buckingham, which he found in\n   1971, but did not recognize as an eater until 1975 or 1976.  It can't\n   eat {glider}s, but it can be used for various other purposes. The\n   four NE-most centre cells regrow in a few generations after being\n   destroyed by taking a bite out of something, such as suppressing half\n   of a developing {traffic light} as it does in the\n   {p29 pentadecathlon hassler}.\n",
    "grid": [
      "00011000000000",
      "00010000000000",
      "11010000000000",
      "10011000000000",
      "01100001000000",
      "00011111000000",
      "00010000110000",
      "00001100100000",
      "00000010100000",
      "00000010101001",
      "00000001101111",
      "00000000010000",
      "00000000010100",
      "00000000001100"
    ]
  },
  {
    "name": "eater5",
    "desc": " (p1)  A compound {eater} that can eat {glider}s coming from two\n   different directions. Also called the tub-with-tail eater (TWIT), it\n   is often placed along the edges of glider {lane}s to suppress\n   unwanted gliders in {conduit}s. Below is the standard form, a compact\n   form with a {long hook}, and an often-useful conjoined form found\n   with {Bellman}.  The {sidesnagger} is a Spartan constellation that\n   has a similar glider-absorbing function, using a {loaf}.  See also\n   {7x9 eater}.\n",
    "grid": [
      "010000000001000000000100000000000",
      "001000000000100000000010000000000",
      "111000000011100000001110000000000",
      "000000000000000000000000000000000",
      "000000100000000010000000001000000",
      "000001000000000100000000010000000",
      "000001110000000111000000011100000",
      "000000000000000000000000000000000",
      "000000000011000000000000000000000",
      "000000100011000010001100001000110",
      "000001010000000101000100010100010",
      "000010100000001010001000011000100",
      "000010000000001000010000000001000",
      "000110000000011000001110011111010",
      "000000000000000000000010010000101",
      "000000000000000000000000000100101",
      "000000000000000000000000001100010"
    ]
  },
  {
    "name": "eater/block frob",
    "desc": " (p4)  Found by Dave Buckingham in 1976 or earlier.\n",
    "grid": [
      "0110000000",
      "0010000000",
      "0010100000",
      "0001010000",
      "0000011011",
      "0000000011",
      "0011000000",
      "0001000000",
      "1110000000",
      "1000000000"
    ]
  },
  {
    "name": "eater-bound pond",
    "desc": "  = {biting off more than they can chew}\n",
    "grid": []
  },
  {
    "name": "eater-bound Z-hexomino",
    "desc": "  = {pentoad}\n",
    "grid": []
  },
  {
    "name": "eater eating eater",
    "desc": "  = {two eaters}\n",
    "grid": []
  },
  {
    "name": "eater plug",
    "desc": " (p2)  Found by Robert Wainwright, February 1973.\n",
    "grid": [
      "00000001",
      "00000111",
      "00001000",
      "00000100",
      "00100100",
      "01011000",
      "01000000",
      "11000000"
    ]
  },
  {
    "name": "eaters plus",
    "desc": "  = {French kiss}\n",
    "grid": []
  },
  {
    "name": "ecologist",
    "desc": " (c/2 orthogonally, p20)  This consists of the classic\n   {puffer train} with a {LWSS} added to suppress the debris.  See also\n   {space rake}.\n",
    "grid": [
      "1111000001100000000",
      "1000100011011000000",
      "1000000001111000000",
      "0100100000110000000",
      "0000000000000000000",
      "0000010000000001100",
      "0001110000000011111",
      "0010001000001000011",
      "0010000111110000011",
      "0011010111100001100",
      "0000100011011100000",
      "0000010100000000000",
      "0000000000000000000",
      "0000000000000000000",
      "1111000000000000000",
      "1000100000000000000",
      "1000000000000000000",
      "0100100000000000000"
    ]
  },
  {
    "name": "edge-repair spaceship",
    "desc": "  A {spaceship} which has an edge that possesses\n   no {spark} and yet is able to {perturb} things because of its ability\n   to repair certain types of damage to itself.  The most useful\n   examples are the following two small p3 {c/3 spaceship}s:\n",
    "grid": [
      "0000000000000000000000000000000000100000",
      "0000000010000000000000000000000011101110",
      "0000000111100000000000000000000110000001",
      "0010001000110110000000000010001001000110",
      "0111100000100110000000000111100000000000",
      "1000100000001001000000001000100000000000",
      "0101001000000000000000000101001000000000",
      "0000010000000000000000000000010000000000"
    ]
  },
  {
    "name": "edge shooter",
    "desc": "  A {gun} or {signal} {circuit} that fires its gliders (or\n   whatever) right at the edge of the pattern, so that it can be used to\n   fire them closely parallel to others.  This is useful for\n   constructing complex guns.  Compare {glider pusher}, which can in\n   fact be used for making edge shooters.\n     The following diagram shows a p46 edge shooter found by Paul\n   Callahan in June 1994.\n",
    "grid": [
      "110000000000001100100001100110000000000000",
      "110000000000001011000000110110000000000000",
      "000000000000000100000010100000000000000000",
      "000000000000000111000011000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000111000011000000000000000000",
      "000000000000000100000010100000000000000000",
      "110000000000001011000000110000000000000000",
      "110000000000001100100001100000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000011100011100",
      "000000000000000000000000000000100010100010",
      "000000000000000000000000000001000110110001",
      "000000000000000000000000000001011000001101",
      "000000000000000000000000000000010000000100",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000011000001100",
      "000000000000000000000000000000011000001100"
    ]
  },
  {
    "name": "edge spark",
    "desc": "  A {spark} at the side of a {spaceship} that can be used to\n   {perturb} things as the spaceship passes by.\n",
    "grid": []
  },
  {
    "name": "edge sparker",
    "desc": "  A {spaceship} that produces one or more {edge spark}s.\n",
    "grid": []
  },
  {
    "name": "edgy",
    "desc": "  In {slow salvo} terminology, an edgy glider construction recipe\n   is one that places its final product at or very near the edge of its\n   {construction envelope}.  Similarly, an edgy {factory} will place its\n   output object in an accessible location near the edge of its\n   {reaction envelope}.\n",
    "grid": []
  },
  {
    "name": "egg",
    "desc": "  = {non-spark}.  This term is no longer in use.\n",
    "grid": []
  },
  {
    "name": "E-heptomino",
    "desc": "  Name given by Conway to the following {heptomino}.\n",
    "grid": [
      "0111",
      "1100",
      "0110"
    ]
  },
  {
    "name": "elbow",
    "desc": "  Depending on context, this term may refer to a {signal elbow}\n   or a {construction elbow}.  See also {elbow ladder}.\n",
    "grid": []
  },
  {
    "name": "elbow ladder",
    "desc": "  Scot Ellison's name for the type of pattern he created\n   in which one or more {glider}s shuttle back and forth (using the\n   {kickback reaction}) deleting the output gliders from a pair of\n   {slide gun}s.\n",
    "grid": []
  },
  {
    "name": "elbow operation",
    "desc": "  A recipe, usually a {salvo} of {glider}s travelling\n   on one or more {construction lane}s, that collides with an {elbow}\n   {constellation} and performs one of the standard transformations on\n   it:  {push}, {pull}, or {fire} for simple construction arms, along\n   with possible construct, duplicate-elbow, or delete-elbow ops for\n   more complicated systems.  See {construction elbow}.\n",
    "grid": []
  },
  {
    "name": "electric fence",
    "desc": " (p5)  A stabilization of {ants}.  Dean Hickerson,\n   February 1993.\n",
    "grid": [
      "0000000000100000000000000000000000000000000000000000000000000",
      "0000000001010000000000000000000000001100000000000000000000000",
      "0010000111010000010000000000000000000100010010000001000001100",
      "0101001000011000101000000000000000000101110011100010100001000",
      "0101001011000000010000000000000000000010001100010100100000010",
      "1101101010111110000010000000000000000001100010010101101100110",
      "0101001000100100100000001100011000110000110110010100101010000",
      "0100110000110000001110110001100011000111000001111011101000110",
      "0010011100100101111000110001100011000111011001000010100001001",
      "0001100010100100000110001100011000110000001000000000000100011",
      "0000011010110101100100000000000000000000001000000001101000000",
      "0000010110100101100001000000000000000001101010000000000000000",
      "0000000000011000000011000000000000000000100110000000000000000",
      "0000000000000000000000000000000000000010100000000000000000000",
      "0000000000000000000000000000000000000011000000000000000000000"
    ]
  },
  {
    "name": "elementary",
    "desc": "  Not reducible to a combination of smaller parts.\n   Elementary {spaceship}s in particular are usually those found by\n   search programs, and they can't be subdivided into smaller\n   spaceships, tagalongs, and supporting reactions, as contrasted with\n   engineered {macro-spaceship}s.\n",
    "grid": []
  },
  {
    "name": "elementary conduit",
    "desc": "  A {conduit} with no recognizable active signal\n   stage besides its input and output.  An early example still very\n   commonly used is Buckingham's {BFx59H}, which transforms a\n   {B-heptomino} into an inverted {Herschel} in 59 ticks.  The BFx59H\n   elementary conduit is a component in many of the original {universal}\n   {toolkit} of Herschel conduits.  An extension of the same naming\n   convention is used for elementary conduits, with the first and last\n   letters of the name specifying the input and output {signal} objects.\n   As with Herschels, an arbitrary orientation and center point is\n   chosen for each object.  \"Fx\" means the signal moves forward and\n   produces a mirror-image output.  See {Herschel conduit} for further\n   details.\n     Theoretically an elementary conduit may become a composite conduit,\n   if another conduit can be found that shares the beginning or end of\n   the conduit in question.  In practice this happens only rarely,\n   because many of the most likely branch points have already been\n   identified: {glider} (G), {LWSS} (L) or {MWSS} (M), {Herschel} (H),\n   {B-heptomino} (B), {R-pentomino} (R), {pi-heptomino} (P),\n   {queen bee shuttle} (Q), {century} or {bookend} (C), {dove} (D), and\n   {wing} (W).  A {Herschel descendant} might qualify, due to the\n   elementary conduit that can be seen in the {p184 gun}.  However,\n   there are very few simple conduits that produce Herschel descendants\n   without Herschels, so in practice this is not a useful branch point.\n",
    "grid": []
  },
  {
    "name": "elevener",
    "desc": " (p1)\n",
    "grid": [
      "110000",
      "101000",
      "001000",
      "001110",
      "000001",
      "000011"
    ]
  },
  {
    "name": "Elkies' p5",
    "desc": " (p5)  Found by Noam Elkies in 1997.\n",
    "grid": [
      "010000000",
      "100111000",
      "001000000",
      "000101001",
      "001101111",
      "000010000",
      "000010100",
      "000001100"
    ]
  },
  {
    "name": "emu",
    "desc": "  Dave Buckingham's term for a {Herschel loop} that does not emit\n   {glider}s (and so is \"flightless\").  All known Herschel loops of\n   periods 52, 57, 58, 59 and 61 are emus.  See also {Quetzal}.\n",
    "grid": []
  },
  {
    "name": "emulator",
    "desc": "  Any one of three p4 oscillators that produce {spark}s\n   similar to those produced by {LWSS}, {MWSS} and {HWSS}.  See\n   {LW emulator}, {MW emulator} and {HW emulator}.  Larger emulators are\n   also possible, but they require stabilizing objects to suppress their\n   {non-spark}s and so are of little use.  The emulators were discovered\n   by Robert Wainwright in June 1980.\n",
    "grid": []
  },
  {
    "name": "engine",
    "desc": "  The active portion of an object (usually a {puffer} or {gun})\n   which is considered to actually produce its output, and which\n   generally permits no variation in how it works.  The other parts of\n   the object are just there to support the engine.  For examples, see\n   {puffer train}, {Schick engine}, {blinker puffer}, {frothing puffer}\n   and {line puffer}.\n",
    "grid": []
  },
  {
    "name": "engineless",
    "desc": "  A {rake} or {puffer} which does not contain a specific\n   {engine} for its operation.  Instead it depends on perturbations of\n   gliders or other objects by passing spaceships.  The period of such\n   objects is often adjustable, and in some cases the speed as well.  An\n   early example was the creation of c/5 rakes in September 1997, using\n   gliders circulating among a convoy of c/5 spaceships.  More recently,\n   the passing spaceships themselves are also constructed, as in the\n   {Caterloopillar}.\n",
    "grid": []
  },
  {
    "name": "en retard",
    "desc": " (p3)  Found by Dave Buckingham, August 1972.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "11010101011",
      "01010001010",
      "10010101001",
      "01100000110",
      "00011011000",
      "00010101000",
      "00001010000",
      "00101010100",
      "00110001100"
    ]
  },
  {
    "name": "Enterprise",
    "desc": " (c/4 diagonally, p4)  Found by Dean Hickerson, March 1993.\n",
    "grid": [
      "000000011100000000000",
      "000001011000000000000",
      "000011110000000000000",
      "000110000010000000000",
      "001110010101000000000",
      "011000101001000000000",
      "010101111100000000000",
      "110101000100000000000",
      "100000000110000000000",
      "011001000101000000000",
      "000011001011000000100",
      "000000000001100000111",
      "000000000000100111001",
      "000000000000100100110",
      "000000000000010110000",
      "000000000000110000000",
      "000000000000110000000",
      "000000000001000000000",
      "000000000000101000000",
      "000000000001001000000",
      "000000000000010000000"
    ]
  },
  {
    "name": "envelope",
    "desc": "  See {construction envelope}, {reaction envelope}.\n",
    "grid": []
  },
  {
    "name": "Eureka",
    "desc": " (p30)   A {pre-pulsar} {shuttle} found by Dave Buckingham in\n   August 1980.  A variant is obtained by shifting the top half two\n   spaces to either side.\n",
    "grid": [
      "010000000000000010",
      "101000010000000101",
      "010001101100000010",
      "000000010000000000",
      "000000000000000000",
      "000000000000000000",
      "000000000000000000",
      "000000010000000000",
      "010001101100000010",
      "101000010000000101",
      "010000000000000010"
    ]
  },
  {
    "name": "evolution",
    "desc": "  The process or result of running one or more generations of\n   an object.  For example, a row of 10 cells evolves into a\n   {pentadecathlon}.\n",
    "grid": []
  },
  {
    "name": "evolutionary factor",
    "desc": "  For an unstable pattern, the time to\n   stabilization divided by the initial {population}.  For example, the\n   {R-pentomino} has an evolutionary factor of 220.6, while {bunnies}\n   has an evolutionary factor of 1925.777...  The term is no longer in\n   use.\n",
    "grid": []
  },
  {
    "name": "exhaust",
    "desc": "  The debris or {smoke} left behind by a {puffer}, especially\n   if the debris is {dirty} and takes many {generation}s to settle.  The\n   term is not usually used for the objects created by {clean} puffers.\n",
    "grid": []
  },
  {
    "name": "exponential filter",
    "desc": "  A {toolkit} developed by Gabriel Nivasch in 2006,\n   enabling the construction of patterns with asymptotic population\n   growth matching O((log log ... log(t))) for any number of nested log\n   operations.  See also {quadratic filter}, {recursive filter}.\n",
    "grid": []
  },
  {
    "name": "exposure",
    "desc": "  = {underpopulation}\n",
    "grid": []
  },
  {
    "name": "extensible",
    "desc": "  A pattern is said to be extensible if arbitrarily large\n   patterns of the same type can be made by repeating parts of the\n   original pattern in a regular way.  For examples, see {p6 shuttle},\n   {pentoad}, {pufferfish spaceship}, {snacker}, {wavestretcher},\n   {wicktrailer} and {branching spaceship}.\n",
    "grid": []
  },
  {
    "name": "extra extra long",
    "desc": "  = {long^4}\n",
    "grid": []
  },
  {
    "name": "extra long",
    "desc": "  = {long^3}\n",
    "grid": []
  },
  {
    "name": "extremely impressive",
    "desc": " (p6)  Found by Dave Buckingham, August 1976.\n",
    "grid": [
      "000011000000",
      "000101110000",
      "000100001000",
      "110100011000",
      "110100000110",
      "000011111001",
      "000000000011",
      "000000100000",
      "000001010000",
      "000000100000"
    ]
  },
  {
    "name": "extruder",
    "desc": "  See {traffic lights extruder}.  A {single-channel}\n   constructor arm has also been programmed to extrude a growing {wick}\n   consisting of a chain of {Snark}s, again working from the stationary\n   {fencepost} end of the wick with no need for a {wickstretcher}\n   component.\n",
    "grid": []
  },
  {
    "name": "F116",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in February 1997.\n   After 116 ticks, it produces a {Herschel} at (32, 1) relative to the\n   input.  Its {recovery time} is 138 ticks; this can be reduced to 120\n   ticks by adding extra mechanisms to suppress the internal glider.  It\n   is {Spartan} only if the following conduit is a {dependent conduit},\n   so that the {weld}ed {FNG} eater can be removed.  A {ghost Herschel}\n   in the pattern below marks the output location:\n",
    "grid": [
      "00000000100000000000000000000000000",
      "00000000111000000000000000000000000",
      "00000000000100000000000000000000000",
      "00000000001100000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "10000000000000000000000000000000000",
      "10100000000000000000000000000000100",
      "11100000000000000000000000000000100",
      "00100000000000000000000000000000111",
      "00000000000000000000000000000000001",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000001100000000",
      "00000000000000000001100000100000000",
      "00000000000000000001010111000000000",
      "00000000000011000000010100000000000",
      "00000000000011000000011000000000000"
    ]
  },
  {
    "name": "F117",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in July 1996.  It\n   is made up of two {elementary conduit}s, {HFx58B} + {BFx59H}.  After\n   117 ticks, it produces a {Herschel} at (40, -6) relative to the\n   input.  Its {recovery time} is 63 ticks.  It can be made {Spartan} by\n   replacing the {snake} with an {eater1} in one of two orientations.  A\n   {ghost Herschel} in the pattern below marks the output location:\n",
    "grid": [
      "000000000000000000000011000000000000000000000",
      "000000000000000000000001000000000000000000000",
      "000000000010000000000010000000000000000000000",
      "000000000011100000000011000000000000000000000",
      "000000000000010000000000000000000000000000000",
      "110000000000110000000000000000000000000000000",
      "010000000000000000000000000000000000000000000",
      "010100000000000000000000000000000000000000000",
      "001100000000000000000000000000000000000000000",
      "000000000000000000000000011000000000000000100",
      "000000000000000000000000011000000000000000100",
      "000000000000000000000000000000000000000000111",
      "000000000000000000000000000000000000000000001",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "001000000000000000000000000000000000000000000",
      "001010000000000000000000000000000000000000000",
      "001110000000000000000000000000000000000000000",
      "000010000000000011000000000000000000000000000",
      "000000000000000010000000000000000000000000000",
      "000000000000000001110000000000000000000000000",
      "000000000000000000010000000000000000000000000"
    ]
  },
  {
    "name": "F166",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in May 1997.  It is\n   composed of two {elementary conduit}s, HFx107B + {BFx59H}.  The F166\n   and {Lx200} conduits are the two original {dependent conduit}s\n   (several more have since been discovered).  After 166 ticks, it\n   produces a {Herschel} at (49, 3) relative to the input.  Its\n   {recovery time} is 116 ticks.  A {ghost Herschel} in the pattern\n   below marks the output location:\n",
    "grid": [
      "00000000000000000000000000000000011000000000000000000000",
      "00000000000000000000000000000000001000000000000000000000",
      "00000000000000000000000000000000010000000000000000000000",
      "00000000000000000000000000000000011000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000000000000000000",
      "11101100000000000000000000000000000000000000000000000000",
      "01101110110000000000000000000000000000000000000000000000",
      "11101100110000000000000000000000000011000000000000000100",
      "11000000000000000000000000000000000011000000000000000100",
      "00000000000000000000000000000000000000000000000000000111",
      "00000000000000000000000000000000000000000000000000000001",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000011000000000000000000000000000000000000000000000000",
      "00000101000000000000000000000000000000000000001100000000",
      "00000100000000000000000000000000000000000000000100000000",
      "00001100000000000000000000000001100000000000111000000000",
      "00000000000000000000000000000001100000000000100000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000110000000000000000000000000000000000000",
      "00000000000000000010000000000000000000000000000000000000",
      "00000000000000011100000000000000000000000000000000000000",
      "00000000000000010000000000000000000000000000000000000000",
      "00000000000000000000000000011000000000000000000000000000",
      "00000000000000000000000000010000000000000000000000000000",
      "00000000000000000000000000001110000000000000000000000000",
      "00000000000000000000000000000010000000000000000000000000"
    ]
  },
  {
    "name": "F171",
    "desc": "  An {elementary conduit}, the seventeenth {Herschel conduit},\n   discovered by Brice Due in August 2006 in a search using only\n   {eater}s as {catalyst}s.  This was the first new Herschel conduit\n   discovery since 1998.  After 171 ticks, it produces a {Herschel} at\n   (29, -17) relative to the input.  A {ghost Herschel} in the pattern\n   below marks the output location:\n",
    "grid": [
      "000000000010000000000000000000000",
      "000000000011100000000000000000000",
      "000000000000010000000000000000000",
      "000000000000110000000000000000000",
      "000001000000000000000000000000000",
      "000001110000000000000000000000000",
      "000000001000000000000000000000000",
      "000000011000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000100",
      "000011000000000000000000000000100",
      "000001000000000000000000000000111",
      "000001010000000000000000000000001",
      "000000110000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "100000000000000000000000000000000",
      "111000000000000000000000000000000",
      "000100000000000000000000000000000",
      "001100000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "010000000000000000000000000000000",
      "010100000000000000000000000000000",
      "011100000000000000000000000000000",
      "000100000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000011000000000000000000000",
      "000000000001000000000000000000000",
      "000000001110000000000000000000000",
      "000000001000000000000000000000000"
    ]
  },
  {
    "name": "factory",
    "desc": "  Another word for {gun}, but not used in the case of glider\n   guns.  The term is also used for a pattern that repeatedly\n   manufactures objects other than {spaceship}s or {rake}s.  In this\n   case the new objects do not move out of the way, and therefore must\n   be used up in some way before the next one is made.  The following\n   shows an example of a p144 gun which consists of a p144 block factory\n   whose output is converted into gliders by a p72 oscillator.\n",
    "grid": [
      "000000000000000000000001100000000000000000000000011",
      "000000000000000000000001100000000000000000000000011",
      "000000000000000000000000000000000000000001100000000",
      "000000000000000000000000000000000000000010010000000",
      "000000000000000000000000000000000000000001100000000",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000111000000000000",
      "000000000000000000000000000000000000101000000000000",
      "000000000110000000000000000000000000111000000000000",
      "000000000110000000000000000000000000110000000000000",
      "000000001001000000000000000000000001110000000000000",
      "000000001001011000000000000000000001010000000000000",
      "000000001000011000000000000000000001110000000000000",
      "000000000011011000000000000000000000000000000000000",
      "000000000000000000000000000000011000000000000000000",
      "000000000000000000000110000000100100000000000000000",
      "000000000000000000000110000000011000000000000000000",
      "000000000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000000000",
      "000011000000000000000000100000000000000000000000000",
      "110000111100000000001100110111000000000000000000000",
      "110011011100000000001100001111000000000000000000000",
      "000010000000000000000000110000000000000000000000000"
    ]
  },
  {
    "name": "familiar fours",
    "desc": "  Common patterns of four identical objects.  The five\n   commonest are {traffic light} (4 blinkers), {honey farm} (4\n   beehives), {blockade} (4 blocks), {fleet} (4 ships, although really 2\n   ship-ties) and {bakery} (4 loaves, although really 2 bi-loaves).\n   Also sometimes included is {four skewed blocks}.\n",
    "grid": []
  },
  {
    "name": "fanout",
    "desc": "  A mechanism that emits two or more objects of some type for\n   each one that it receives.  Typically the objects are {glider}s or\n   {Herschel}s; {glider duplicator}s are a special case.\n",
    "grid": []
  },
  {
    "name": "Fast Forward Force Field",
    "desc": "  The following reaction found by Dieter\n   Leithner in May 1994.  In the absence of the incoming LWSS the\n   gliders would simply annihilate one another, but as shown they allow\n   the LWSS to advance 11 spaces in the course of the next 6\n   generations.\n",
    "grid": [
      "00000001000000100",
      "00000000100000011",
      "00110011100000110",
      "11011000000000000",
      "11110000000001000",
      "01100000000011000",
      "00000000000010100"
    ]
  },
  {
    "name": "fate",
    "desc": "  The result of evolving a pattern until its final behaviour is\n   known.  This answers such questions such as whether or not the\n   pattern remains finite, what its growth rate is, what {period} the\n   final state may settle into, and what its final {census} is.  All\n   small Life objects seem to eventually settle down into a mix of\n   oscillators, simple spaceships, and occasionally small puffers.  See\n   {methuselah}, {soup}, {ash}.\n     Most sufficiently large random patterns are expected to grow\n   forever due to the production of {switch engine}s at their boundary.\n   Engineered Life objects - and therefore also sufficiently large and\n   unlikely random patterns - can have more interesting behaviour, such\n   as {breeder}s, {sawtooth}s, and prime calculators.  Some objects have\n   even been constructed or designed having an {unknown fate}.\n",
    "grid": []
  },
  {
    "name": "father",
    "desc": "  = {parent}\n",
    "grid": []
  },
  {
    "name": "fd",
    "desc": "  Abbreviation for {full diagonal}s.\n",
    "grid": []
  },
  {
    "name": "featherweight spaceship",
    "desc": "  = {glider}\n",
    "grid": []
  },
  {
    "name": "fencepost",
    "desc": "  Any pattern that stabilizes one end of a {wick}.\n",
    "grid": []
  },
  {
    "name": "Fermat prime calculator",
    "desc": "  A pattern constructed by Jason Summers in\n   January 2000 that exhibits {infinite growth} if and only if there are\n   no Fermat primes greater than 65537.  The question of whether or not\n   it really does exhibit infinite growth is therefore equivalent to a\n   well-known and long-standing unsolved mathematical problem. It will,\n   however, still be growing at generation 10^2585827975. The pattern is\n   based on Dean Hickerson's {primer} and {caber tosser} patterns and a\n   p8 {beehive} {puffer} by Hartmut Holzwart.\n",
    "grid": []
  },
  {
    "name": "F-heptomino",
    "desc": "  Name given by Conway to the following {heptomino}.\n",
    "grid": [
      "1100",
      "0100",
      "0100",
      "0111"
    ]
  },
  {
    "name": "figure-8",
    "desc": " (p8)  A {domino} {sparker} found by Simon Norton in 1970.\n",
    "grid": [
      "111000",
      "111000",
      "111000",
      "000111",
      "000111",
      "000111"
    ]
  },
  {
    "name": "filter",
    "desc": "  Any {oscillator} used to delete some but not all of the\n   {spaceship}s in a stream.  An example is the {blocker}, which can be\n   positioned so as to delete every other {glider} in a stream of period\n   8n+4, and can also do the same for {LWSS} streams.  Other examples\n   are the {MW emulator} and {T-nosed p4} (either of which can be used\n   to delete every other LWSS in a stream of period 4n+2), the\n   {fountain} (which does the same for {MWSS} streams) and a number of\n   others, such as the p6 {pipsquirter}, the {pentadecathlon} and the\n   p72 oscillator shown under {factory}.  Another example, a p4\n   oscillator deleting every other HWSS in a stream of period 4n+2, is\n   shown below.  (The p4 oscillator here was found, with a slightly\n   larger {stator}, by Dean Hickerson in November 1994.)\n",
    "grid": [
      "00000000001111000000000000",
      "00001100011111100000000000",
      "11110110011110110000000000",
      "11111100000001100000000000",
      "01111000000000000000000000",
      "00000000000000000000000000",
      "00000000000000001100000000",
      "00000000000000100001000000",
      "00000000000000000000000000",
      "00000000000001010010100000",
      "00000000000111101101111000",
      "00000000101000010010000101",
      "00000000110110100001011011",
      "00000000000101000000101000",
      "00000000110101000000101011",
      "00000000110100000000001011",
      "00000000000101011110101000",
      "00000000000101000000101000",
      "00000000001101011110101100",
      "00000000001001110011100100",
      "00000000000010011110010000",
      "00000000000110100001011000",
      "00000000000100100001001000",
      "00000000000010010010010000",
      "00000000000001100001100000"
    ]
  },
  {
    "name": "filter stream",
    "desc": "  A {stream} of {spaceship}s in which there are periodic\n   gaps in the stream.  This can thin out another crossing stream by\n   deleting the {spaceship}s in the second stream except where the gaps\n   occur.  The filter stream is not affected by the deletions so that\n   the same stream can thin out multiple other streams. The\n   {Caterpillar} uses filter streams of {MWSS}s in which there is a gap\n   every 6 spaceships.  Here is part of a filter stream that thins a\n   glider stream by 2/3:\n",
    "grid": [
      "00000000000000000000000000000000100000000000000000000000000000",
      "00000000000000000000000000000000010000000000000000000000000000",
      "00000000000000000000000000000001110000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000010000000000000000000000",
      "00000000000000000000000000000000000000001000000000000000000000",
      "00000000000000000000000000000000000000111000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000001000000000000000",
      "00000000000000000000000000000000000000000000000100000000000000",
      "00000000000000000000000000000000000000000000011100000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00100000000000001000000000000000000000000000100000000000001000",
      "10001000000000100010000000000000000000000010001000000000100010",
      "00000100000000000001000000000000000000000000000100000000000001",
      "10000100000000100001000000000000000000000010000100000000100001",
      "01111100000000011111000000000000000000000001111100000000011111"
    ]
  },
  {
    "name": "finger",
    "desc": "  A protruding cell in an {oscillator} or {dying spark}, with\n   the ability to modify a nearby active reaction.  Like a {thumb}, a\n   finger cell appears at the edge of a reaction envelope and is the\n   only live cell in its row or column.  The finger spark remains alive\n   for two ticks before dying, whereas a thumb cell dies after one tick.\n   Because the key cell is kept alive for an extra tick, an alternate\n   technical term is \"held (orthogonal) bit spark\".  A \"held diagonal\n   bit spark\" is not possible in B3/S23 for obvious reasons.\n",
    "grid": []
  },
  {
    "name": "fire",
    "desc": "  An encoded signal used in combination with {push} and {pull}\n   {elbow operation}s in a simple {construction arm}.  When a FIRE\n   signal is sent, the construction-arm elbow produces an output glider,\n   usually at 90 degrees from the construction arm.  This terminology is\n   generally used when there is only a single recipe for such a glider\n   output, or only one recipe for each glider colour (e.g., FIRE WHITE,\n   FIRE BLACK).\n",
    "grid": []
  },
  {
    "name": "fireship",
    "desc": " (c/10 orthogonally, p10)  A variant of the {copperhead} with\n   a trailing component that emits several large {spark}s, discovered by\n   Simon Ekstrom on 20 March 2016.  The interaction between the\n   copperhead and the additional component is minimal enough that the\n   extension technically fits the definition of a {tagalong}.  However,\n   the extension slightly modifies two of the {phase}s of the spaceship,\n   starting two ticks after the phase shown below, so it's also valid to\n   classify the fireship as a distinct spaceship.\n",
    "grid": [
      "0000110000",
      "0001111000",
      "0000000000",
      "0011111100",
      "0001111000",
      "0000000000",
      "0011001100",
      "1101001011",
      "0001001000",
      "0000000000",
      "0000000000",
      "0000110000",
      "0000110000",
      "0000000000",
      "0101001010",
      "1001001001",
      "1000000001",
      "1000000001",
      "1100000011",
      "0011111100"
    ]
  },
  {
    "name": "fire-spitting",
    "desc": " (p3)  Found by Nicolay Beluchenko, September 2003.\n",
    "grid": [
      "0001000000",
      "0111000000",
      "1000000000",
      "0101110000",
      "0100000100",
      "0010010000",
      "0010100101",
      "0000000011"
    ]
  },
  {
    "name": "first natural glider",
    "desc": "  The glider produced at T=21 during the\n   {evolution} of a {Herschel}.  This is the most common signal output\n   from a {Herschel conduit}.\n",
    "grid": []
  },
  {
    "name": "fish",
    "desc": "  A generic term for {LWSS}, {MWSS} and {HWSS}, or, more\n   generally, for any {spaceship}.  In recent years {*WSS} is much more\n   commonly used to refer to the small orthogonal c/2 spaceships.\n",
    "grid": []
  },
  {
    "name": "fishhook",
    "desc": "  = {eater1}\n",
    "grid": []
  },
  {
    "name": "fleet",
    "desc": " (p1)  A common formation of two {ship-tie}s.\n",
    "grid": [
      "0000110000",
      "0000101000",
      "0000011000",
      "0000000110",
      "1100000101",
      "1010000011",
      "0110000000",
      "0001100000",
      "0001010000",
      "0000110000"
    ]
  },
  {
    "name": "flip-flop",
    "desc": "  Any p2 {oscillator}.  However, the term is also used in two\n   more specific (and non-equivalent) senses: (a) any p2 oscillator\n   whose two {phase}s are mirror images of one another, and (b) any p2\n   oscillator in which all {rotor} cells die from {underpopulation}.  In\n   the latter sense it contrasts with {on-off}. The term has also been\n   used even more specifically for the 12-cell flip-flop shown under\n   {phoenix}.\n",
    "grid": []
  },
  {
    "name": "flip-flops",
    "desc": "  Another name for the flip-flop shown under {phoenix}.\n",
    "grid": []
  },
  {
    "name": "flipper",
    "desc": "  Any {oscillator} or {spaceship} that forms its mirror image\n   halfway through its period.\n",
    "grid": []
  },
  {
    "name": "flotilla",
    "desc": "  A {spaceship} composed of a number of smaller interacting\n   spaceships.  Often one or more of these is not a true spaceship and\n   could not survive without the support of the others.  The following\n   example shows an {OWSS} escorted by two {HWSS}.\n",
    "grid": [
      "000011110000000",
      "000111111000000",
      "001101111000000",
      "000110000000000",
      "000000000000000",
      "000000000001100",
      "010000000000001",
      "100000000000000",
      "100000000000001",
      "111111111111110",
      "000000000000000",
      "000000000000000",
      "000011110000000",
      "000111111000000",
      "001101111000000",
      "000110000000000"
    ]
  },
  {
    "name": "fly",
    "desc": "  A certain c/3 {tagalong} found by David Bell, April 1992. Shown\n   here attached to the back of a small spaceship (also by Bell).\n",
    "grid": [
      "0010000000000000000000000000000000",
      "0101000000000000000000000000000000",
      "0101000000000000000000000010100010",
      "0100000000000000000000000110101001",
      "0000000000011100000000100000000010",
      "1100000000011001011000100111100000",
      "0101000000000111100101001100001100",
      "0110000000010010001110000011100000",
      "0010000000100001001100110010010000",
      "0001001000100001001110101000011000",
      "0000000101100001001111000001000000",
      "0000110001100001001111000001000000",
      "0000101000100001001110101000011000",
      "0001100000100001001100110010010000",
      "0000101000010010001110000011100000",
      "0000010000000111100101001100001100",
      "0000000000011001011000100111100000",
      "0000000000011100000000100000000010",
      "0000000000000000000000000110101001",
      "0000000000000000000000000010100010"
    ]
  },
  {
    "name": "fly-by deletion",
    "desc": "  A reaction performed by a passing {convoy} of\n   {spaceship}s which deletes a common stationary object without harming\n   the convoy.  Fly-by deletion is often used in the construction of\n   {puffer}s and {spaceship}s to clean up unwanted debris.\n     For c/2 convoys this is not usually difficult since the {LWSS},\n   {MWSS}, and {HWSS} {spaceship}s have such useful {spark}s.  However,\n   some objects are more difficult to delete. For example, deleting a\n   {tub} appears to require an unusual p4 spaceship.\n",
    "grid": [
      "000000000000000000000001000000000",
      "000000000000000000000010100000000",
      "000000000000000000000001000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000011100000000000000",
      "111000000000000010010000000000000",
      "100100001110000010000000000011100",
      "100000001001000010001000000010010",
      "100010010001000010001000000010000",
      "100000010100010010000000000010001",
      "010011000000001010000000000010001",
      "011111000000001000000000000010000",
      "000011000000100011100000000001010",
      "011000000000000000000000000000000"
    ]
  },
  {
    "name": "flying machine",
    "desc": "  = {Schick engine}\n",
    "grid": []
  },
  {
    "name": "FNG",
    "desc": "  = {first natural glider}.\n",
    "grid": []
  },
  {
    "name": "fore and back",
    "desc": " (p2)  Compare {snake pit}.  Found by Achim Flammenkamp,\n   July 1994.\n",
    "grid": [
      "1101100",
      "1101010",
      "0000001",
      "1110111",
      "1000000",
      "0101011",
      "0011011"
    ]
  },
  {
    "name": "forward glider",
    "desc": "  A {glider} which moves at least partly in the same\n   direction as the {puffer}(s) or {spaceship}(s) under consideration.\n",
    "grid": []
  },
  {
    "name": "fountain",
    "desc": " (p4)  Found by Dean Hickerson in November 1994, and named by\n   Bill Gosper.  See also {filter} and {superfountain}.\n",
    "grid": [
      "0000000001000000000",
      "0000000000000000000",
      "0001101000001011000",
      "0001000001000001000",
      "0000110110110110000",
      "0000000000000000000",
      "0000001100011000000",
      "1100000000000000011",
      "1001000101010001001",
      "0111011111111101110",
      "0000100001000010000",
      "0001100000000011000",
      "0001000000000001000",
      "0000010000000100000",
      "0000110000000110000"
    ]
  },
  {
    "name": "four skewed blocks",
    "desc": " (p1)  The following {constellation}, sometimes\n   considered to be one of the {familiar fours}.\n",
    "grid": [
      "0001100000",
      "0001100000",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000000011",
      "1100000011",
      "1100000000",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000011000",
      "0000011000"
    ]
  },
  {
    "name": "fourteener",
    "desc": " (p1)\n",
    "grid": [
      "0000110",
      "1100101",
      "1000001",
      "0111110",
      "0001000"
    ]
  },
  {
    "name": "fox",
    "desc": " (p2)  This is the smallest asymmetric p2 oscillator.  Found by\n   Dave Buckingham, July 1977.\n",
    "grid": [
      "0000100",
      "0000100",
      "0010010",
      "1100000",
      "0000101",
      "0010101",
      "0000001"
    ]
  },
  {
    "name": "freeze-dried",
    "desc": "  A term used for a {glider constructible} {seed} that can\n   activated in some way to produce a complex object.  For example, a\n   \"freeze-dried salvo\" is a constellation of constructible objects\n   which, when {trigger}ed by a single glider, produces a unidirectional\n   glider {salvo}, and nothing else.  Freeze-dried salvos can be useful\n   in {slow salvo} constructions, especially when an active circuit has\n   to destroy or reconstruct itself in a limited amount of time.\n   Gradual modification by a {construction arm} may be too slow, or the\n   circuit doing the construction may itself be the object that must be\n   modified.\n     The concept may be applied to other types of objects.  For example,\n   one possible way to build a gun for a {waterbear} would be to program\n   a construction arm to build a freeze-dried waterbear seed, and then\n   trigger it when the construction is complete.\n",
    "grid": []
  },
  {
    "name": "French kiss",
    "desc": " (p3)  Found by Robert Wainwright, July 1971.\n",
    "grid": [
      "1000000000",
      "1110000000",
      "0001000000",
      "0010011000",
      "0010000100",
      "0001100100",
      "0000001000",
      "0000000111",
      "0000000001"
    ]
  },
  {
    "name": "frog II",
    "desc": " (p3)  Found by Dave Buckingham, October 1972.\n",
    "grid": [
      "00110001100",
      "00101010100",
      "00001010000",
      "00010101000",
      "00011011000",
      "01100000110",
      "10010101001",
      "01010001010",
      "11010001011",
      "00001110000",
      "00000000000",
      "00010110000",
      "00011010000"
    ]
  },
  {
    "name": "frothing puffer",
    "desc": "  A frothing puffer (or a frothing spaceship) is a\n   {puffer} (or {spaceship}) whose back end appears to be unstable and\n   breaking apart, but which nonetheless survives.  The {exhaust}\n   festers and clings to the back of the puffer/spaceship before\n   breaking off. The first known frothing puffers were c/2, and most\n   were found by slightly modifying the back ends of p2 spaceships.  A\n   number of these have periods which are not a multiple of 4 (as with\n   some {line puffer}s).  Paul Tooke has also found c/3 frothing\n   puffers.\n     The following p78 c/2 frothing puffer was found by Paul Tooke in\n   April 2001.\n",
    "grid": [
      "000000010000000000000000010000000",
      "000000111000000000000000111000000",
      "000001100001110000011100001100000",
      "000110100111001000100111001011000",
      "000010100101000101000101001010000",
      "011010101010000101000010101010110",
      "011000101000010000010000101000110",
      "011101000100001010100001000101110",
      "110000000001101010101100000000011",
      "000000000000100000001000000000000",
      "000000000110100000001011000000000",
      "000000000010000000000010000000000",
      "000000011010000000000010110000000",
      "000000011000000000000000110000000",
      "000000010101011101110101010000000",
      "000000110001000101000100011000000",
      "000000100100010101010001001000000",
      "000000000110000101000011000000000",
      "000001100001000101000100001100000",
      "000000000101101000101101000000000",
      "000000000010101010101010000000000",
      "000000000000100101001000000000000",
      "000000000001010000010100000000000"
    ]
  },
  {
    "name": "frothing spaceship",
    "desc": "  See {frothing puffer}.\n",
    "grid": []
  },
  {
    "name": "frozen",
    "desc": "  = {freeze-dried}.\n",
    "grid": []
  },
  {
    "name": "full diagonal",
    "desc": "  Diagonal distance measurement, abbreviated \"fd\", often\n   appropriate when a {construction arm} {elbow} or similar\n   diagonally-adjustable mechanism is present.\n",
    "grid": []
  },
  {
    "name": "fumarole",
    "desc": " (p5)  Found by Dean Hickerson in September 1989.  In terms of\n   its 7x8 bounding box this is the smallest p5 oscillator.\n",
    "grid": [
      "00011000",
      "01000010",
      "01000010",
      "01000010",
      "00100100",
      "10100101",
      "11000011"
    ]
  },
  {
    "name": "fuse",
    "desc": "  A {wick} {burn}ing at one end.  For examples, see {baker},\n   {beacon maker}, {blinker ship}, {boat maker}, {cow}, {harvester},\n   {lightspeed wire}, {pi ship}, {reverse fuse}, {superstring} and\n   {washerwoman}.  Useful fuses are usually {clean}, but see also\n   {reburnable fuse}.\n     A fuse can {burn} arbitrarily slowly, as demonstrated by the\n   example {Blockic} fuse below.  A {signal}, alternating between\n   {glider} and {MWSS} form, travels up and down between two rows of\n   blocks in a series of {one-time} {turner} reactions.  The spacing\n   shown here causes the fuse to burn 24 cells to the right every 240\n   generations, for a speed of c/10.  Moving the bottom half further\n   from the top half by any even number of cells will slow down the\n   burning even further.\n",
    "grid": [
      "000000000110000000000000000000000110000000000000000000000",
      "000000000110000000000000000000000110000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000001100000001100000000000001100000001100000000000001100",
      "011001100000001100000000011001100000001100000000011001100",
      "011000000000000000011000011000000000000000011000011000000",
      "000000000000000000011000000000000000000000011000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000110000110000000000000000110000110000000000000",
      "000000000000110000110000000000000000110000110000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "110000110000000000000000110000110000000000000000110000110",
      "110000110000000000000000110000110000000000000000110000110",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "011000011000000000000000000000011000000000000000000000011",
      "101000011000011000000000000000011000011000000000000000011",
      "001000000000011001100000001100000000011001100000001100000",
      "000000000000000001100000001100000000000001100000001100000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000110000000000000000000000110000000000",
      "000000000000000000000110000000000000000000000110000000000"
    ]
  },
  {
    "name": "Fx119",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in September 1996.\n   After 119 ticks, it produces an inverted {Herschel} at (20, 14)\n   relative to the input.  Its recovery time is 231 ticks; this can be\n   reduced somewhat by suppressing the output Herschel's glider, or by\n   adding extra {catalyst}s to make the reaction settle more quickly. A\n   {ghost Herschel} in the pattern below marks the output location:\n",
    "grid": [
      "10000000000000000000000",
      "10100000000000000000000",
      "11100000000000000000000",
      "00100000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000011000000000001",
      "00001100011000000000111",
      "00001100000000000000100",
      "00000000000000000000100",
      "00000000000000000000000",
      "00011000000000000000000",
      "00001000011000000000000",
      "01110000011000000000000",
      "01000000000000000000000"
    ]
  },
  {
    "name": "Fx119 inserter",
    "desc": "  A {Herschel-to-glider} {converter} and {edge shooter}\n   based on an {Fx119} Herschel conduit:\n",
    "grid": [
      "000000000100000000000000000000",
      "000000000101000000000000000000",
      "000000000111000000000000000000",
      "000000000001000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "001100000011000000000000000000",
      "000100000001000000000000000000",
      "111000001110000000000000000000",
      "100000001000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000110000000000",
      "000000000000011000110000000000",
      "000000000000011000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000110000000000001100",
      "000000000000010000110000001000",
      "000000000011100000110000000111",
      "000000000010000000000000000001"
    ]
  },
  {
    "name": "Fx153",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in February 1997.\n   It is made up of two {elementary conduit}s, HF94B + {BFx59H}. After\n   153 ticks, it produces an inverted {Herschel} at (48, -4) relative to\n   the input.  Its {recovery time} is 69 ticks.  It can be made\n   {Spartan} by replacing the {snake} with an {eater1} in one of two\n   orientations.  A {ghost Herschel} in the pattern below marks the\n   output location:\n",
    "grid": [
      "00000000000000000000000001100000000000000000000000000",
      "11000000000000000000000000100000000000000000000000000",
      "01000000000000011000000111000000000000000000000000000",
      "01010000000000011000000100000000000000000000000000000",
      "00110000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000001",
      "00000000000000000000000000000000000000000000000000111",
      "00000000000000000000000000000000011000000000000000100",
      "00100000000000000000000000000000011000000000000000100",
      "00101000000000000000000000000000000000000000000000000",
      "00111000000000000000000000000000000000000000000000000",
      "00001000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000011000000000000000000000",
      "00000000000000000000000000000010000000000000000000000",
      "00000000000110001100000000000001000000000000000000000",
      "00000000000010001000000000000011000000000000000000000",
      "00000000011100000111000000000000000000000000000000000",
      "00000000010000000001000000000000000000000000000000000"
    ]
  },
  {
    "name": "Fx158",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in July 1996.\n   After 158 ticks, it produces an inverted {Herschel} at (27, -5)\n   relative to the input.  Its {recovery time} is 176 ticks.  It is the\n   only known small conduit that does not produce its output Herschel\n   via the usual {Herschel great-grandparent}, so it cannot be followed\n   by a {dependent conduit}.  A {ghost Herschel} in the pattern below\n   marks the output location:\n",
    "grid": [
      "000000000100001100000000000000",
      "000000001010010100000001100000",
      "000000010011110000000001000000",
      "000000010100001000000101000000",
      "000001110110011000000110000000",
      "000010000000000000000000000000",
      "010011110110000000000000000000",
      "011100010110000000000000000000",
      "000010000000000000000000000000",
      "000110000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000001",
      "000000000000000000000000000111",
      "000000000000000000000000000100",
      "000000000000000000000000000100",
      "100000000000000000000000000000",
      "101000000000000000000000000000",
      "111000000000000000000000000000",
      "001000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000110000000000000",
      "000000000110000101000000000000",
      "000000000010000001000000000000",
      "000000011100000001100000000000",
      "000000010000000000000000000000"
    ]
  },
  {
    "name": "Fx176",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in October 1997.  It\n   is made up of three {elementary conduit}s, HF95P + PF35W + WFx46H.\n   After 176 ticks, it produces an inverted {Herschel} at (45, 0)\n   relative to the input.  The {recovery time} of the standard form\n   shown here is 92 ticks, but see the {PF35W} entry for a variant\n   discovered in November 2017 that lowers the repeat time to 73 ticks.\n   A {ghost Herschel} in the pattern below marks the output location.\n",
    "grid": [
      "00000000000000000000000000000011000000000000000000",
      "00000000000000000000000000000011000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000110000000000000000000000000000000",
      "00000000000000000010000000000000000000000000000000",
      "00000000000000000010100000000000000000000000000000",
      "00000000000000000001100000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000110000000000000000000000000000000000",
      "00000010000000110000000000000000000000000000000000",
      "00000011100000000000000000000000000000000000000000",
      "00000000010000000000000000000000000000000000000000",
      "00000000110000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "11000000000000000000000000000000000000000000000000",
      "01000000000000000000000000000000000000000000000000",
      "01010000000000000000000000000000000000000110000000",
      "00110000000000000000000000000000000000000010000000",
      "00000000000000000000000000000000000000000010100000",
      "00000000000000000000000000000000000000000001010000",
      "00000000000000000000000000000000000000000000100011",
      "00000000000000000000000000000000000000000000000011",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000000000000",
      "00101000000000000000000000000000000011000000000001",
      "00111000000000000000000000000000000011000000000111",
      "00001000000000000000000000000000000000000000000100",
      "00000000000000000000000000000000000000000000000100",
      "00000000000000110000000011000000000000000000000000",
      "00000000000000110011000001000000000000000000000000",
      "00000000000000000010101110000000000000000000000000",
      "00000000000000000000101000000000000000000000000000",
      "00000000000000000000110000110000000000000000000000",
      "00000000000000000000000001010000110000000000000000",
      "00000000000000000000000001000000110000000000000000",
      "00000000000000000000000011000000000000000000000000"
    ]
  },
  {
    "name": "Fx77",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in August 1996.\n   After 77 ticks, it produces an inverted {Herschel} at (25, -8)\n   relative to the input.  Its {recovery time} is 61 ticks; this can be\n   reduced slightly by suppressing the output Herschel's glider, as in\n   the {L112} case.  A {pipsquirter} can replace the blinker-suppressing\n   eater to produce an extra glider output.  It is one of the simplest\n   known {Spartan} conduits, and one of the few {elementary conduit}s in\n   the original set of sixteen.\n     In January 2016, Tanner Jacobi discovered a {Spartan} method of\n   extracting an extra glider output (top variant below).  A\n   {ghost Herschel} marks the output location for each variant.\n",
    "grid": [
      "010000000000000000000000000000",
      "011100000000000000000000000000",
      "000010000000000000000000000000",
      "000110000000000011000000000001",
      "000000000000000011000000000111",
      "000000000000000000000000000100",
      "000000000000000000000000000100",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "001000000000000000000000000000",
      "001010000000000000000000000000",
      "001110000000000000000000000000",
      "000010000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000110000001100000000",
      "000000000001001000001100000000",
      "000000000001001000000000000000",
      "000000000000110000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "100000000000000000000000000000",
      "111000000000000000000000000000",
      "000100000000000000000000000000",
      "001100000000000110000000000010",
      "000000000000000110000000001110",
      "000000000000000000000000001000",
      "000000000000000000000000001000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "010000000000000000000000000000",
      "010100000000000000000000000000",
      "011100000000000000000000000000",
      "000100000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000011000000000000",
      "000000000000000010100000000000",
      "000000000000000000100000000000",
      "000000000000000000110000000000"
    ]
  },
  {
    "name": "G4 receiver",
    "desc": " An alternate {Herschel receiver} discovered by Sergei\n   Petrov on 28 December 2011, using his previous {glider to 2 blocks}\n   {converter}.  In the pattern below the {Herschel} output is marked by\n   a {ghost Herschel}.  A {glider} also escapes to the northwest.  For\n   an explanation of the \"G4\" describing the {tandem glider} input, see\n   {Gn}.\n",
    "grid": [
      "0000000000000000000000000000000010100000000000000000000000",
      "0000000000000000000000000000000011000000000000000000000000",
      "0000000000000000000000000000000001000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000110000000000000000000000000000000000000000",
      "0000000000000000110000000000000000000010000000000000000000",
      "0000000000000000000000000001010000001110000000000000000000",
      "0000000000000000000000000001100000010000000000000000000000",
      "0000000000000000000000000000100000011000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000011000000000000000100",
      "0000000000011000000000000000000000000011000000000000000100",
      "0000000000011000000000000000000000000000000000000000000111",
      "0000000000000000000000011000000000000000000000000000000001",
      "0000000010000000000110011000000000000000000000000000000000",
      "0000001110000000000110000000000000000000000000000000000000",
      "0000010000000000000000000000000000000000000000000000000000",
      "0000011000000000000000000000000110000000000000000000000000",
      "0000000000000000011000000000000100000000000000000000000000",
      "0000000000000000011000000100000011100000000000000000000000",
      "0000000000000000000000001010000000100000000000000000000000",
      "0000000000000000000000000100000000000000000000000000000000"
    ]
  },
  {
    "name": "Gabriel's p138",
    "desc": " (p138)  The following {oscillator} found by Gabriel\n   Nivasch in October 2002.\n",
    "grid": [
      "000000011100000",
      "000000100100000",
      "000000010001000",
      "001000001110000",
      "000100000100000",
      "110110000000000",
      "100100000000010",
      "101000000000101",
      "010000000001001",
      "000000000011011",
      "000001000001000",
      "000011100000100",
      "000100010000000",
      "000001001000000",
      "000001110000000"
    ]
  },
  {
    "name": "galaxy",
    "desc": "  = {Kok's galaxy}\n",
    "grid": []
  },
  {
    "name": "Game of Life",
    "desc": "  = {Life}\n",
    "grid": []
  },
  {
    "name": "Game of Life News",
    "desc": "  A blog reporting on new Life discoveries, started\n   by Heinrich Koenig in December 2004, currently found at\n   {http://pentadecathlon.com/lifenews/}.\n",
    "grid": []
  },
  {
    "name": "Garden of Eden",
    "desc": "  A configuration of ON and OFF cells that can only\n   occur in generation 0.  (This term was first used in connection with\n   cellular automata by John W. Tukey, many years before Life.)  It was\n   known from the start that there are Gardens of Eden in Life, because\n   of a theorem by Edward Moore that guarantees their existence in a\n   wide class of cellular automata.  Explicit examples have since been\n   constructed, the first by Roger Banks, et al. at MIT in 1971. This\n   example was 9 x 33.  In 1974 J. Hardouin-Duparc et al. at the\n   University of Bordeaux 1 produced a 6 x 122 example.  The following\n   shows a 12 x 12 example found by Nicolay Beluchenko in February 2006,\n   based on a 13 x 12 one found by Achim Flammenkamp in June 2004.\n",
    "grid": [
      "001011100000",
      "110101111101",
      "101011010100",
      "011110101110",
      "101011011101",
      "011101101010",
      "001000111001",
      "010110101010",
      "111011110101",
      "110111100010",
      "010101100100",
      "011010011010"
    ]
  },
  {
    "name": "Gemini",
    "desc": " ((5120,1024)c/33699586 obliquely, p33699586)  The first\n   {self-constructing} spaceship, and also the first {oblique}\n   spaceship.  It was made public by Andrew Wade on 18 May 2010.  It was\n   the thirteenth explicitly constructed spaceship velocity in Life, and\n   made possible an infinite family of related velocities.  The Gemini\n   spaceship derives its name from the Latin \"gemini\", meaning twins,\n   describing its two identical halves, each of which contains three\n   Chapman-Greene {construction arm}s. A tape of gliders continually\n   relays between the two halves, instructing each to delete its parent\n   and construct a daughter configuration.\n",
    "grid": []
  },
  {
    "name": "Gemini puffer",
    "desc": "  See {Pianola breeder}.\n",
    "grid": []
  },
  {
    "name": "Geminoid",
    "desc": "  A type of self-constructing circuitry that borrows key ideas\n   from Andrew Wade's {Gemini} spaceship, but with several\n   simplifications.  The main feature common to the Gemini spaceship is\n   the construction recipe encoding method.  Information is stored\n   directly, and much more efficiently, in the timings of moving\n   gliders, rather than in a static tape with 1s and 0s encoded by the\n   presence of small stationary objects.\n     Unlike the original Gemini, Geminoids have {ambidextrous}\n   construction arms, initially using glider pairs on two lanes\n   separated by 9{hd}, 10hd, or 0hd. The design was the basis for the\n   {linear propagator} and the {Demonoid}s.  A more recent development\n   is a Geminoid toolkit using a {single-channel} construction arm,\n   which allows for the possibility of multiple elbows with no loss of\n   efficiency, or the construction of temporary lossless elbows.\n   Compare {slow elbow}.\n     Other new developments that could be considered part of the\n   extended \"Geminoid\" toolkit include {freeze-dried} construction\n   salvos and seeds, used when objects must be built within a short time\n   window, and self-destruct circuits, which are used as an alternative\n   to a {destructor arm} to clean up temporary objects in a similarly\n   short window.\n",
    "grid": []
  },
  {
    "name": "generation",
    "desc": "  The fundamental unit of time.  The starting pattern is\n   generation 0.\n",
    "grid": []
  },
  {
    "name": "germ",
    "desc": " (p3)  Found by Dave Buckingham, September 1972.\n",
    "grid": [
      "0000110000",
      "0000010000",
      "0001000000",
      "0010111100",
      "0010000100",
      "0110100000",
      "0010101111",
      "1010100001",
      "1100011100",
      "0000000110"
    ]
  },
  {
    "name": "gfind",
    "desc": "  A program by David Eppstein which uses {de Bruijn graph}s to\n   search for new {spaceship}s.  It was with gfind that Eppstein found\n   the {weekender}, and Paul Tooke later used it to find the {dragon}.\n   It is available at {http://www.ics.uci.edu/~eppstein/ca/gfind.c} (C\n   source code only).\n     Compare {lifesrc}.\n",
    "grid": []
  },
  {
    "name": "ghost Herschel",
    "desc": "  A dying {spark} made by removing one cell from the\n   {Herschel} heptomino.  This particular spark has the advantage that,\n   when placed in a conduit to mark the location of an input or output\n   Herschel, it disappears cleanly without damaging adjacent catalysts,\n   even in {dependent conduit}s with a block only two cells away.\n",
    "grid": [
      "100",
      "100",
      "111",
      "001"
    ]
  },
  {
    "name": "GIG",
    "desc": "  A glider injection gate.  This is a device for {inject}ing a\n   {glider} into a glider {stream}.  The injected glider is synthesized\n   from one or more incoming {spaceship}s assisted by the presence of\n   the GIG.  (This contrasts with some other glider injection reactions\n   which do not require a GIG,  as in {inject}.)  Gliders already in the\n   glider stream pass through the GIG without interfering with it.  A\n   GIG usually consists of a small number of oscillators.\n     For example, in July 1996 Dieter Leithner found the following\n   reaction which allows the construction of a pseudo-period 14 glider\n   stream.  It uses two {LWSS} streams, a {pentadecathlon} and a\n   {volcano}.\n",
    "grid": [
      "01000000000000000000000000000",
      "00100000000001100000000000000",
      "11100000000011100000000000000",
      "00000000000011010000000000000",
      "00000100000001110000000000000",
      "00010100000000100000000000000",
      "00001100000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000001111000",
      "00000000000000000000011111100",
      "00000000000000000000111111110",
      "00000000000010000001100000011",
      "00011000001010000000111111110",
      "01101100000110000000011111100",
      "01111000000000010000001111000",
      "00110000000000001000000000000",
      "00000000000000111000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000111111100000000000000000",
      "00011101110111000000000000000",
      "00100001110000100000000000000",
      "00011110101110100000000000000",
      "00000000000001000000000000000",
      "00101101010100000000000000000",
      "00110101010110000000000000000",
      "00000010010100000000000000000",
      "00000001100100000000000000000",
      "00000000000110000000000000000"
    ]
  },
  {
    "name": "glasses",
    "desc": " (p2)  Compare {scrubber} and {spark coil}.\n",
    "grid": [
      "000010000000010000",
      "001110000000011100",
      "010000000000000010",
      "010011100001110010",
      "110100010010001011",
      "000100011110001000",
      "000100010010001000",
      "000011100001110000",
      "000000000000000000",
      "000011010010110000",
      "000010110011010000"
    ]
  },
  {
    "name": "glider",
    "desc": " (c/4 diagonally, p4)  The smallest, most common and first\n   discovered {spaceship}.  This was found by Richard Guy in 1970 while\n   Conway's group was attempting to track the {evolution} of the\n   {R-pentomino}.  The name is due in part to the fact that it is\n   {glide symmetric}.  (It is often stated that Conway discovered the\n   glider, but he himself has said it was Guy.  See also the cryptic\n   reference (\"some guy\") in {Winning Ways}.)\n",
    "grid": [
      "111",
      "100",
      "010"
    ]
  },
  {
    "name": "glider-block cycle",
    "desc": "  An infinite {oscillator} based on the following\n   reaction (a variant of the {rephaser}).  The oscillator consists of\n   copies of this reaction displaced 2n spaces from one another (for\n   some n>6) with blocks added between the copies in order to cause the\n   reaction to occur again halfway through the period.  The period of\n   the resulting infinite oscillator is 8n-20.  (Alternatively, in a\n   cylindrical universe of width 2n the oscillator just consists of two\n   gliders and two blocks.)\n",
    "grid": [
      "00011000",
      "00011000",
      "00000000",
      "00000000",
      "00100100",
      "10100101",
      "01100110"
    ]
  },
  {
    "name": "glider constructible",
    "desc": "  See {glider synthesis}.\n",
    "grid": []
  },
  {
    "name": "glider construction",
    "desc": "  = {glider synthesis}.\n",
    "grid": []
  },
  {
    "name": "glider duplicator",
    "desc": "  Any reaction in which one input {glider} is\n   converted into two output gliders.  This can be done by {oscillator}s\n   or {spaceship}s, or by {Herschel conduit}s or other {signal}\n   {circuit}ry such as the {stable} example shown under {splitter}.  The\n   most useful glider duplicators are those with low {period}s.\n     The following period 30 glider duplicator demonstrates a simple\n   mechanism found by Dieter Leithner.  The input glider stream comes in\n   from the upper left, and the output glider streams leave at the upper\n   and lower right.  One of the output glider streams is inverted, so an\n   {inverting reflector} is required to complete the duplicator.  To\n   produce non-parallel output, an {inline inverter} could be\n   substituted for the northmost p30 glider gun.\n",
    "grid": [
      "000000010000110000000000000000000000011000000000",
      "000000001000010000000000000000000000011000000000",
      "000000111000010100000001000000000011000000100011",
      "000000000000001100000001010000000111000001000101",
      "000000000000000000000000001100000011000000111110",
      "000000000000000000000000001100000000011000011100",
      "000000000000000000000000001100000000011000000000",
      "000000000000000000000001010000000000000000000000",
      "000000000000000000000001000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000110000000000000000000000",
      "000000000000000000000000110000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000011100000000000000000000",
      "000000000000000000000000000100000000000000000000",
      "000000000000000000000000001000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000101000000000000000000000000000000000000",
      "000000010001000001110000000000000000000000000000",
      "110000010000000101001001100000000000000000000000",
      "110000100001000000011001001000000000000000000000",
      "000000010000000000000000000100000000000000000000",
      "000000010001001110000000000100000000000000000000",
      "000000000101000000000000000100000000000000000000",
      "000000000000000000000001001000001100000000000000",
      "000000000000000000000001100000001010000000000000",
      "000000000000000000000000000000000010000000000000",
      "000000000000000000000000000000000011000000000000"
    ]
  },
  {
    "name": "glider gun",
    "desc": "  A {gun} that fires {glider}s.  For examples, see\n   {Gosper glider gun}, {Simkin glider gun}, {new gun},  {p45 gun}.\n     True-period glider guns are known for some low periods, and for all\n   periods over 53 using {Herschel conduit} {technology}.  See {true}\n   for a list of known true-period guns.  The lowest true-period gun\n   possible is the {p14 gun} since that is the lowest possible period\n   for any glider {stream}, but no example has yet been found.\n     Pseudo-period glider guns are known for every period above 13.\n   These are made by using multiple true-period guns of some multiple of\n   the period, and glider {inject}ion methods to fill in the gaps.\n",
    "grid": []
  },
  {
    "name": "glider injection gate",
    "desc": "  = {GIG}\n",
    "grid": []
  },
  {
    "name": "glider lane",
    "desc": "  See {lane}.\n",
    "grid": []
  },
  {
    "name": "gliderless",
    "desc": "  A {gun} is said to be gliderless if it does not use\n   {glider}s.  The purist definition would insist that a glider does not\n   appear anywhere, even incidentally.  For a long time the only known\n   way to construct {LWSS}, {MWSS} and {HWSS} guns involved gliders, and\n   it was not until April 1996 that Dieter Leithner constructed the\n   first gliderless gun (a p46 LWSS gun).\n     In October 2017 Matthias Merzenich used two copies of\n   {Tanner's p46} to create a p46 MWSS gun.  This is the smallest known\n   gliderless gun, and also the smallest known MWSS gun.\n",
    "grid": [
      "0000001000000000000000000000000000000000",
      "0000001110000000000000000000000000000000",
      "0000000001000000000000000000000000000000",
      "0000000011000000000000000000000000000000",
      "0000010000000000000000000000000000000000",
      "0001110000000000000000000000000000000000",
      "0010000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000",
      "0011000000010100101000000000000000000000",
      "0010100000010010001000000000000000000000",
      "0001000001100010101000000000000000000000",
      "1110000000111010000000000000000000000000",
      "1000000110000011000000001110000000000000",
      "0000000110000110000000010001000000000000",
      "0000000110001000000000100000100000000000",
      "0000000110101000000001000100010000000000",
      "0000000110101000000001000000010000011000",
      "0000000000000000000001010001010000011000",
      "0000000000000000011000110001100000000000",
      "0000000000110000101000000000000000000000",
      "0000001100110000100000000000000000001100",
      "0000010100000001100000000000000000001000",
      "0000010000000000000110000000000000000111",
      "0000110000000000000010000100000000000001",
      "0000000000000000000010101010000000000000",
      "0000000000000000000001101101000000000000",
      "0000000000000000000000000001000000000000",
      "0000000000000000000000000001100000000000"
    ]
  },
  {
    "name": "glider pair",
    "desc": "  Two gliders travelling in the same direction with a\n   specific spacetime offset.  In a {transceiver} the preferred term is\n   {tandem glider}.  For several years, glider pairs on {lane}s\n   separated by 9 or 10 {half diagonal}s were the standard building\n   blocks in {Geminoid} {construction arm} {recipe}s.  In more recent\n   0hd and {single-channel} construction toolkits, all gliders share the\n   same lane, but glider pairs and {singleton}s are still important\n   concepts.\n",
    "grid": []
  },
  {
    "name": "glider-producing switch engine",
    "desc": "  See {stabilized switch engine}.\n",
    "grid": []
  },
  {
    "name": "glider pusher",
    "desc": "  An arrangement of a {queen bee shuttle} and a\n   {pentadecathlon} that can push the path of a passing glider out by\n   one half-diagonal space.  This was found by Dieter Leithner in\n   December 1993 and is shown below.  It is useful for constructing\n   complex {gun}s where it may be necessary to produce a number of\n   gliders travelling on close parallel paths.  See also {edge shooter}.\n",
    "grid": [
      "0000000001100000000000000",
      "0000000001100000000000000",
      "0000000000000000000000000",
      "0000000000100000000000000",
      "0000000001010000000000000",
      "0000000001010000000000000",
      "0000000000100000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000110101100000000000",
      "0000000100000100000000000",
      "0000000010001000000000000",
      "0100000001110000000000000",
      "0010000000000000000000000",
      "1110000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000010000100",
      "0000000000000001101111011",
      "0000000000000000010000100"
    ]
  },
  {
    "name": "glider recipe",
    "desc": "  = {glider synthesis}.\n",
    "grid": []
  },
  {
    "name": "glider reflector",
    "desc": "  See {reflector}.\n",
    "grid": []
  },
  {
    "name": "gliders by the dozen",
    "desc": " (stabilizes at time 184)  In early references\n   this is usually shown in a larger form whose generation 1 is\n   generation 8 of the form shown here.\n",
    "grid": [
      "11001",
      "10001",
      "10011"
    ]
  },
  {
    "name": "glider stopper",
    "desc": "  A {Spartan} logic circuit discovered by Paul Callahan\n   in 1996.  It allows a {glider} signal to pass through the circuit,\n   leaving behind a beehive that can cleanly absorb a single glider from\n   a perpendicular glider {stream}.  Two optional glider outputs are\n   also shown.  The circuit can't be re-used until the beehive \"bit\" is\n   cleared by the passage of at least one perpendicular input.  A\n   similar mechanism discovered more recently is shown in the\n   {beehive stopper} entry.\n",
    "grid": [
      "010000000000000000000000000000000000000000000",
      "001000000000000000000000000000000000000000000",
      "111000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000001000000000",
      "000000000000000000000000000000000010000000000",
      "000000000000000000000000000000000011100000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000010000000000000",
      "000000000000000000000000000000010100000000000",
      "000000000000000000011000000000011000000000000",
      "000000000000000000011000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000011000000000000000000000000",
      "000000000000000000100100000000000000000000000",
      "000000000000000000011000000000000000000000000",
      "000000000000000000000000001100000000000000000",
      "000000000000000000000000001100000000000000000",
      "000000000000000000000000000000000000000000011",
      "000000001100000000000000000000000000000000010",
      "000000010100000000000000000000000000000001010",
      "000000010000000000000000000000000000000001100",
      "000000110000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000001100000000000000000000000000",
      "000000000000000010100000000000000000000000000",
      "000000000000000010000000000000000000000000000",
      "000000000000000110000000000000000000000000000"
    ]
  },
  {
    "name": "glider synthesis",
    "desc": "  Construction of an object by means of {glider}\n   collisions.  It is generally assumed that the gliders should be\n   arranged so that they could come from infinity.  That is, gliders\n   should not have had to pass through one another to achieve the\n   initial arrangement.\n     Glider syntheses for all {still life}s and known {oscillator}s with\n   at most 14 cells were found by Dave Buckingham.  As of June 2018,\n   this limit has been increased to 18 cells.\n     Perhaps the most interesting glider syntheses are those of\n   {spaceship}s, because these can be used to create corresponding\n   {gun}s and {rake}s.  Many of the c/2 spaceships that are based on\n   {standard spaceship}s have been synthesized, mostly by Mark Niemiec.\n   In June 1998 Stephen Silver found syntheses for some of the\n   {Cordership}s (although it was not until July 1999 that Jason Summers\n   used this to build a Cordership gun).  In May 2000, Noam Elkies\n   suggested that a 2c/5 spaceship found by Tim Coe in May 1996 might be\n   a candidate for glider synthesis.  Initial attempts to construct a\n   synthesis for this spaceship got fairly close, but it was only in\n   March 2003 that Summers and Elkies managed to find a way to perform\n   the crucial last step.  Summers then used the new synthesis to build\n   a c/2 forward rake for the 2c/5 spaceship; this was the first example\n   in Life of a rake which fires spaceships that travel in the same\n   direction as the rake but more slowly.\n     A 3-glider synthesis of a {pentadecathlon} is shown in the diagram\n   below.  This was found in April 1997 by Heinrich Koenig and came as a\n   surprise, as it was widely assumed that anything using just three\n   gliders would already be known.\n",
    "grid": [
      "0000001000",
      "0000001010",
      "0000001100",
      "0000000000",
      "1110000000",
      "0010000000",
      "0100000110",
      "0000000011",
      "0000000100"
    ]
  },
  {
    "name": "glider to 2 blocks",
    "desc": " A {converter} discovered by Sergei Petrov on 8\n   October 2011, used in his later {G4 receiver}.\n",
    "grid": [
      "00000000001000000011",
      "11000000101000000011",
      "11000000011000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000110000000",
      "00000000000110000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000110000",
      "00000000000000010000",
      "00000000000000010100",
      "00000000000000001100",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000110000000000",
      "00000000110000000000"
    ]
  },
  {
    "name": "glider to block",
    "desc": "  A {converter} discovered by Sergei Petrov that places\n   a block at its right edge in response to a single {glider} input.\n   This has a variety of uses in {Herschel circuit}ry and other\n   {signal}-processing applications.\n",
    "grid": [
      "0000000000010000",
      "0000010000011100",
      "0000011100000010",
      "0000000010000110",
      "0000000110000000",
      "0000000000000000",
      "0000000000000000",
      "0000000000000000",
      "0000000000000000",
      "0000000000000000",
      "1100000000000000",
      "1100000000001100",
      "0000000000001010",
      "0000000000000100",
      "0000000000000000",
      "0000000000000000",
      "0000000000000000",
      "0000000000001100",
      "0011100000001000",
      "0000100000000111",
      "0001000000000001"
    ]
  },
  {
    "name": "glider train",
    "desc": "  A certain p64 c/2 orthogonal {puffer} that produces two\n   rows of {block}s and two backward {glider} waves.  Ten of these were\n   used to make the first {breeder}.\n",
    "grid": [
      "0000000000000000000000000000001000000000000",
      "0000000000000000000000000000000100000000000",
      "0000000000000000000000000100000100000000000",
      "0000100000000000000000000011111100000111111",
      "0000010000000000000000000000000000001000001",
      "1000010000000000000000000000000000000000001",
      "0111110000000000000000000000000000001000010",
      "0000000000000000000000000000000000000011000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000100000",
      "0000000000000000000000000000000000001000000",
      "0000000000000000000000000000000000011000110",
      "0000000000000000000000000000000000010100011",
      "0000000000000000000000000000000000001000110",
      "0000000000000000000000000000000000000000100",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000100",
      "0000000000000000000000000000000000001000110",
      "0000000000000000000000000000000000010100011",
      "0000000000000000000000000000000000011000110",
      "0000000000000000000000000000000000001000000",
      "0000000000000000000000000000000000000100000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000011000",
      "0111110000000000000000000000000000001000010",
      "1000010000000000000000000000000000000000001",
      "0000010000000000000000000000000000001000001",
      "0000100000000000000000000011111100000111111",
      "0000000000000000000000000100000100000000000",
      "0000000000000000000000000000000100000000000",
      "0000000000000000000000000000001000000000000"
    ]
  },
  {
    "name": "glider turner",
    "desc": "  Any reaction in which a {glider} is turned onto a new\n   path by a {spaceship}, {oscillator}, or {still life} {constellation}.\n   In the last two cases, the glider turner is usually called a\n   {reflector} if the reaction is repeatable, or a {one-time} {turner}\n   if the reaction can only happen once.\n     Glider turners are easily built using {standard spaceship}s. The\n   following diagram shows a convoy which turns a {forward glider} 90\n   degrees, with the new glider also moving forwards.\n",
    "grid": [
      "00000000011000000000",
      "00000000110111100000",
      "01000000011111100000",
      "10000000001111000000",
      "11100000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00010000000000000000",
      "01000100000000000000",
      "10000000000000000000",
      "10000100000000000000",
      "11111000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000001111110",
      "00000000000001000001",
      "00000000000001000000",
      "00000000000000100001",
      "00000000000000001100"
    ]
  },
  {
    "name": "glide symmetric",
    "desc": "  Undergoing simultaneous reflection and translation. A\n   glide symmetric {spaceship} is sometimes called a {flipper}.\n",
    "grid": []
  },
  {
    "name": "Gn",
    "desc": "  An abbreviation specific to {converter}s that produce multiple\n   {glider}s.  A \"G\" followed by any integer value means that the\n   converter produces a {tandem glider} - two parallel glider outputs\n   with lanes separated by the specified number of {half diagonal}s.\n",
    "grid": []
  },
  {
    "name": "gnome",
    "desc": "  = {fox}\n",
    "grid": []
  },
  {
    "name": "GoE",
    "desc": "  = {Garden of Eden}\n",
    "grid": []
  },
  {
    "name": "GoL",
    "desc": "  = {Game of Life}\n",
    "grid": []
  },
  {
    "name": "Golly",
    "desc": "  A cross-platform open source Life program by Andrew Trevorrow\n   and Tomas Rokicki.  Unlike most Life programs it includes the ability\n   to run patterns using the {hashlife} algorithm.  It is available from\n   {http://golly.sourceforge.net}.\n",
    "grid": []
  },
  {
    "name": "Gosper glider gun",
    "desc": "  The first known {gun}, and indeed the first known\n   finite pattern displaying {infinite growth}, found by Bill Gosper in\n   November 1970.  This period 30 gun remains the smallest known gun in\n   terms of its bounding box, though some variants of the p120\n   {Simkin glider gun} have a lower population. Gosper later constructed\n   several other guns, such as {new gun} and the p144 gun shown under\n   {factory}.  See also {p30 gun}.\n",
    "grid": [
      "000000000000000000000000100000000000",
      "000000000000000000000010100000000000",
      "000000000000110000001100000000000011",
      "000000000001000100001100000000000011",
      "110000000010000010001100000000000000",
      "110000000010001011000010100000000000",
      "000000000010000010000000100000000000",
      "000000000001000100000000000000000000",
      "000000000000110000000000000000000000"
    ]
  },
  {
    "name": "Gotts dots",
    "desc": "  A 41-cell 187x39 {superlinear growth} pattern found by\n   Bill Gosper in March 2006, who named it in honour of Nick Gotts,\n   discoverer of many other low-population superlinear patterns, such as\n   {Jaws}, the {mosquito}es, {teeth}, {catacryst} and {metacatacryst}.\n   See {switch-engine ping-pong} for the lowest-population\n   {superlinear growth} pattern as of July 2018, along with a list of\n   the record-holders.\n     Collisions within the pattern cause it to sprout its Nth\n   {switch engine} at generation T = ~224n-6.  The population of the\n   pattern at time t is asymptotically proportional to t times log(t),\n   so the growth rate is O(t ln(t)), faster than {linear growth} but\n   slower than {quadratic growth}.\n",
    "grid": []
  },
  {
    "name": "gourmet",
    "desc": " (p32)  Found by Dave Buckingham in March 1978.  Compare with\n   {pi portraitor} and {popover}.\n",
    "grid": [
      "00000000001100000000",
      "00000000001000000000",
      "00001101101000011000",
      "00100101010000010000",
      "00110000100000000100",
      "00000000000000001100",
      "00000000000000000000",
      "00000000000000001100",
      "10000000001110010100",
      "11100000001010001000",
      "00010000001010000111",
      "00101000000000000001",
      "00110000000000000000",
      "00000000000000000000",
      "00110000000000000000",
      "00100000000100001100",
      "00001000001010100100",
      "00011000010110110000",
      "00000000010000000000",
      "00000000110000000000"
    ]
  },
  {
    "name": "gp",
    "desc": "  = {glider pair}\n",
    "grid": []
  },
  {
    "name": "GPSE",
    "desc": "  = {glider-producing switch engine}\n",
    "grid": []
  },
  {
    "name": "grammar",
    "desc": "  A set of rules for connecting {component}s together to make\n   an object such as a {spaceship}, {oscillator} or {still life}.  For\n   example, in August 1989 Dean Hickerson found a grammar for\n   constructing an infinite number of short wide c/3 period 3\n   spaceships, using 33 different components and a table showing the\n   ways that they can be joined together.\n",
    "grid": []
  },
  {
    "name": "grandfather",
    "desc": "  = {grandparent}\n",
    "grid": []
  },
  {
    "name": "grandfatherless",
    "desc": "  A traditional name for a pattern with one or more\n   {parent}s but no grandparent.  This was a hypothetical designation\n   until May 2016.  See {grandparent} for details.\n",
    "grid": []
  },
  {
    "name": "grandparent",
    "desc": "  A pattern is said to be a grandparent of the pattern it\n   gives rise to after two generations.  For over thirty years, a\n   well-known open problem was the question of whether any pattern\n   existed that had a parent but no grandparent.  In 1972, {LifeLine}\n   Volume 6 mentioned John Conway's offer of a $50 prize for a solution\n   to the problem, but it remained open until May 2016 when a user with\n   the conwaylife.com forum handle 'mtve' posted an example.\n     Other patterns have since been found that have a grandparent but no\n   great-grandparent, or a great-grandparent but no\n   great-great-grandparent.  Further examples in this series almost\n   certainly exist, but as of July 2018 none have yet been found.\n",
    "grid": []
  },
  {
    "name": "Gray counter",
    "desc": " (p4)  Found in 1971.  If you look at this in the right\n   way you will see that it cycles through the Gray codes from 0 to 3.\n   Compare with {R2D2}.\n",
    "grid": [
      "0000001000000",
      "0000010100000",
      "0000101010000",
      "0100100010010",
      "1010100010101",
      "0100100010010",
      "0000101010000",
      "0000010100000",
      "0000001000000"
    ]
  },
  {
    "name": "gray ship",
    "desc": "  = {grey ship}\n",
    "grid": []
  },
  {
    "name": "great on-off",
    "desc": " (p2)\n",
    "grid": [
      "00110000",
      "01001000",
      "01010000",
      "11010010",
      "00001101",
      "00000001",
      "00001110",
      "00001000"
    ]
  },
  {
    "name": "grey counter",
    "desc": "  = {Gray counter}  (This form is erroneous, as Gray is\n   surname, not a colour.)\n",
    "grid": []
  },
  {
    "name": "grey ship",
    "desc": "  A {spaceship} that contains a region with an average\n   density of 1/2, and which is {extensible} in such a way that the\n   region of average density 1/2 can be made larger than any given\n   square region.\n     See also {with-the-grain grey ship}, {against-the-grain grey ship}\n   and {hybrid grey ship}.\n",
    "grid": []
  },
  {
    "name": "grin",
    "desc": "  The following common {parent} of the {block}.  This name relates\n   to the infamous {Cheshire cat}.  See also {pre-block}.\n",
    "grid": [
      "1001",
      "0110"
    ]
  },
  {
    "name": "grow-by-one object",
    "desc": "  A pattern whose population increases by one cell\n   every generation.  The smallest known grow-by-one object is the\n   following 44-cell pattern (David Bell's one-cell improvement of a\n   pattern found by Nicolay Beluchenko, September 2005).\n",
    "grid": [
      "00000000110000000",
      "00000001100000000",
      "00000000010000000",
      "00000000000110000",
      "00000000001000000",
      "00000000000000000",
      "00000000010011000",
      "01100000110000100",
      "11000001000001000",
      "00100001010001100",
      "00001001000011010",
      "00001100000001100",
      "00000000100001011",
      "00000001010010110",
      "00000000100000000"
    ]
  },
  {
    "name": "growing/shrinking line ship",
    "desc": "  A {line ship} in which the line\n   repeatedly grows and shrinks, resulting in a high-period {spaceship}.\n",
    "grid": []
  },
  {
    "name": "growing spaceship",
    "desc": "  An object that moves like a {spaceship}, except\n   that its front part moves faster than its back part and a {wick}\n   extends between the two.  Put another way, a growing spaceship is a\n   {puffer} whose output is burning {clean}ly at a slower rate than the\n   puffer is producing it.  Examples include {blinker ship}s,\n   {pi ship}s, and some {wavestretcher}s.\n",
    "grid": []
  },
  {
    "name": "G-to-H",
    "desc": "  A {converter} that takes a {glider} as an input {signal} and\n   produces a {Herschel} output, which can then be used by other\n   {conduit}s.  G-to-Hs are frequently used in {stable} logic circuitry.\n   Early examples include {Callahan G-to-H}, {Silver G-to-H}, and\n   {p8 G-to-H} for periodic circuits.  A more compact recent example is\n   the {syringe}.\n",
    "grid": []
  },
  {
    "name": "gull",
    "desc": "  = {elevener}\n",
    "grid": []
  },
  {
    "name": "gun",
    "desc": "  Any stationary pattern that emits {spaceship}s (or {rake}s)\n   forever.  For examples see {double-barrelled}, {edge shooter},\n   {factory}, {gliderless}, {Gosper glider gun}, {Simkin glider gun},\n   {new gun} and {true}.\n",
    "grid": []
  },
  {
    "name": "gunstar",
    "desc": "  Any of a series of glider {gun}s of period 144+72n (for all\n   non-negative integers n) constructed by Dave Buckingham in 1990 based\n   on his {transparent block reaction} and Robert Wainwright's p72\n   oscillator (shown under {factory}).\n",
    "grid": []
  },
  {
    "name": "gutter",
    "desc": "  A single straight line of cells along the axis of symmetry of\n   a mirror-{symmetric} pattern.  Most commonly this is an orthogonal\n   line, and the pattern is then odd-symmetric (as opposed to\n   even-symmetric, where the axis of symmetry follows the boundary\n   between two rows or columns of cells).\n     The birth rule for Conway's Life trivially implies that if there\n   are no live cells in the gutter of a symmetric pattern, new cells can\n   never be born there.  For examples, see {44P5H2V0}, {60P5H2V0},\n   {Achim's p4}, {brain}, {c/6 spaceship}, {centinal}, {p54 shuttle},\n   {pufferfish}, {snail}, {spider}, and {pulsar} (in two orientations).\n",
    "grid": []
  },
  {
    "name": "half-baked knightship",
    "desc": " ((6,3)c/2621440, p2621440)  A {self-supporting}\n   {macro-spaceship} with adjustable period but fixed direction, based\n   on the {half-bakery reaction}.  This was the first spaceship based on\n   this reaction, constructed in December 2014 by Adam P. Goucher. It\n   moves 6 cells horizontally and 3 cells vertically every 2621440+8N\n   ticks, depending on the relative spacing of the two halves.  It is\n   one of the slowest known {knightship}s, and the first one that was\n   not a {Geminoid}. Chris Cain optimized the design a few days later to\n   create the {Parallel HBK}.\n     The spaceship produces gliders from near-diagonal lines of\n   half-bakeries, which collide with each other at 180 degrees.  These\n   collisions produce {monochromatic salvo}s that gradually build and\n   trigger {seed}s, which in turn eventually construct small\n   {synchronized} {salvo}s of gliders.  These re-activate the lines of\n   half-bakeries, thus closing the cycle and moving the entire spaceship\n   obliquely by (6,3).\n",
    "grid": []
  },
  {
    "name": "half bakery",
    "desc": "  = {bi-loaf}.\n",
    "grid": []
  },
  {
    "name": "half-bakery reaction",
    "desc": "  The key reaction used in the\n   {half-baked knightship} and {Parallel HBK}, where a half-bakery is\n   moved by (6,3) when a glider collides with it, and the glider\n   continues on a new lane.  Ivan Fomichev noticed in May 2014 that\n   pairs of these reactions at the correct relative spacing can create\n   90-degree output gliders:\n",
    "grid": [
      "0000000000000000000000000000010",
      "0000000000000000000000000000100",
      "0000000000000000000000000000111",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000011000000000",
      "0000000000000000000100100000000",
      "0000000000000000000101000000000",
      "0000000000000000011010000000000",
      "0000000010000000100100000000000",
      "0000001100000000101000000000000",
      "0000000110000000010000000000000",
      "0000000000000000000000000000000",
      "0000110000000000000000000000000",
      "0001001000000000000000000000000",
      "0001010000000000000000000000000",
      "0110100000000000000000000000000",
      "1001000000000000000000000000000",
      "1010000000000000000000000000000",
      "0100000000000000000000000000000"
    ]
  },
  {
    "name": "half diagonal",
    "desc": "  A natural measurement of distance between parallel\n   glider lanes, or between {elbow} locations in a {universal}\n   {construction arm} {elbow operation} library.  If two gliders are in\n   the same phase and exactly lined up vertically or horizontally, N\n   cells away from each other, then the two glider {lane}s are\n   considered to be N half diagonals (hd) apart.  Gliders that are an\n   integer number of {full diagonal}s apart must be the same colour,\n   whereas integer {half diagonal}s allow for both glider colours.  See\n   {colour of a glider}, {linear propagator}.\n",
    "grid": []
  },
  {
    "name": "half fleet",
    "desc": "  = {ship-tie}\n",
    "grid": []
  },
  {
    "name": "Halfmax",
    "desc": "  A pattern that acts as a spacefiller in half of the Life\n   plane, found by Jason Summers in May 2005. It expands in three\n   directions at c/2, producing a triangular region that grows to fill\n   half the plane.\n",
    "grid": []
  },
  {
    "name": "hammer",
    "desc": "  To hammer a {LWSS}, {MWSS} or {HWSS} is to smash things into\n   the rear end of it in order to transform it into a different type of\n   {spaceship}.  A hammer is the object used to do the hammering. In the\n   following example by Dieter Leithner an LWSS is hammered by two more\n   LWSS to make it into an MWSS.\n",
    "grid": [
      "10010000000000000000",
      "00001000110000000000",
      "10001001110000011110",
      "01111001101000010001",
      "00000000111000010000",
      "00000000010000001001"
    ]
  },
  {
    "name": "hammerhead",
    "desc": "  A certain front end for {c/2 spaceship}s.  The central\n   part of the hammerhead pattern is supported between two {MWSS}. The\n   picture below shows a small example of a {spaceship} with a\n   hammerhead front end (the front 9 columns).\n",
    "grid": [
      "0000000000000000100",
      "0110000000000010001",
      "1101110000000100000",
      "0111110000000100001",
      "0011111000001011110",
      "0000001110101100000",
      "0000001110000100000",
      "0000001110111000000",
      "0000000000110000000",
      "0000000000110000000",
      "0000001110111000000",
      "0000001110000100000",
      "0000001110101100000",
      "0011111000001011110",
      "0111110000000100001",
      "1101110000000100000",
      "0110000000000010001",
      "0000000000000000100"
    ]
  },
  {
    "name": "hand",
    "desc": "  Any object used as a {slow salvo} {target} by a\n   {construction arm}.\n",
    "grid": []
  },
  {
    "name": "handshake",
    "desc": "  An old MIT name for {lumps of muck}, from the following\n   form (2 generations on from the {stairstep hexomino}):\n",
    "grid": [
      "00110",
      "01011",
      "11010",
      "01100"
    ]
  },
  {
    "name": "harbor",
    "desc": " (p5)  Found by Dave Buckingham in September 1978.  The name is\n   by Dean Hickerson.\n",
    "grid": [
      "00000110001100000",
      "00000101010100000",
      "00000010001000000",
      "00000000000000000",
      "00000110001100000",
      "11001010001010011",
      "10101100000110101",
      "01000000000000010",
      "00000000000000000",
      "01000000000000010",
      "10101100000110101",
      "11001010001010011",
      "00000110001100000",
      "00000000000000000",
      "00000010001000000",
      "00000101010100000",
      "00000110001100000"
    ]
  },
  {
    "name": "harvester",
    "desc": " (c p4 fuse)  Found by David Poyner, this was the first\n   published example of a {fuse}.  The name refers to the fact that it\n   produces debris in the form of {block}s which contain the same number\n   of cells as the fuse has burnt up.\n",
    "grid": [
      "000000000000000011",
      "000000000000000101",
      "000000000000001000",
      "000000000000010000",
      "000000000000100000",
      "000000000001000000",
      "000000000010000000",
      "000000000100000000",
      "000000001000000000",
      "000000010000000000",
      "000000100000000000",
      "000001000000000000",
      "111110000000000000",
      "111100000000000000",
      "101100000000000000"
    ]
  },
  {
    "name": "hashlife",
    "desc": "  A Life algorithm by Bill Gosper that is designed to take\n   advantage of the considerable amount of repetitive behaviour in many\n   large patterns of interest.  It provides a means of evolving\n   repetitive patterns millions (or even billions or trillions) of\n   generations further than normal Life algorithms can manage in a\n   reasonable amount of time.\n     The hashlife algorithm is described by Gosper in his paper listed\n   in the bibliography at the end of this lexicon.  Roughly speaking,\n   the idea is to store subpatterns in a hash table so that the results\n   of their {evolution} do not need to be recomputed if they arise again\n   at some other place or time in the evolution of the full pattern.\n   This does, however, mean that complex patterns can require\n   substantial amounts of memory.\n     Tomas Rokicki and Andrew Trevorrow implemented Hashlife into\n   {Golly} in 2005.  See also {macrocell}.\n",
    "grid": []
  },
  {
    "name": "hassle",
    "desc": "  See {hassler}.\n",
    "grid": []
  },
  {
    "name": "hassler",
    "desc": "  An {oscillator} that works by hassling (repeatedly moving or\n   changing) some object.  For some examples, see {Jolson},\n   {baker's dozen}, {toad-flipper}, {toad-sucker} and {traffic circle}.\n   Also see {p24 gun} for a good use of a {traffic light} {hassler}.\n",
    "grid": []
  },
  {
    "name": "hat",
    "desc": " (p1)  Found in 1971.  See also {twinhat} and {sesquihat}.\n",
    "grid": [
      "00100",
      "01010",
      "01010",
      "11011"
    ]
  },
  {
    "name": "HBK",
    "desc": "  = {half-baked knightship}\n",
    "grid": []
  },
  {
    "name": "hd",
    "desc": "  Abbreviation for {half diagonal}.  This metric is used primarily\n   for relative measurements of glider lanes, often in relation to\n   {self-constructing} circuitry; compare {Gn}.\n",
    "grid": []
  },
  {
    "name": "heat",
    "desc": "  For an {oscillator} or {spaceship}, the average number of cells\n   which change state in each generation.  For example, the heat of a\n   {glider} is 4, because 2 cells are born and 2 die every generation.\n     For a period n oscillator with an r-cell {rotor} the heat is at\n   least 2r/n and no more than r(1-(n mod 2)/n).  For n=2 and n=3 these\n   bounds are equal.\n",
    "grid": []
  },
  {
    "name": "heavyweight emulator",
    "desc": "  = {HW emulator}\n",
    "grid": []
  },
  {
    "name": "heavyweight spaceship",
    "desc": "  = {HWSS}\n",
    "grid": []
  },
  {
    "name": "heavyweight volcano",
    "desc": "  = {HW volcano}\n",
    "grid": []
  },
  {
    "name": "hebdarole",
    "desc": " (p7)  Found by Noam Elkies, November 1997.  Compare\n   {fumarole}.  The smaller version shown below was found soon after by\n   Alan Hensel using a component found by Dave Buckingham in June 1977.\n   The top ten rows can be stabilized by their mirror image (giving an\n   {inductor}) and this was the original form found by Elkies.\n",
    "grid": [
      "000000000001100000000000",
      "000011000100001000110000",
      "010010010100001010010010",
      "101010110100001011010101",
      "010010010101101010010010",
      "000011000010010000110000",
      "000000000001100000000000",
      "000000010010010010000000",
      "000000101100001101000000",
      "000000010000000010000000",
      "000000000000000000000000",
      "000110000000000000011000",
      "000100111100001111001000",
      "000010101010010101010000",
      "000110100011110001011000",
      "000000011000000110000000",
      "000000000110011000000000",
      "000000000100101000000000",
      "000000000011000000000000"
    ]
  },
  {
    "name": "hectic",
    "desc": " (p30)  Found by Robert Wainwright in September 1984.\n",
    "grid": [
      "000000000000000000000011000000000000000",
      "000000000000000000000011000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000100000000001100011000000000000",
      "000000010100000000000011100000000000000",
      "000000101000000000000100010000000000000",
      "110001001000000000000010100000000000000",
      "110000101000000000000001000000000000000",
      "000000010100000010100000000000000000000",
      "000000000100000011000000000000000000000",
      "000000000000000001000100000000000000000",
      "000000000000000000000110000001000000000",
      "000000000000000000001010000001010000000",
      "000000000000000100000000000000101000011",
      "000000000000001010000000000000100100011",
      "000000000000010001000000000000101000000",
      "000000000000001110000000000001010000000",
      "000000000000110001100000000001000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000110000000000000000000000",
      "000000000000000110000000000000000000000"
    ]
  },
  {
    "name": "Heisenburp device",
    "desc": "  A pattern which can detect the passage of a\n   {glider} without affecting the glider's path or timing.  The first\n   such device was constructed by David Bell in December 1992.  The\n   term, coined by Bill Gosper, refers to the fact that Heisenberg's\n   Uncertainty Principle fails to apply in the Life universe.  See also\n   {stable pseudo-Heisenburp} and {natural Heisenburp}.\n     The following is an example of the kind of reaction used at the\n   heart of a Heisenburp device.  The glider at bottom right alters the\n   reaction of the other two gliders without itself being affected in\n   any way.\n",
    "grid": [
      "10000010000",
      "01100010100",
      "11000011000",
      "00000000000",
      "00000000000",
      "00000000000",
      "00000000011",
      "00000000101",
      "00000000001"
    ]
  },
  {
    "name": "Heisenburp effect",
    "desc": "  See {Heisenburp device}.\n",
    "grid": []
  },
  {
    "name": "helix",
    "desc": "  A convoy of {standard spaceship}s used in a {Caterpillar} to\n   move some piece of debris at the speed of the Caterpillar.  The\n   following diagram illustrates the idea.  The leading edge of this\n   example helix, represented by the glider at the upper right in the\n   pattern below, moves at a speed of 65c/213, or slightly faster than\n   c/4.\n",
    "grid": [
      "000000000000000000000000000000010000000000000",
      "000000000000000001000000000000111000000000000",
      "000000000000000011100001110000101100000000000",
      "000000000111000010110001001000011100111000000",
      "000000000100100001110001000000011000100000000",
      "000000000100000001100001000100000000010000000",
      "000000000100010000000001000100000000000000000",
      "111000000100010000000001000000000000000000000",
      "100100000100000000000000101000000000000000000",
      "100000000010100000000000000000000000000000000",
      "100000000000000000000000000000000000000000000",
      "010100000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000010000000000000000000000000000000000",
      "000000000111000000000000000000000000000000000",
      "000000000101100000000000000000000000000000000",
      "000000000011100000000000000000000000000000000",
      "000000000011000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000111000000000000000000000000000",
      "000000000000000100100001000001110000000000000",
      "000000000000000100000011100001001000010000000",
      "000000000000000100000110100001000000111000000",
      "000011100000000010100111000001000001101000000",
      "000010010000000000000111000000101001110000000",
      "000010000000000000000111000000000001110000000",
      "000010000000000000000011000000000001110000000",
      "000001010000000000000000000000000000110000000",
      "000000000000000000000000000000000000000000010",
      "000000000000000000000000000000000000000000111",
      "000000000000000000000000000000000000000001101",
      "000000000000000000000000000000000000000001110",
      "000000000000000000000000000000000000000000110",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000001000",
      "000000000000000000000000000000111000000011100",
      "000000000000000011100000100001001000000110100",
      "000000000010000100100001110000001000000111000",
      "000000000111000000100001011000001000000111000",
      "000000000101100000100000111001010000000011000",
      "000000000011100101000000111000000000000000000",
      "010000000011100000000000111000000000000000000",
      "111000000011100000000000110000000000000000000",
      "101100000011000000000000000000000000000000000",
      "011100000000000000000000000000000000000000100",
      "011000000000000000000000000000000000000001110",
      "000000000000000000000000000000000000000011010",
      "000000000000000000000000000000000000000011100",
      "000000000000000000000000000000000000000001100",
      "000000000111000000000000000000000000000000000",
      "000000001001000000000000000000000000000000000",
      "000000000001000000000000000000000000000000000",
      "000000000001000000000000000000000000000000000",
      "000000001010000000000000000000000000000000000"
    ]
  },
  {
    "name": "heptaplet",
    "desc": "  Any 7-cell {polyplet}.\n",
    "grid": []
  },
  {
    "name": "heptapole",
    "desc": " (p2)  The {barberpole} of length 7.\n",
    "grid": [
      "1100000000",
      "1010000000",
      "0000000000",
      "0010100000",
      "0000000000",
      "0000101000",
      "0000000000",
      "0000001010",
      "0000000001",
      "0000000011"
    ]
  },
  {
    "name": "heptomino",
    "desc": "  Any 7-cell {polyomino}.  There are 108 such objects. Those\n   with names in common use are the {B-heptomino}, the {Herschel} and\n   the {pi-heptomino}.\n",
    "grid": []
  },
  {
    "name": "Herschel",
    "desc": " (stabilizes at time 128)  The following pattern which occurs\n   at generation 20 of the {B-heptomino}.\n",
    "grid": [
      "100",
      "101",
      "111",
      "001"
    ]
  },
  {
    "name": "Herschel circuit",
    "desc": "  A series of {Herschel conduit}s or other components,\n   connected by placing them so that the output {Herschel}s from early\n   conduits become the input Herschels for later conduits.  Often the\n   initial component is a {converter} accepting some other signal type\n   as input - usually a glider, in which case a {syringe} is most\n   commonly used.  The {Silver reflector} is a well-known early\n   {Spartan} Herschel circuit from before the syringe was discovered,\n   where the initial converter is a {Callahan G-to-H}.\n     Sometimes a direct connection between two conduits is not possible\n   due to unwanted gliders that destroy required {catalyst}s, or wanted\n   gliders that are not able to escape.  In this case, small \"spacer\"\n   conduits such as {F116}, {F117}, {Fx77}, {R64}, {L112}, or {L156} can\n   be inserted between the other conduits to solve the problem.\n     Some converter or {factory} conduits do not produce a Herschel as\n   output, instead generating other useful results such as gliders,\n   {boat}s or {MWSS}es.  See {Herschel-to-glider}, {demultiplexer}, and\n   {H-to-MWSS} respectively for examples of these.  For those conduits\n   which do produce an unwanted Herschel, an {eater} such as {SW-2} can\n   be added to delete it.\n     If the first and last conduits of a chain connect to each other in\n   a loop then there is no need for a syringe to generate the first\n   Herschel, or an eater to consume the last one.  The circuit becomes a\n   self-supporting {Herschel loop}.  A loop is also formed by a\n   {syringe} connected to a Herschel-to-glider converter, with the\n   glider reflected back to the syringe's input with glider reflectors\n   of the appropriate colour, usually {Snark}s.  In either case, if the\n   loop has a surplus {glider} output, it becomes a {gun}; if no output\n   is available it is an {emu}.\n",
    "grid": []
  },
  {
    "name": "Herschel climber",
    "desc": "  Any {reburnable fuse} reaction involving\n   {Herschel}s.  May refer specifically to the\n   {(23,5)c/79 Herschel climber} used in the {waterbear}, or one of\n   several similar reactions with various velocities.  See also\n   {Herschel-pair climber}.\n",
    "grid": []
  },
  {
    "name": "Herschel component",
    "desc": "  = {Herschel conduit}\n",
    "grid": []
  },
  {
    "name": "Herschel conduit",
    "desc": "  A {conduit} that moves a {Herschel} from one place\n   to another.  See also {Herschel loop}.\n     Well over a hundred simple stable Herschel conduits are currently\n   known.  As of June 2018 the number is approximately 150, depending on\n   the precise definition of \"simple\" - e.g., fitting inside a 100x100\n   bounding box, and producing output in no more than 300 {tick}s.  In\n   general a Herschel conduit can be called \"simple\" if its active\n   reaction does not return to a  Herschel stage except at its output.\n   Compare {elementary conduit}, {composite conduit}.  A description of\n   common usage in complex circuitry, using {syringe}s and {Snark}s to\n   make compact connections, can be found in {Herschel circuit}.\n     The original {universal} set consisted of sixteen stable Herschel\n   conduits, discovered between 1995 and 1998 by Dave Buckingham (DJB)\n   and Paul Callahan (PBC).  These are shown in the following table.  In\n   this table, the number in \"name/steps\" is the number of {tick}s\n   needed to produce an output Herschel from the input Herschel.  \"m\"\n   tells how the Herschel is moved (R = turned right, L = turned left, B\n   = turned back, F = unturned, f = flipped), and \"dx\" and \"dy\" give the\n   displacement of the centre cell of the Herschel (assumed to start in\n   the orientation shown above).\n",
    "grid": [
      "11111111111111111111111111111111111111111"
    ]
  },
  {
    "name": "Herschel descendant",
    "desc": "  A common active pattern occurring at generation\n   22 of a {Herschel}'s {evolution}:\n",
    "grid": [
      "1100",
      "1011",
      "0001",
      "0101",
      "0110"
    ]
  },
  {
    "name": "Herschel great-grandparent",
    "desc": "  A specific three-{tick} predecessor of a\n   {Herschel}, commonly seen in {Herschel conduit} collections that\n   contain {dependent conduit}s.  In some situations it is helpful to\n   display the input reaction in this form instead of the standard\n   Herschel form.\n",
    "grid": [
      "0110000",
      "1110110",
      "0110111",
      "1110110",
      "1100000"
    ]
  },
  {
    "name": "Herschel loop",
    "desc": "  A cyclic {Herschel track}.  Although no loop of length\n   less than 120 generations has been constructed it is possible to make\n   {oscillator}s of smaller periods by putting more than one Herschel in\n   a higher-period track.  In this way oscillators, and in most cases\n   {gun}s, of all periods from 54 onwards can now be constructed\n   (although the p55 case is a bit strange, shooting itself with gliders\n   in order to stabilize itself).  A mechanism for a period-52 loop was\n   found in April 2018, but it includes a stage where the signal is\n   carried by a triplet of {glider}s so it may not be considered to be a\n   pure Herschel loop.  The missing period, 53, is a difficult case\n   simply because 53 is prime and so no small sparkers or reflectors are\n   available.\n     See {Simkin glider gun} and {p256 gun} for the smallest known\n   Herschel loops.  See also {emu} and {omniperiodic}.\n",
    "grid": []
  },
  {
    "name": "Herschel-pair climber",
    "desc": "  Any {reburnable fuse} reaction involving pairs\n   of {Herschel}s.  May refer specifically to the\n   {31c/240 Herschel-pair climber} used in the {Centipede}, or one of\n   several similar reactions with various velocities.  See also\n   {Herschel climber}.\n",
    "grid": []
  },
  {
    "name": "Herschel receiver",
    "desc": "  Any {circuit} that converts a {tandem glider} into\n   a {Herschel} {signal}.  The following diagram shows a pattern found\n   by Paul Callahan in 1996, as part of the first stable glider\n   {reflector}.  Used as a receiver, it converts two parallel input\n   gliders (with path separations of 2, 5, or 6) to an {R-pentomino}.\n   The signal is then converted to a Herschel by one of several known\n   mechanisms, the first of which was found by Dave Buckingham way back\n   in 1972.  The second is {elementary conduit} {RF48H}, found by\n   Stephen Silver in October 1997.  The receiver version shown below\n   uses Buckingham's R-to-Herschel converter, which is made up of\n   elementary conduit {RF28B} followed by {BFx59H}.\n",
    "grid": [
      "00000000000000000000000000000000000000000000000101",
      "00000000000000000000000000000000000000110000000110",
      "00000000000000000000000000000000000000110000000010",
      "00011000000000000000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000000000",
      "00001000000000000000000000000000000000000000000000",
      "00011000000000000000000000000000000000000000000000",
      "00000000000011000000000000000000000000000000000000",
      "00000000000101000000000000000000000000000000000000",
      "00000000000010000000000000000000000000000001000000",
      "00000000000000000000000000000000000000110001010000",
      "00000000000000000000000000000000000001001001100000",
      "11000000000000000000000000000000000000110000000000",
      "11000000000000000000000000000001100000000000000000",
      "00000000000000000000000000000001100000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000110000",
      "00000000000000000000000000000000000000000000110000",
      "00000000000000000000000000000000000000001100000000",
      "00000000000000000000000000000000000000001010000000",
      "00000000000000000000000000000000000000000010000000",
      "00000000000000000000000000000000000000000011000000",
      "00000000000000000000000000000110000000000000000000",
      "00000000000000000000000000000110000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000011000000000000000000000",
      "00000000000000000000000000011000000000000000000000"
    ]
  },
  {
    "name": "Herschel stopper",
    "desc": "  A method of cleanly suppressing a {Herschel} signal\n   with an {asynchronous} {boat-bit}, discovered by Dean Hickerson.\n   Here a {ghost Herschel} marks the location of the output signal, in\n   cases where the boat-bit is not present.  Other boat-bit locations\n   that allow for clean suppression of a Herschel are also known.\n",
    "grid": [
      "00000000000000000000000000000000000011",
      "00000000000000000000000001000000000010",
      "00000000000000000000000001110000000001",
      "00000000000000000000000000001000000011",
      "00000000000000000000000000011000000000",
      "00000000000000000000000000000000000000",
      "00000000100000000000000000000000000000",
      "00000000111000000000000000000000000000",
      "00000000000100000000000000000000000000",
      "00000000001100000000000110000000000010",
      "00000000000000000000000110000000001110",
      "00000000000000000000000000000000001000",
      "00000000000000000000000000000000001000",
      "00000000000000000000000000000000000000",
      "00000000000000000000000000100000000000",
      "00000000000000000000000000110000000000",
      "00000000010000000000000001010000000000",
      "00000000010100000000000000000000000000",
      "00000000011100000000000000000000000000",
      "00000000000100000000000000000000000110",
      "00000000000000000000000000000000000010",
      "00000000000000000000000000000000011100",
      "00000000000000000000000000000000010000",
      "00000000000000000000000000000000000000",
      "00110000000000000000000000000000000000",
      "00010000000000000000000000000000000000",
      "11100000000000000000000110000000000000",
      "10000000000000000000000100000000000000",
      "00000000000000000000000011100000000000",
      "00000000000000000000000000100000000000"
    ]
  },
  {
    "name": "Herschel-to-glider",
    "desc": "  The largest category of {elementary conduit}.\n   Gliders are very common and self-supporting, so it's much easier to\n   find these than any other type of output {signal}.  A large\n   collection of these H-to-G {converter}s has been compiled, with many\n   different output {lane}s and timings.  These can be used to\n   synchronize multiple signals to produce {gun} patterns or complex\n   logic circuitry.  See {NW31T120} for an example.\n",
    "grid": []
  },
  {
    "name": "Herschel track",
    "desc": "  A {track} for {Herschel}s.  An equivalent term is\n   {Herschel circuit}.  See also {B track}.\n",
    "grid": []
  },
  {
    "name": "Herschel transceiver",
    "desc": "  An adjustable {Herschel conduit} made up of a\n   {Herschel transmitter} and a {Herschel receiver}.  The intermediate\n   stage consists of a {tandem glider} - two {glider}s on parallel\n   {lane}s - so that the transmitter and receiver can be separated by\n   any required distance. The conduit may be {stable}, or may contain\n   low-period {oscillator}s.\n",
    "grid": []
  },
  {
    "name": "Herschel transmitter",
    "desc": "  Any {Herschel}-to-two-{glider} {converter} that\n   produces a {tandem glider} that can be used as input to a\n   {Herschel receiver}.  If the gliders are far enough apart, and if one\n   of the gliders is used only for cleanup, then the transmitter is\n   {ambidextrous}:  with a small modification to the receiver, a\n   suitably oriented mirror image of the receiver will also work.\n     The following diagram shows a {stable} Herschel transmitter found\n   by Paul Callahan in May 1997:\n",
    "grid": [
      "0000001100000000000",
      "0000010100000000000",
      "0001110000000000000",
      "0010001000000100000",
      "0011011000000111000",
      "0000000000000101000",
      "0000000000000001000",
      "0000000000000000000",
      "0000000000000000000",
      "1101000000000000000",
      "1011000000000000000",
      "0000000000000000000",
      "0000000000000000000",
      "0000000000000000000",
      "0000000000000001100",
      "0000000000000001000",
      "0000000000000000111",
      "0000000000000000001"
    ]
  },
  {
    "name": "Hertz oscillator",
    "desc": " (p8)  Compare {negentropy}, and also {cauldron}.\n   Found by Conway's group in 1970.\n",
    "grid": [
      "00011010000",
      "00010110000",
      "00000000000",
      "00001110000",
      "00010101011",
      "00010001011",
      "11010001000",
      "11010001000",
      "00001110000",
      "00000000000",
      "00001101000",
      "00001011000"
    ]
  },
  {
    "name": "hexadecimal",
    "desc": "  = {beehive and dock}\n",
    "grid": []
  },
  {
    "name": "hexaplet",
    "desc": "  Any 6-cell {polyplet}.\n",
    "grid": []
  },
  {
    "name": "hexapole",
    "desc": " (p2)  The {barberpole} of length 6.\n",
    "grid": [
      "110000000",
      "101000000",
      "000000000",
      "001010000",
      "000000000",
      "000010100",
      "000000000",
      "000000101",
      "000000011"
    ]
  },
  {
    "name": "hexomino",
    "desc": "  Any 6-cell {polyomino}.  There are 35 such objects. For some\n   examples see {century}, {stairstep hexomino}, {table}, {toad} and\n   {Z-hexomino}.\n",
    "grid": []
  },
  {
    "name": "HF",
    "desc": "  = {honey farm}\n",
    "grid": []
  },
  {
    "name": "HFx58B",
    "desc": "  A common {Herschel} to {B-heptomino} converter, used as the\n   first stage of {F117} and many other Herschel conduits.  There are\n   two variants, both shown in the pattern below.\n",
    "grid": [
      "0000000000100000000000000000000000000000010000000000",
      "0000000000111000000000000000000000000001110000000000",
      "0000000000000100000000000000000000000010000000000000",
      "1100000000001100000000000000000000000011000000000011",
      "0100000000000000000000000000000000000000000000000010",
      "0101000000000000000000000000000000000000000000001010",
      "0011000000000000000000000000000000000000000000001100",
      "0000000000000000000001000000001000000000000000000000",
      "0000000000000000000001100000011000000000000000000000",
      "0000000000000000000000110000110000000000000000000000",
      "0000000000000000000000100000010000000000000000000000",
      "0000000000000000000001000000001000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0010000000000000000000000000000000000000000000000100",
      "0010100000000000000000000000000000000000000000010100",
      "0011100000000000000000000000000000000000000000011100",
      "0000100000000000110000000000000000011000000000010000",
      "0000000000000000100000000000000000011000000000000000",
      "0000000000000000011100000000000000000001100000000000",
      "0000000000000000000100000000000000000001000000000000",
      "0000000000000000000000000000000000000000111000000000",
      "0000000000000000000000000000000000000000001000000000"
    ]
  },
  {
    "name": "H-heptomino",
    "desc": "  Name given by Conway to the following {heptomino}.  After\n   one generation this is the same as the {I-heptomino}.\n",
    "grid": [
      "1100",
      "0100",
      "0111",
      "0010"
    ]
  },
  {
    "name": "high-bandwidth telegraph",
    "desc": " (p960, p30 circuitry)  A variant of the\n   {telegraph} constructed by Louis-Francois Handfield in February 2017,\n   using periodic components to achieve a transmission rate of one bit\n   per 192 ticks.  The same ten signals are sent as in the original\n   {telegraph} and the {p1 telegraph}, but information is encoded more\n   efficiently in the timing of those signals.  Specifically, the new\n   transmitter sends five bits every 960 ticks by adjusting the relative\n   timings inside each of the five mirror-image paired subunits of the\n   composite signal in the beehive-chain {lightspeed wire} {fuse}.\n",
    "grid": []
  },
  {
    "name": "high-clearance",
    "desc": "   See {clearance}.\n",
    "grid": []
  },
  {
    "name": "highway robber",
    "desc": "  Any mechanism that can retrieve a signal from a\n   spaceship {lane} while allowing spaceships on nearby lanes to pass by\n   unaffected.  In practice the spaceship is generally a glider.  The\n   signal is removed from the lane, an output signal is generated\n   elsewhere, and the highway robber returns to its original state.  A\n   competent highway robber does not affect gliders even on the lane\n   adjacent to the affected glider stream, except during its recovery\n   period.\n     A perfect highway robber doesn't affect later gliders even in the\n   lane to which it is attached, even during its recovery period.  Below\n   is a near-perfect highway robber \"bait\" that requires three\n   {synchronized} signals to rebuild (the {Herschel}, {B-heptomino}, and\n   {glider}.)  The glider at the top right passes by unharmed, but\n   another glider following on the same {lane} 200 ticks later will be\n   cleanly reflected to a new path, and another glider following that\n   one will also pass by unharmed.  The only imperfection is a few ticks\n   at the very end of the reconstruction, as the beehive is being\n   rebuilt:\n",
    "grid": [
      "00000000000000000000001000000000001000000000",
      "00000000000000000000001110000000101000000000",
      "00000000011000110000000001000000011000000000",
      "00000000011000110000000011000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00110000000000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000",
      "00010100000000000000000000000000000000000000",
      "00001100000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000001100000000000000000000000000000000000",
      "00000000100000000000000000000000000000000000",
      "00000111000000000000000000000000000000000000",
      "00000100000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000110000000000000000000000",
      "00000000000000000000110000000000000000000000",
      "00000000000011000000000000000000000000000000",
      "00000000000001000000000000000000000000000000",
      "10000000001110000000000000000000000000000000",
      "11100000001000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000",
      "00110000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000100000000000110000000000000001100",
      "00000000011100000000001010000000000000001100",
      "00000000010100000000000010000000000000000000",
      "00000000010000000000000000000001101000000010",
      "00000000000000000000000000000001011000000111",
      "00000000000000000000000000000000000000001101",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000110000000000000",
      "00000000000000000000000000000110000000000000",
      "00000000000000000000000110000000000000000000",
      "00000000000000000000000110000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000001100000000000000000",
      "00000000000000000011000001100000000000000000",
      "00000000000000000011000000000000000000000000"
    ]
  },
  {
    "name": "hive",
    "desc": "  = {beehive}\n",
    "grid": []
  },
  {
    "name": "hivenudger",
    "desc": " (c/2 orthogonally, p4)  A {spaceship} found by Hartmut\n   Holzwart in July 1992.  (The name is due to Bill Gosper.)  It\n   consists of a {pre-beehive} escorted by four {LWSS}.  In fact any\n   LWSS can be replaced by a {MWSS} or an {HWSS}, so that there are 45\n   different single-hive hivenudgers.\n",
    "grid": [
      "1111000001001",
      "1000100010000",
      "1000000010001",
      "0100100011110",
      "0000000000000",
      "0000011000000",
      "0000011000000",
      "0000011000000",
      "0000000000000",
      "0100100011110",
      "1000000010001",
      "1000100010000",
      "1111000001001"
    ]
  },
  {
    "name": "honey bit",
    "desc": "  A block and pond {constellation} used in the\n   {OTCA metapixel} by Brice Due in 2006, to store and retrieve a bit of\n   data - specifically, the presence or absence of a neighbor\n   {metacell}.  The \"0\" state of the honey bit memory unit is a simple\n   {beehive}, which is also the source of the name.\n     An input glider collides with the beehive to convert it into the\n   honey bit constellation, which can be thought of as a value of \"1\"\n   stored in the memory unit.  A passing LWSS can then test for the\n   presence of the pond.  If a collision occurs, the LWSS and the honey\n   bit constellation are mutually annihilated, leaving just the original\n   beehive.  Below is the honeybit constellation with the two reactions\n   occurring in the opposite order - test, then reset.\n",
    "grid": [
      "01000000000000000",
      "00100000000000000",
      "11100000000000000",
      "00000000000000000",
      "00000000000011110",
      "00000000000010001",
      "00000000000010000",
      "00000000000001001",
      "00000000000000000",
      "00000000001100000",
      "00000000010010000",
      "00000000010010000",
      "00000000001100000",
      "00000000000000000",
      "00000000000000000",
      "00000000011000000",
      "00000000011000000"
    ]
  },
  {
    "name": "honeycomb",
    "desc": " (p1)\n",
    "grid": [
      "001100",
      "010010",
      "101101",
      "010010",
      "001100"
    ]
  },
  {
    "name": "honey farm",
    "desc": " (p1)  A common formation of four beehives.\n",
    "grid": [
      "0000001000000",
      "0000010100000",
      "0000010100000",
      "0000001000000",
      "0000000000000",
      "0110000000110",
      "1001000001001",
      "0110000000110",
      "0000000000000",
      "0000001000000",
      "0000010100000",
      "0000010100000",
      "0000001000000"
    ]
  },
  {
    "name": "hook",
    "desc": "  Another term for a {bookend}.  It is also used for other\n   hook-shaped things, such as occur in the {eater1} and the\n   {hook with tail}, for example.\n",
    "grid": []
  },
  {
    "name": "hook with tail",
    "desc": " (p1)  For a long time this was the smallest\n   {still life} without a well-established name.  It is now a vital\n   component of the smallest known {HWSS} {gun}, where it acts as a\n   {rock}.\n",
    "grid": [
      "10100",
      "11010",
      "00010",
      "00011"
    ]
  },
  {
    "name": "houndstooth agar",
    "desc": "  The p2 {agar} that results from tiling the plane\n   with the following pattern.\n",
    "grid": [
      "0111",
      "0100",
      "0010",
      "1110"
    ]
  },
  {
    "name": "house",
    "desc": "  The following {induction coil}.  It is generation 3 of the\n   {pi-heptomino}.  See {spark coil} and {dead spark coil}.\n",
    "grid": [
      "01110",
      "10001",
      "11011"
    ]
  },
  {
    "name": "H-to-G",
    "desc": "  A {Herschel-to-glider} {converter}.\n",
    "grid": []
  },
  {
    "name": "H-to-MWSS",
    "desc": "  A {Spartan} {converter} found by Tanner Jacobi in October\n   2015, which converts an input {Herschel} to a middleweight spaceship.\n   The key discovery was a very small but slightly {dirty} H-to-MWSS\n   conduit, where a Herschel is catalyzed to produce an {MWSS} but also\n   leaves behind a beehive.  Prefixing two {R64} conduits to this\n   produces a {composite} converter that successfully deletes the\n   beehive in advance, using the input Herschel's\n   {first natural glider}.\n",
    "grid": [
      "00000000000000000000000000000110000000000000000",
      "00000000000000000000000000000110000011000000000",
      "00000000000000000000000000000000000011000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000011000000000000000001100000000000",
      "00000000000000001000000000000000001100000000000",
      "00000000000000001010000000000000000000001100000",
      "00000000000000000110000000000000000000001100000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000100000000000000000000000000",
      "00000000000000000000101000000000000000000000000",
      "00000000000000000000111000000000000000000000000",
      "00000000000000000000001000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00011000000000000000000000000000111000000000000",
      "00101000000000000000000000000000100000000000000",
      "00010000000000000000000000000001100000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000011",
      "01000000000000000000000000000000000000000000011",
      "10100000000000000001101000000000000000000000000",
      "10100000000000000001101110000000000000000000000",
      "01000000000000000000000010000000000000000000000",
      "00000000000000000000000010000000000000001100000",
      "00000000000000000000000000000000000000001100000",
      "00001010000000000000000000000000000000000000110",
      "00000001000000000000000000000000000000000000110",
      "00010001000000000000000000000000000000000000000",
      "00000001000000000000000000000000000000000000000",
      "00001001000000000000000000000000000000110000000",
      "00000111000000000000000000000000000000110000000"
    ]
  },
  {
    "name": "hustler",
    "desc": " (p3)  Found by Robert Wainwright, June 1971.\n",
    "grid": [
      "00000110000",
      "00000110000",
      "00000000000",
      "00011110000",
      "10100001000",
      "11010001000",
      "00010001011",
      "00010000101",
      "00001111000",
      "00000000000",
      "00001100000",
      "00001100000"
    ]
  },
  {
    "name": "hustler II",
    "desc": " (p4)\n",
    "grid": [
      "0000100000000000",
      "0000111000000000",
      "0000000100000000",
      "0000001001100000",
      "1011010110010000",
      "1101010000010000",
      "0000010000100000",
      "0000100000101011",
      "0000100110101101",
      "0000011001000000",
      "0000000010000000",
      "0000000001110000",
      "0000000000010000"
    ]
  },
  {
    "name": "HW emulator",
    "desc": " (p4)  Found by Robert Wainwright in June 1980.  See also\n   {emulator}.\n",
    "grid": [
      "0000000110000000",
      "0011010000101100",
      "0010000000000100",
      "0001100000011000",
      "1110011111100111",
      "1001000000001001",
      "0110000000000110"
    ]
  },
  {
    "name": "HWSS",
    "desc": " (c/2 orthogonally, p4)  A heavyweight spaceship, the fourth most\n   common {spaceship}.  Found by Conway in 1970 by modifying a {LWSS}.\n   See also {MWSS}.\n",
    "grid": [
      "0001100",
      "0100001",
      "1000000",
      "1000001",
      "1111110"
    ]
  },
  {
    "name": "HWSS emulator",
    "desc": "  = {HW emulator}\n",
    "grid": []
  },
  {
    "name": "HW volcano",
    "desc": " (p5)  A p5 {domino} {sparker}, found by Dean Hickerson in\n   February 1995.\n",
    "grid": [
      "000000000100000000000000000000000000",
      "000000001010000000000000000000000000",
      "000000111010000000000000000000000000",
      "000001000011010000000000000000000000",
      "000001011000110000001100000000000000",
      "000011010110000000001010000000000000",
      "000000000101111100000010010110000000",
      "001011011010000010000110101101000000",
      "000001100000111100000000100001000000",
      "100010100100010100001101011110110000",
      "100010100110101101100001010000101000",
      "000001100011101101011101001110001000",
      "001011011011000000000000010100101011",
      "000000000001000000101010100110101010",
      "000011010101100000011010101000101010",
      "000001011010010000000101100111101100",
      "000001000010100000000100011000000000",
      "000011000011000000001100010010000000",
      "000000000000000000000000000110000000"
    ]
  },
  {
    "name": "hybrid grey ship",
    "desc": "  A {grey ship} containing more than one type of\n   region of density 1/2, usually a combination of a\n   {with-the-grain grey ship} and an {against-the-grain grey ship}.\n",
    "grid": []
  },
  {
    "name": "I-heptomino",
    "desc": "  Name given by Conway to the following {heptomino}.  After\n   one generation this is the same as the {H-heptomino}.\n",
    "grid": [
      "1100",
      "0100",
      "0110",
      "0011"
    ]
  },
  {
    "name": "IMG",
    "desc": "  = {intermitting glider gun}\n",
    "grid": []
  },
  {
    "name": "Immigration",
    "desc": "  A form of {colourised Life} in which there are two types\n   of ON cell, a newly-born cell taking the type of the majority of its\n   three {parent cells} and surviving cells remaining of the same type\n   as in the previous generation.\n",
    "grid": []
  },
  {
    "name": "independent conduit",
    "desc": "  A {Herschel conduit} in which the input Herschel\n   produces its {first natural glider}.  Compare {dependent conduit}.\n",
    "grid": []
  },
  {
    "name": "induction coil",
    "desc": "  Any object used to stabilize an edge (or edges)\n   without touching.  The tubs used in the {Gray counter} are examples,\n   as are the blocks and snakes used in the {Hertz oscillator} and the\n   heptomino at the bottom of the {mathematician}.\n",
    "grid": []
  },
  {
    "name": "inductor",
    "desc": "  Any {oscillator} with a row of dead cells down the middle\n   and whose two halves are mirror images of one another, both halves\n   being required for the oscillator to work.  The classic examples are\n   the {pulsar} and the {tumbler}.  If still lifes are considered as p1\n   oscillators then there are numerous simple examples that include this\n   kind of central {gutter}, such as {table on table}, {dead spark coil}\n   and {cis-mirrored R-bee}. Some spaceships, such as the {brain}, the\n   {snail} and the {spider}, use the same principle.\n",
    "grid": []
  },
  {
    "name": "infinite glider hotel",
    "desc": "  A pattern by David Bell, named after Hilbert's\n   \"infinite hotel\" scenario in which a hotel with an infinite number of\n   rooms has room for more guests even if it is already full, simply by\n   shuffling the old guests around.\n     In this pattern, two pairs of {Cordership}s moving at c/12 are\n   pulling apart such that there is an ever-lengthening {glider} track\n   between them.  Every 128 generations another glider is {inject}ed\n   into the glider track (see {LWSS-glider bounce}), joining the gliders\n   already circulating there. The number of gliders in the track\n   therefore increases without limit.\n     The tricky part of this construction is that even though all the\n   previously injected gliders are repeatedly flying through the\n   injection point, that point is guaranteed to be empty when it is time\n   for the next glider to be injected.\n",
    "grid": []
  },
  {
    "name": "infinite growth",
    "desc": "  Growth of a finite pattern such that the {population}\n   tends to infinity, or at least is unbounded. Sometimes the term is\n   used for growth of something other than population (for example,\n   length), but here we will only consider infinite population growth.\n   The first known pattern with infinite growth in this sense was the\n   {Gosper glider gun}, created in a response to a $50 prize challenge\n   by John Conway.  Martin Gardner's October 1970 article described the\n   challenge as \"Conway conjectures that no pattern can grow without\n   limit\", but Conway later explained that he had always expected that\n   this would be disproved.  The original purpose in investigating CA\n   rules including B3/S23 was to show that a very simple two-state rule\n   could support a {universal computer} and/or {universal constructor}.\n   If all finite patterns could be proven to be bounded, neither of\n   these would be possible.\n     An interesting question is: What is the minimum population of a\n   pattern that exhibits infinite growth?  In 1971 Charles Corderman\n   found that a {switch engine} could be stabilized by a {pre-block} in\n   a number of different ways, giving 11-cell patterns with infinite\n   growth.  This record stood for more than quarter of a century until\n   Paul Callahan found, in November 1997, two 10-cell patterns with\n   infinite growth.  The following month he found the one shown below,\n   which is much neater, being a single {cluster}. This produces a\n   stabilized switch engine of the block-laying type.\n",
    "grid": [
      "00000010",
      "00001011",
      "00001010",
      "00001000",
      "00100000",
      "10100000"
    ]
  },
  {
    "name": "initials",
    "desc": "  = {monogram}\n",
    "grid": []
  },
  {
    "name": "inject",
    "desc": "  A reaction in which a hole in a regular spaceship stream is\n   filled partially or fully by adding a new spaceship of the same type\n   without affecting the existing spaceships in the stream.  Depending\n   on the period of the stream, different mechanisms can be used.  For\n   adding a spaceship to an existing multi-lane {convoy}, see\n   {inserter}.\n     For large period glider streams, simple reactions such as\n   {LWSS-LWSS bounce} and {LWSS-glider bounce} suffice.  If {Herschel}\n   technology is used, a large number of {edge shooter}s and\n   {transparent} conduits are known.  Simple examples include the {NW31}\n   {Herschel-to-glider} {converter} and the {Fx119 inserter}.\n     Shown below is an injector found by Dave Buckingham that can fill a\n   hole in a p15 glider stream:\n",
    "grid": [
      "00101000000000000000000",
      "00011000000000000000000",
      "00010000000000000000010",
      "00000000000000000000100",
      "00000000000000000000111",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000001000000000000",
      "00000000000110000000000",
      "00000000001100000000000",
      "00000000000000000000000",
      "01100000000000000000000",
      "10100110000000000000000",
      "00101100000000000000000",
      "00000010000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000110000000000000000",
      "00000011000000000000000",
      "00000100000000000000000"
    ]
  },
  {
    "name": "inline inverter",
    "desc": "  The following reaction in which a p30 {gun} can be\n   used to invert the presence or absence of gliders in a p30 stream,\n   with the output glider stream being in the same direction as the\n   input glider stream.\n",
    "grid": [
      "000000000000000010000000000000000000",
      "000000000000000001000000000000000000",
      "000000000000000111000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000001010000000000",
      "000000000000000000000100010000000000",
      "000000000000010000000100000000000000",
      "000000000000111100001000010000000011",
      "000000000001101010000100000000000011",
      "110000000011101001000100010000000000",
      "110000000001101010000001010000000000",
      "000000000000111100000000000000000000",
      "000000000000010000000000000000000000"
    ]
  },
  {
    "name": "inserter",
    "desc": "  A mechanism that can add another spaceship into a stream or\n   convoy of other spaceships without affecting the existing spaceships.\n   For examples see {Fx119 inserter}, {tee}, {GIG}, {clock insertion}\n   and {inject}.\n",
    "grid": []
  },
  {
    "name": "integral",
    "desc": "  = {integral sign}\n",
    "grid": []
  },
  {
    "name": "integral sign",
    "desc": " (p1)\n",
    "grid": [
      "00011",
      "00101",
      "00100",
      "10100",
      "11000"
    ]
  },
  {
    "name": "intentionless",
    "desc": "  = {elevener}\n",
    "grid": []
  },
  {
    "name": "interchange",
    "desc": " (p2)  A common formation of six blinkers.\n",
    "grid": [
      "00111000011100",
      "00000000000000",
      "10000000000001",
      "10000000000001",
      "10000000000001",
      "00000000000000",
      "00111000011100"
    ]
  },
  {
    "name": "intermediate target",
    "desc": "  A temporary product of a partial {slow salvo},\n   {elbow operation}, or {glider synthesis}.  An intermediate target is\n   a useful step toward a desired outcome, but will not appear in the\n   final construction.\n",
    "grid": []
  },
  {
    "name": "intermittent stream",
    "desc": "  A {stream} of spaceships which is based on a\n   periodic stream, but which can contain holes where some of the\n   spaceships are not present. There is a base period for the\n   intermittent stream such that if a spaceship arrives at a specific\n   location, then it always does so at a generation which is a multiple\n   of the base period.  For example, the output from a period 30 glider\n   gun where every third glider is deleted is an intermittent stream.  A\n   {pseudo-random glider generator} can produce a complicated\n   intermittent stream with no obvious pattern.\n     Intermittent streams can be used to transmit {signal}s, where holes\n   in the stream can also convey information.  For example, the stream\n   can be processed by an {inverter} having the same period.\n",
    "grid": []
  },
  {
    "name": "intermitting glider gun",
    "desc": "  Despite the name, an intermitting glider gun\n   (IMG) is more often an {oscillator} than a {gun}.  There are two\n   basic types.  A type 1 IMG consists of two guns firing at one another\n   in such a way that each gun is temporarily disabled on being hit by a\n   glider from the other gun.  A type 2 IMG consists of a single gun\n   firing at a 180-degree glider {reflector} in such a way that\n   returning gliders temporarily disable the gun.\n     Both types of IMG can be used to make glider guns of periods that\n   are multiples of the base period.  This is done by firing another gun\n   across the two-way {intermittent stream} of gliders in the IMG in\n   such a way that gliders only occasionally escape.\n",
    "grid": []
  },
  {
    "name": "inverter",
    "desc": "  A device which can be used to invert the presence or absence\n   of spaceships in an {intermittent stream} of spaceships.  The device\n   must be a gun whose period matches the base period of the stream,\n   since if there are no input spaceships then the device must produce\n   spaceships as the result of the inversion.  Typically the spaceships\n   are gliders, and the inverter is made from a glider gun.  Inverters\n   provide a way to produce a NOT logic operation on a stream.\n     There are several ways to produce an inverter.  The simplest method\n   is to simply hit the output of a gun with the input stream to delete\n   its spaceships, producing an output stream that is always turned 90\n   degrees from the input stream.  An example is the northernmost p30\n   gun in the {glider duplicator} example pattern.  For one way to\n   produce an inverted output stream which is not turned, see\n   {inline inverter}.\n",
    "grid": []
  },
  {
    "name": "inverting reflector",
    "desc": "  See {inverter}.\n",
    "grid": []
  },
  {
    "name": "island",
    "desc": "  The individual {polyplet}s of which a {stable} pattern\n   consists are sometimes called islands.  So, for example, a {boat} has\n   only one island, while an {aircraft carrier} has two, a {honey farm}\n   has four and the standard form of the {eater3} has five.\n",
    "grid": []
  },
  {
    "name": "Iwona",
    "desc": " (stabilizes at time 28786)  The following {methuselah} found by\n   Andrzej Okrasinski in August 2004.\n",
    "grid": [
      "00000000000000111000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00100000000000000000",
      "00011000000000000000",
      "00010000000000000010",
      "00000000000000000010",
      "00000000000000000010",
      "00000000000000000001",
      "00000000000000000011",
      "00000001100000000000",
      "00000000100000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "00000000000000000000",
      "11000000000000000000",
      "01000000000000000000"
    ]
  },
  {
    "name": "J",
    "desc": "  = {Herschel}\n",
    "grid": []
  },
  {
    "name": "jack",
    "desc": " (p4)  Found by Robert Wainwright, April 1984.\n",
    "grid": [
      "0001000001000",
      "0001100011000",
      "1001100011001",
      "1110010100111",
      "0000010100000",
      "1110010100111",
      "1001100011001",
      "0001100011000",
      "0001000001000"
    ]
  },
  {
    "name": "jagged lines",
    "desc": "  A pattern constructed by Dean Hickerson in May 2005 that\n   uses {puffer}s to produce a line of {bi-block}s that weaves back and\n   forth in a complicated way.\n",
    "grid": []
  },
  {
    "name": "jam",
    "desc": " (p3)  Found by Achim Flammenkamp in 1988, but not widely known\n   about until its independent discovery (and naming) by Dean Hickerson\n   in September 1989.  Compare with {mold}.  In fact this is really very\n   like {caterer}.  In terms of its 7x7 {bounding box} it ties with\n   {trice tongs} as the smallest p3 {oscillator}.\n",
    "grid": [
      "000110",
      "001001",
      "100101",
      "100010",
      "100000",
      "000100",
      "011000"
    ]
  },
  {
    "name": "JavaLifeSearch",
    "desc": "  See {lifesrc}.\n",
    "grid": []
  },
  {
    "name": "Jaws",
    "desc": "  A {breeder} constructed by Nick Gotts in February 1997.  In the\n   original version Jaws had an initial {population} of 150, which at\n   the time was the smallest for any known pattern with\n   {superlinear growth}.  In November 1997 Gotts produced a 130-cell\n   Jaws using some {switch engine} {predecessor}s found by Paul\n   Callahan.  See {switch-engine ping-pong} for the lowest-population\n   superlinear growth pattern as of July 2018, along with a list of the\n   record-holders.\n     Jaws consists of eight pairs of switch engines which produce a new\n   block-laying switch engine (plus masses of junk) every 10752\n   generations.  It is therefore an MMS breeder.\n",
    "grid": []
  },
  {
    "name": "JC",
    "desc": "  = {dead spark coil}\n",
    "grid": []
  },
  {
    "name": "JHC",
    "desc": "  John Horton Conway.  Also another name for {monogram}.\n",
    "grid": []
  },
  {
    "name": "J-heptomino",
    "desc": "  = {Herschel}\n",
    "grid": []
  },
  {
    "name": "JLS",
    "desc": "  = {JavaLifeSearch}\n",
    "grid": []
  },
  {
    "name": "Jolson",
    "desc": " (p15)  Two {block}s {hassle}d by two {pentadecathlon}s. Found\n   by Robert Wainwright in November 1984 and named by Bill Gosper.  A p9\n   version using {snacker}s instead of pentadecathlons is also possible.\n",
    "grid": [
      "0110000001100",
      "1001000010010",
      "1001000010010",
      "1001000010010",
      "0110000001100",
      "0000000000000",
      "0000000000000",
      "0000000100000",
      "0000010010110",
      "0000001100110",
      "0000000000000",
      "0000000000000",
      "0000001111000",
      "0000011111100",
      "0000111111110",
      "0001100000011",
      "0000111111110",
      "0000011111100",
      "0000001111000"
    ]
  },
  {
    "name": "junk",
    "desc": "  = {ash}.\n",
    "grid": []
  },
  {
    "name": "Justyna",
    "desc": " (stabilizes at time 26458)  The following {methuselah} found\n   by Andrzej Okrasinski in May 2004.\n",
    "grid": [
      "0000000000000000010000",
      "0000000000000000100100",
      "0000000000000000011100",
      "0000000000000000010010",
      "0000000000000000000000",
      "1100000000000000001000",
      "0100000000000000001000",
      "0000000000000000001000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000111",
      "0000000000011100000000"
    ]
  },
  {
    "name": "Karel's p15",
    "desc": " (p15)  An {oscillator} discovered by Karel Suhajda on\n   December 11, 2002.  It consists of a period 15 rotor supported by the\n   domino spark of a pentadecathlon. It provides accessible sparks that\n   can be used to perturb reactions or thin signal {stream}s.\n",
    "grid": [
      "0010000100",
      "0011111100",
      "0010000100",
      "0000000000",
      "0000000000",
      "0000000000",
      "0011111100",
      "0100000010",
      "1000000001",
      "0100000010",
      "0011111100"
    ]
  },
  {
    "name": "keeper",
    "desc": "  A type of {factory} {circuit} that always results in the\n   presence of an object in the output location, whether or not the\n   object was previously present.  In many cases it is easy to construct\n   examples by connecting multiple circuits to shoot down an object with\n   a {glider}, then rebuild the object again later.  The smallest keeper\n   circuits accomplish the same thing more directly with a lucky\n   preliminary {spark} from the active reaction, which removes the\n   existing object (if any) just before the construction occurs.  Below\n   is a useful block keeper with a {Herschel} input.\n",
    "grid": [
      "00000000000000001000000000000000000000000000000",
      "00000000000000001110000011000000000000000000000",
      "00000000000000000001000011000000000000000000000",
      "00000000000000000011000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000110000000000000",
      "00000000000000000000000000000001010000000000000",
      "00000000000000000000000000000000100000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000001100000000000000000000000000000000000000",
      "00000000100000000000000000000000000000000000000",
      "00000000101000000000000000000000000000000000000",
      "00000000011000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000010000000000000000000000000000000000011",
      "00000000010100000000000000000000000000000000011",
      "00000000011100000000000000000000000000000000000",
      "00000000000100000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000110000000000000000000",
      "00000000000000000000000000110000000000000000000",
      "00110000000000000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000000",
      "11100000000011000000000000000000000000000000000",
      "10000000000011000000000000000000000000000000000"
    ]
  },
  {
    "name": "keys",
    "desc": "  See {short keys}, {bent keys} and {odd keys}.\n",
    "grid": []
  },
  {
    "name": "kickback",
    "desc": "  = {kickback reaction} or {180-degree kickback}.\n",
    "grid": []
  },
  {
    "name": "kickback reaction",
    "desc": "  The following collision of two {glider}s whose\n   product is a single glider travelling in the opposite direction to\n   one of the original gliders.  This is important in the proof of the\n   existence of a {universal constructor}, and in Bill Gosper's\n   {total aperiodic}, as well as a number of other constructions.\n",
    "grid": [
      "00000100",
      "00000011",
      "01100110",
      "10100000",
      "00100000"
    ]
  },
  {
    "name": "kidney",
    "desc": "  A Gosperism for {century}.  See also {diuresis}.\n",
    "grid": []
  },
  {
    "name": "killer toads",
    "desc": "  A pair of {toad}s acting together so that they can eat\n   things.  Here, for example, are some killer toads eating an {HWSS}.\n   Similarly they can eat a {MWSS} (but not a {LWSS}).  For another\n   example see {twirling T-tetsons II}.  See also {candlefrobra}.\n",
    "grid": [
      "00110000000111",
      "10000100001110",
      "00000010000000",
      "10000010000000",
      "01111110000000",
      "00000000001110",
      "00000000000111"
    ]
  },
  {
    "name": "Klein bottle",
    "desc": "  As an alternative to a {torus}, it's possible to make a\n   finite Life universe in the form of a Klein bottle.  The simplest way\n   to do this is to use an m x n rectangle with the top edge joined to\n   the bottom edge (as for a torus) and the left edge twisted and joined\n   to the right.\n",
    "grid": []
  },
  {
    "name": "knightship",
    "desc": "  Any {spaceship} of type (2m,m)/n - that is, a spaceship of\n   any speed that moves obliquely in a (2,1) direction.  The first\n   Conway's Life knightship was a variant of Andrew Wade's {Gemini}\n   spaceship, constructed in May 2010.  The next was an even slower\n   knightship based on the {half-bakery reaction}.\n     A knightship must be asymmetric and its period must be at least 6.\n   This is barely within the range of current {search program}s, as\n   proven by the discovery on March 6, 2018 of an {elementary}\n   knightship, {Sir Robin}, by Adam P. Goucher and Tomas Rokicki.\n     By analogy with the corresponding fairy chess pieces, spaceships of\n   types (3m,m)/n, (3m,2m)/n and (4m,m)/n would presumably be called\n   camelships, zebraships and giraffeships, respectively.  Such\n   spaceships do exist (see {universal constructor}) but small\n   elementary versions are even more difficult to search for.  Any of\n   these ship types could be constructed by trivially modifying a Gemini\n   spaceship, or less trivially by reprogramming one of the more recent\n   small {Geminoid} {construction arm}s, but as of July 2018 a camelship\n   Gemini is the only example that has been explicitly built.\n     Alternatively, the term \"knightship\" is regularly used to refer to\n   any {oblique} spaceship, such as the original {Gemini} or the\n   {waterbear}.\n",
    "grid": []
  },
  {
    "name": "Kok's galaxy",
    "desc": " (p8)  An {oscillator} found by Jan Kok in 1971, currently\n   serving as the icon for {Golly}.  See {converter} for a use of this\n   {sparker}.\n",
    "grid": [
      "111111011",
      "111111011",
      "000000011",
      "110000011",
      "110000011",
      "110000011",
      "110000000",
      "110111111",
      "110111111"
    ]
  },
  {
    "name": "L112",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in July 1996.  It\n   is made up of two {elementary conduit}s, HLx53B +  {BFx59H}.  After\n   112 ticks, it produces a {Herschel} turned 90 degrees\n   counterclockwise at (12, -33) relative to the input.  Its\n   {recovery time} is 61 ticks; this can be reduced slightly by removing\n   the output glider, either with a specialized eater (as in the\n   original {true} p59 gun), or with a {sparker} as in most of the\n   {Quetzal} guns.  It can be made {Spartan} by replacing the\n   {aircraft carrier} with an {eater1}.  A {ghost Herschel} in the\n   pattern below marks the output location:\n",
    "grid": [
      "000000000000000110000000",
      "000000000000000100000000",
      "000000000000011100000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000011000000000",
      "000000000000011000000000",
      "000011000000000000000000",
      "000010010000000000000000",
      "110000110000000000000000",
      "010000000000000000000011",
      "010100000000000000000010",
      "001100000000000000001010",
      "000000000000000000001100",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "001000000000000000000000",
      "001010000000000000000000",
      "001110000000000000000000",
      "000010000000000000000000",
      "000000000000000000000000",
      "000000000000001100000000",
      "000000000000001100110000",
      "000000000000000000101000",
      "000000000000000000001000",
      "000000000000000000001100"
    ]
  },
  {
    "name": "L156",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in August 1996.\n   It is made up of three {elementary conduit}s, HLx69R + {RF28B} +\n   {BFx59H}.  After 156 ticks, it produces a {Herschel} turned 90\n   degrees counterclockwise at (17, -41) relative to the input.  Its\n   {recovery time} is 62 ticks.  It can be made {Spartan} by replacing\n   the {snake} with an {eater1} in one of two orientations.  Additional\n   gliders can be produced by removing the southeasternmost eater, or by\n   replacing the RF28B elementary conduit by an alternate version.  A\n   {ghost Herschel} in the pattern below marks the output location:\n",
    "grid": [
      "00000000000000000001100000000",
      "00000000000000000001000000000",
      "00000000000000000111000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000110000000000",
      "00000000000000000110000000000",
      "00000000000000000000000000000",
      "00000000110100000000000000000",
      "00000000101100000000000000000",
      "00000000000000000000000000110",
      "00000000000000000000000000100",
      "00000000000000000000000010100",
      "00000000000000000000000011000",
      "00000000000000000000000000000",
      "00000000010000000000000000000",
      "00000000011100000000000000000",
      "10000000000010000000000000000",
      "11100000000110000000000000010",
      "00010000000000000000000000101",
      "00110000000000000000000000010",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "01000000000000000000001100000",
      "01010000000000000000001010000",
      "01110000000000000000000010000",
      "00010000000000011000000011000",
      "00000000000000010000000000000",
      "00000000000000001110000000000",
      "00000000000000000010000000000"
    ]
  },
  {
    "name": "lake",
    "desc": " (p1)   Any still life consisting of a simple closed curve made\n   from diagonally connected {domino}es.  The smallest example is the\n   {pond}, and the next smallest is this (to which the term is sometimes\n   restricted):\n",
    "grid": [
      "0000110000",
      "0001001000",
      "0001001000",
      "0110000110",
      "1000000001",
      "1000000001",
      "0110000110",
      "0001001000",
      "0001001000",
      "0000110000"
    ]
  },
  {
    "name": "lane",
    "desc": "  A path traveled by a glider, or less commonly a spaceship such\n   as a loafer.  The lane is centered on the line of symmetry (if any)\n   of the spaceship in question.  If a lane is clear, then the spaceship\n   can travel along it without colliding or interfering with any other\n   objects.\n     Diagonal lanes are often numbered consecutively, in half-diagonals\n   ({hd}).  Occasionally diagonal lane measurements are given in\n   quarter-diagonals ({qd}), in part because diagonally symmetric\n   spaceships have a line of symmetry 1qd away from the lines available\n   for gliders.  It's also convenient that moving a glider forward by\n   100qd (for example) has the same effect as evolving the same glider\n   for 100 ticks.\n",
    "grid": []
  },
  {
    "name": "Laputa",
    "desc": " (p2)  Found by Rich Schroeppel, September 1992.\n",
    "grid": [
      "000110110000",
      "000110100011",
      "000000001001",
      "011111101110",
      "100101000000",
      "110001011000",
      "000011011000"
    ]
  },
  {
    "name": "large prime oscillator",
    "desc": "  Any oscillator with a relatively small\n   {bounding box} whose period is a very large prime.  (If the\n   bounding-box restriction is removed, then eight gliders travelling in\n   a four-{Snark} loop would provide a trivial example for any chosen\n   prime.)  The first such oscillator was built by Gabriel Nivasch in\n   2003.  The current record holder is an oscillator constructed by Adam\n   P. Goucher with a period that is a Mersenne prime with 13,395 digits\n   (2^44497-1).\n     The next higher Mersenne-prime oscillator, period 2^86243-1, could\n   be constructed with {quadri-Snark}s and {semi-Snark}s.  It would\n   actually be significantly smaller than the current record holder.  As\n   of June 2018 the construction of this pattern has not yet been\n   completed.\n",
    "grid": []
  },
  {
    "name": "large S",
    "desc": "  = {big S}\n",
    "grid": []
  },
  {
    "name": "Lidka",
    "desc": " (stabilizes at time 29053)  A {methuselah} found by Andrzej\n   Okrasinski in July 2005.\n",
    "grid": [
      "000000000011100",
      "000000000010000",
      "000000000010001",
      "000000000001001",
      "000000000000111",
      "000000000000000",
      "010000000000000",
      "101000000000000",
      "010000000000000"
    ]
  },
  {
    "name": "Life",
    "desc": "  A 2-dimensional 2-state {cellular automaton} discovered by John\n   Conway in 1970.  The states are referred to as ON and OFF (or live\n   and dead).  The transition rule is as follows: a cell that is ON will\n   remain ON in the next generation if and only if exactly 2 or 3 of the\n   8 adjacent cells are also ON, and a cell that is OFF will turn ON if\n   and only if exactly 3 of the 8 adjacent cells are ON.  (This is more\n   succinctly stated as: \"If 2 of your 8 nearest neighbours are ON,\n   don't change.  If 3 are ON, turn ON.  Otherwise, turn OFF.\")\n",
    "grid": []
  },
  {
    "name": "Life32",
    "desc": "  A freeware Life program by Johan Bontes for Microsoft Windows\n   95/98/ME/NT/2000/XP: {https://github.com/JBontes/Life32/}.\n",
    "grid": []
  },
  {
    "name": "LifeHistory",
    "desc": "  A multistate CA rule supported by {Golly}, equivalent to\n   two-state B3/S23 Life but with several additional states intended for\n   annotation purposes.  A \"history\" state records whether an off cell\n   has ever turned on in the past, and other states allow on and off\n   cells to be permanently or temporarily marked, without affecting the\n   {evolution} of the pattern.\n",
    "grid": []
  },
  {
    "name": "LifeLab",
    "desc": "  A shareware Life program by Andrew Trevorrow for the\n   Macintosh (MacOS 8.6 or later): {http://www.trevorrow.com/lifelab/}.\n",
    "grid": []
  },
  {
    "name": "LifeLine",
    "desc": "  A newsletter edited by Robert Wainwright from 1971 to 1973.\n   During this period it was the main forum for discussions about Life.\n   The newsletter was nominally quarterly, but the actual dates of its\n   eleven issues were as follows:\n",
    "grid": []
  },
  {
    "name": "Lifenthusiast",
    "desc": "  A Life enthusiast.  Term coined by Robert Wainwright.\n",
    "grid": []
  },
  {
    "name": "lifesrc",
    "desc": "  David Bell's Life {search program} for finding new\n   {spaceship}s and {oscillator}s.  This is a C implementation of an\n   algorithm developed by Dean Hickerson in 6502 assembler.\n     Although lifesrc itself is a command-line program, Jason Summers\n   has made a GUI version called {WinLifeSearch} for Microsoft Windows.\n   A Java version, {JavaLifeSearch}, was written in November 2012 by\n   Karel Suhajda.\n     The lifesrc algorithm is only useful for very small periods, as the\n   amount of computing power required rises rapidly with increasing\n   period.  For most purposes, period 7 is the practical limit with\n   current hardware.\n     Lifesrc is available from {http://tip.net.au/~dbell/} (source code\n   only).  Compare {gfind}.\n",
    "grid": []
  },
  {
    "name": "LifeViewer",
    "desc": "  A scriptable Javascript Life pattern viewer written by\n   Chris Rowett, used primarily on the conwaylife.com discussion forums.\n",
    "grid": []
  },
  {
    "name": "light bulb",
    "desc": " (p2)  Found in 1971.\n",
    "grid": [
      "0110100",
      "0101100",
      "0000000",
      "0011100",
      "0100010",
      "0100010",
      "0010100",
      "1010101",
      "1100011"
    ]
  },
  {
    "name": "lightspeed bubble",
    "desc": "  A type of {negative spaceship} travelling through\n   the {zebra stripes} agar.  The center of the bubble is simple empty\n   space, and the length and/or width of the bubble can usually be\n   extended to any desired size.\n     Below is a small stabilized section of agar containing a sample\n   lightspeed bubble, found by Gabriel Nivasch in August 1999.  The\n   bubble travels to the left at the {speed of light}, so it will\n   eventually reach the edge of any finite patch and destroy itself and\n   its supporting agar.\n",
    "grid": [
      "01001001001001001001001001001001001001001001001001001001001000",
      "01111111111111111111111111111111111111111111111111111111111110",
      "00000000000000000000000000000000000000000000000000000000000001",
      "01111111111111001110011100111111111111111111111111111111111110",
      "10000000000000011000110001100000000100000000000000000000000000",
      "01111111111111000110001100010110100001111111111111111111111110",
      "00000000000000000000000000000110000010000000000000000000000001",
      "01111111111111000000000000000001111111111111111111111111111110",
      "10000000000000000000000000000000100000000000000000000000000000",
      "01111111111111000000000000000000011111111111111111111111111110",
      "00000000000000000000000000000000010000100000000000000000000001",
      "01111111111111000000000000000000011000011111111111111111111110",
      "10000000000000000000000000000000010000010000100000000000000000",
      "01111111111111000000000000000000011000011000011111111111111110",
      "00000000000000000000000000000000010000010000010000100000000001",
      "01111111111111000000000000000000011000011000011000011111111110",
      "10000000000000000000000000000000010000010000010000010000100000",
      "01111111111111000000000000000000011000011000011000011000011110",
      "00000000000000000000000000000000010000010000010000010000010001",
      "01111111111111000000000000000000011000011000011000011000011110",
      "10000000000000000000000000000000010000010000010000010000100000",
      "01111111111111000000000000000000011000011000011000011111111110",
      "00000000000000000000000000000000010000010000010000100000000001",
      "01111111111111000000000000000000011000011000011111111111111110",
      "10000000000000000000000000000000010000010000100000000000000000",
      "01111111111111000000000000000000011000011111111111111111111110",
      "00000000000000000000000000000000010000100000000000000000000001",
      "01111111111111000000000000000000011111111111111111111111111110",
      "10000000000000000000000000000000100000000000000000000000000000",
      "01111111111111000000000000000001111111111111111111111111111110",
      "00000000000000000000000000000110000010000000000000000000000001",
      "01111111111111000110001100010110100001111111111111111111111110",
      "10000000000000011000110001100000000100000000000000000000000000",
      "01111111111111001110011100111111111111111111111111111111111110",
      "00000000000000000000000000000000000000000000000000000000000001",
      "01111111111111111111111111111111111111111111111111111111111110",
      "01001001001001001001001001001001001001001001001001001001001000"
    ]
  },
  {
    "name": "lightspeed ribbon",
    "desc": "  = {superstring}\n",
    "grid": []
  },
  {
    "name": "lightspeed telegraph",
    "desc": "  = {telegraph}.\n",
    "grid": []
  },
  {
    "name": "lightspeed wire",
    "desc": "  Any {wick} that can {burn} non-destructively at the\n   speed of light.  Lightspeed wires are a type of {reburnable fuse}.\n   These are potentially useful for various things, but so far the\n   necessary mechanisms are very large and unwieldy.  In October 2002,\n   Jason Summers discovered a lightspeed reaction travelling through an\n   orthogonal chain of beehives.  Summers completed a period-1440\n   lightspeed {telegraph} based on this reaction in 2003.\n",
    "grid": [
      "000100000000000000000000000000000000000000000000000000000000000",
      "010001000000000000000000000000000000000000000000000000000000000",
      "010000100001101100000000000000000000000000000000000000000000000",
      "100000010001111110001100011000110001100011000110001100011000110",
      "100000010010000001010010100101001010010100101001010010100101001",
      "110000010001111110001100011000110001100011000110001100011000110",
      "000000100001101100000000000000000000000000000000000000000000000",
      "000010000000000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "lightweight emulator",
    "desc": "  = {LW emulator}\n",
    "grid": []
  },
  {
    "name": "lightweight spaceship",
    "desc": "  = {LWSS}\n",
    "grid": []
  },
  {
    "name": "lightweight volcano",
    "desc": "  = {toaster}\n",
    "grid": []
  },
  {
    "name": "linear growth",
    "desc": "  A growth rate proportional to T, where T is the number\n   of ticks that a pattern has been run.  Compare {superlinear growth},\n   {quadratic growth}.\n",
    "grid": []
  },
  {
    "name": "linear propagator",
    "desc": "  A self-replicating pattern in which each copy of a\n   pattern produces one child that is an exact copy of itself.  The\n   child pattern then blocks the parent from any further replication.\n   An example was constructed by Dave Greene on 23 November 2013, with a\n   construction arm using two glider lanes separated by {9hd}.  By some\n   definitions, due to its limited one-dimensional growth pattern, the\n   linear propagator is not a true replicator.  Compare\n   {quadratic replicator}.\n",
    "grid": []
  },
  {
    "name": "line crosser",
    "desc": "  A pattern which is able to send a signal across an\n   infinite diagonal line of live cells without destroying the line.\n   David Bell built one in August 2006.  It uses many one-shot period\n   44160 {glider gun}s on both sides of the line having the proper\n   synchronization to create the reactions shown in\n   {line-cutting reaction} and {line-mending reaction}.\n     An input glider can arrive at any multiple of 44160 generations to\n   first cut the line, then send a glider through the gap, and finally\n   mend the line while leaving an output glider on the other side.\n     A line crosser whose complete mechanism is on one side of the line\n   is theoretically possible, using {single-channel} construction\n   methods for example.\n",
    "grid": []
  },
  {
    "name": "line-cutting reaction",
    "desc": "  A reaction that can cut an infinite diagonal\n   line of cells, leaving a gap with both ends sealed.  Such a reaction\n   is demonstrated below.  In actual use the reaction should be spread\n   out so that the incoming {LWSS}es don't conflict.  See\n   {line-mending reaction} for a way to mend the gap.\n",
    "grid": [
      "000000000000000000000000011000000000000000000000000000000000",
      "000000000000110000000000010000000000000000000000000000000000",
      "000000000011011000000000001000000000000000000000000000000000",
      "000000000011110000000000000100000000000000000000000000000000",
      "000000000001100000000000000010000000000000000000000000000000",
      "000000000000000011000000000001000000000000000000000000000000",
      "000000000000000101000000000000100000000000000000000000000000",
      "000000000000000001000000000000010000000000000000000000000000",
      "000000000000000000000000000000001000000000000000000000000000",
      "000000000000000000000000000000000100000000000000000000000000",
      "000000000000000000000000000000000010000000000000000000000000",
      "000000000000000000000000000000000001000000000000000000000000",
      "000000000000000000000001000000000000100000000000000000000000",
      "000000000000000000000011100000000000010000000000000000000000",
      "000000000000000000000010110000000000001000000000000000000000",
      "100100000000000000000001110000000000000100000000000000000000",
      "000010000000000000000001100000000000000010000000000000000000",
      "100010000000000000000000000000000000000001000000000000000000",
      "011110000000000000000000000000000000000000100000000000000000",
      "000000000000000000000000000000000000000000010000000000000000",
      "000000000000000000000000000000000000000000001000000000000000",
      "000000000000000000000000000000000000000000000100000000000000",
      "000000000000000000000000000000000001100000000010000000000000",
      "000000000000000000000000000000000000110000000001000000000000",
      "000000000000000000000000000000000001000000000000100000000000",
      "000000000000000000000000000000000000000000000000010000000000",
      "000000000000000000000000000000000000000000000000001000000000",
      "000000000000000000000000000000000000011100000000000100000000",
      "000000000000000000000000000000000000100100000000000010000000",
      "000000000000000000000000000000000000000100000000000001000000",
      "000000000000000000000000000000000000000100000000000000100000",
      "000000000000000000000000000000000000101000000000000000010000",
      "000000000000000000000000000000000000000000000000000000001000",
      "000000000000000000000000000000000000000000000000000000000101",
      "000000011100000000000000000000000000000000000000000000000011",
      "000000000100000000000011000000111000000000011110000000000000",
      "000000001000000000000101000000001000000000100010000000000000",
      "000000000000000000000001000000010000000000000010000000000000",
      "000000000000000000000000000000000000000000100100000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000011000000",
      "000000000000000000000000000000000000000000000000000001100000",
      "000000000000000000000000000000000000000000000000000010000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000001110",
      "000000000000000000000000000000000000000000000000000000001001",
      "000000000000000000000000000000000000000000000000000000001000",
      "000000000000000000000000000000000000000000000000000000001000",
      "000000000000000000000000000000000000000000000000000000000101",
      "000000000000000000000001100000000000000000000000000000000000",
      "000000000000000000000010100000000000000000000000000000000000",
      "000000000000000000000000100000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000100000000000000000",
      "000000000000000000000000000000000000000001110000000000000000",
      "000000000000000000000000000000000000000001011000000000000000",
      "000000000000000000000000000000000000000000111000000000000000",
      "000000000000000000000000000000000000000000110000000000000000"
    ]
  },
  {
    "name": "line-mending reaction",
    "desc": "  A reaction which can fully mend a sealed gap in\n   an infinite diagonal line of cells, such as the one produced by a\n   {line-cutting reaction}.  Such a reaction is demonstrated below.  See\n   the line cutting reaction for a way of creating the gliders\n   travelling parallel to the line.\n",
    "grid": [
      "0000000000011000000000000000000000000000000000000000000000",
      "0000000000010000000000000000000000000000000000000000000000",
      "0000000000001000000000000000000000000000000000000000000000",
      "0001010000000100000000000000000000000000000000000000000000",
      "0000110000000010000000000000000000000000000000000000000000",
      "0000100000000001000000000000000000000000000000000000000000",
      "0000000000000000100000000000000000000000000000000000100000",
      "0000000000000000010000000000000000000000000000000011000000",
      "0000000000000000001000000000000000000000000000000001100000",
      "0000000000000000000100000000000000000000000000000000000000",
      "0000000000000000000010000000000000000000000000000000000000",
      "0000000000000000000001000000000000000000000101000000000000",
      "0000000000000000000000100000000000000000000110000000000000",
      "0000000000000000000000010000000000000000000010000000000000",
      "0000000000000000000000001000000000000000000000000000000000",
      "0000000000000000000000000100000000000000000000000000000000",
      "0000000000000000000000000010000000000000001000000000000000",
      "0000000000000000000000000001000000000000010000000000000000",
      "0000000000000000000000000000100000000000011100000000000000",
      "0000000000000000000000000000010000000000000000000000000000",
      "0000000000000000000000000000110000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000101000000000000",
      "0000000000000000000000000000000000000000000110000000100100",
      "0000000000000000000000000000000000000000000010000001000000",
      "0000000000000000000000000000000000011100000000000001000100",
      "0000000000000000000000000000000000000100000000000001111000",
      "0000000000000000000000000000000000001000000000000000000000",
      "0000000000000000000000000000000000000001100000000000000000",
      "0000000000000000000000000000000000000001010000000000000000",
      "0000000000000000000000000000000000000000001000000000000000",
      "0000000000000000000000000000000000000000000100000000000000",
      "0000000000000000000000000000000110000000000010000000000000",
      "0000000000000000000000000000001010000000000001000000000000",
      "0000000000000000000000000000000010000000000000100000001100",
      "0000000000000100000000000000000000000000110000010000011000",
      "0000000000000110000000000000000000000000101000001000000100",
      "0000000000001010000011000000000000000000100000000100000000",
      "0000000000000000000101000000000000000000000000000010000000",
      "0100000000000000000001000000000000000000000000000001000000",
      "0110000010000000000000000000000000000000000000000000100000",
      "1010000011000000000000000000000000000000000000000000010000",
      "0000000101000000000000000000000000000000000000000000001000",
      "0000000000000000000000000000000000000000000000000000000101",
      "0000000000000000000000000000000000000000000000000000000011",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000001000000000000000000000000",
      "0000000000000000000000000000000011100000000000000000000000",
      "0000000000000000000000000000000110100000000000000000000000",
      "0000000000000000000000000000000111000000000000000000000000",
      "0000000000000000000000000000000011000000000000000000000000"
    ]
  },
  {
    "name": "line puffer",
    "desc": "  A {puffer} which produces its output by means of an\n   orthogonal line of cells at right angles to the direction of travel.\n   The archetypal line puffer was found by Alan Hensel in March 1994,\n   based on a {spaceship} found earlier that month by Hartmut Holzwart.\n   The following month Holzwart found a way to make {extensible} c/2\n   line puffers, and Hensel found a much smaller stabilization the\n   following day.  But in October 1995 Tim Coe discovered that for large\n   widths these were often unstable, although typically lasting millions\n   of generations.  In May 1996, however, Coe found a way to fix the\n   instability.  The resulting puffers appear to be completely stable\n   and to exhibit an exponential increase in period as a function of\n   width, although neither of these things has been proved.\n     Line puffers have enabled the construction of various difficult\n   periods for c/2 spaceships and puffers, including occasionally\n   periods which are not multiples of 4 and which would therefore be\n   impossible to attain with the usual type of construction based on\n   {standard spaceship}s.  (See {frothing puffer} for another method of\n   constructing such periods.)  In particular, the first c/2 {rake} with\n   period not divisible by 4 was achieved in January 2000 when David\n   Bell constructed a p42 {backrake} by means of line puffers.\n     See also {hivenudger} and {puff suppressor}.\n",
    "grid": []
  },
  {
    "name": "line ship",
    "desc": "  A {spaceship} in which the front end is a {linestretcher},\n   the line being eaten by the back end.\n",
    "grid": []
  },
  {
    "name": "linestretcher",
    "desc": "  A {wickstretcher} that stretches a single diagonal line\n   of cells.  The first example was constructed by Jason Summers in\n   March 1999; this was c/12 and used {switch engine} based puffers\n   found earlier by Dean Hickerson.  The first c/4 example was found by\n   Hartmut Holzwart in November 2004.\n",
    "grid": []
  },
  {
    "name": "loading dock",
    "desc": " (p3)  Found by Dave Buckingham, September 1972.\n",
    "grid": [
      "000010000",
      "001110000",
      "010001100",
      "101100010",
      "010001101",
      "001100010",
      "000011100",
      "000010000"
    ]
  },
  {
    "name": "loaf",
    "desc": " (p1)\n",
    "grid": [
      "0110",
      "1001",
      "0101",
      "0010"
    ]
  },
  {
    "name": "loafer",
    "desc": " (c/7 orthogonally, p7)  A small {c/7 spaceship} discovered by\n   Josh Ball on 17 February 2013:\n",
    "grid": [
      "011001011",
      "100100110",
      "010100000",
      "001000000",
      "000000001",
      "000000111",
      "000001000",
      "000000100",
      "000000011"
    ]
  },
  {
    "name": "loaflipflop",
    "desc": " (p15)  Here four {pentadecathlon}s {hassle} a {loaf}.\n   Found by Robert Wainwright in 1990.\n",
    "grid": [
      "0000000000000000100000000000000000",
      "0000000000000001110000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000001110000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000001010000000000000000",
      "0000000000000001010000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000001110000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000001110000000000000000",
      "0000000000000000100000000000000000",
      "0000000000000000000000000000000000",
      "0100101101001000000000000000110000",
      "1100100001001100011000000010000100",
      "0100101101001000100100000100000010",
      "0000000000000000101000001000000001",
      "0000000000000000010000001000000001",
      "0000000000000000000000001000000001",
      "0000000000000000000000000100000010",
      "0000000000000000000000000010000100",
      "0000000000000000000000000000110000",
      "0000000000000000001110000000000000",
      "0000000000000000010001000000000000",
      "0000000000000000100000100000000000",
      "0000000000000000000000000000000000",
      "0000000000000001000000010000000000",
      "0000000000000001000000010000000000",
      "0000000000000000000000000000000000",
      "0000000000000000100000100000000000",
      "0000000000000000010001000000000000",
      "0000000000000000001110000000000000"
    ]
  },
  {
    "name": "loaf on loaf",
    "desc": "  = {bi-loaf}\n",
    "grid": []
  },
  {
    "name": "loaf pull",
    "desc": "  The following glider/loaf collision, which pulls a loaf\n   (3,1) toward the glider source:\n",
    "grid": [
      "0100000",
      "1010000",
      "1001000",
      "0110000",
      "0000000",
      "0000000",
      "0000111",
      "0000100",
      "0000010"
    ]
  },
  {
    "name": "loaf siamese barge",
    "desc": " (p1)\n",
    "grid": [
      "00110",
      "01001",
      "10101",
      "01010",
      "00100"
    ]
  },
  {
    "name": "lobster",
    "desc": " (c/7 diagonally, p7)  A spaceship discovered by Matthias\n   Merzenich in August 2011, the first diagonally travelling\n   {c/7 spaceship} to be found. It consists of two {glider}s pulling a\n   {tagalong} that then rephases them.\n",
    "grid": [
      "00000000000011100000000000",
      "00000000000010000000000000",
      "00000000000001001100000000",
      "00000000000000001100000000",
      "00000000000011000000000000",
      "00000000000001100000000000",
      "00000000000010010000000000",
      "00000000000000000000000000",
      "00000000000000100100000000",
      "00000000000000100010000000",
      "00000000000000011101000000",
      "00000000000000000000100000",
      "11001010000000000000100000",
      "10101100000000000001000000",
      "10000100110000000000000110",
      "00000010001000000110011001",
      "00110000001000000100100000",
      "00110000101000011000000000",
      "00000000010000010001000100",
      "00000000001001000011000000",
      "00000000000110001000001010",
      "00000000000000010000000011",
      "00000000000000010000100000",
      "00000000000000100010000000",
      "00000000000000100000110000",
      "00000000000000010000010000"
    ]
  },
  {
    "name": "logarithmic growth",
    "desc": "  A pattern whose {population} or {bounding box}\n   grows no faster than logarithmically, asymptotic to n.log(t) for some\n   constant n.  The first such pattern constructed was the\n   {caber tosser} whose population is logarithmic, but whose bounding\n   box still grows linearly.  The first pattern whose bounding box and\n   population both grow logarithmically was constructed by Jason Summers\n   with Gabriel Nivasch in 2003.  For a pattern with a slower growth\n   rate than this, see {Osqrtlogt}.\n",
    "grid": []
  },
  {
    "name": "LoM",
    "desc": "  = {lumps of muck}\n",
    "grid": []
  },
  {
    "name": "lone dot agar",
    "desc": "  An {agar} in which every live cell is isolated in every\n   generation.  There are many different lone dot agars.  All of them\n   are {phoenix}es.  In 1995 Dean Hickerson and Alan W. Hensel found\n   stabilizations for finite patches of ten lone dot agars to create\n   period 2 oscillators.  One of these is shown below:\n",
    "grid": [
      "00001100110011001100110011001100110000",
      "00001001010010010100100101001001010000",
      "00000100000001000000010000000100000000",
      "00000000100000001000000010000000100000",
      "11001010000010100000101000001010000011",
      "10100000101000001010000010100000101001",
      "00001000000010000000100000001000000010",
      "01000000010000000100000001000000010000",
      "10010100000101000001010000010100000101",
      "11000001010000010100000101000001010011",
      "00000100000001000000010000000100000000",
      "00000000100000001000000010000000100000",
      "11001010000010100000101000001010000011",
      "10100000101000001010000010100000101001",
      "00001000000010000000100000001000000010",
      "01000000010000000100000001000000010000",
      "10010100000101000001010000010100000101",
      "11000001010000010100000101000001010011",
      "00000100000001000000010000000100000000",
      "00000000100000001000000010000000100000",
      "11001010000010100000101000001010000011",
      "10100000101000001010000010100000101001",
      "00001000000010000000100000001000000010",
      "01000000010000000100000001000000010000",
      "10010100000101000001010000010100000101",
      "11000001010000010100000101000001010011",
      "00000100000001000000010000000100000000",
      "00000000100000001000000010000000100000",
      "11001010000010100000101000001010000011",
      "10100000101000001010000010100000101001",
      "00001000000010000000100000001000000010",
      "01000000010000000100000001000000010000",
      "10010100000101000001010000010100000101",
      "11000001010000010100000101000001010011",
      "00000100000001000000010000000100000000",
      "00000000100000001000000010000000100000",
      "00001010010010100100101001001010010000",
      "00001100110011001100110011001100110000"
    ]
  },
  {
    "name": "lonely bee",
    "desc": "  = {worker bee}\n",
    "grid": []
  },
  {
    "name": "long",
    "desc": "  A term applied to an object that is of the same basic form as\n   some standard object, but longer.  For examples see {long barge},\n   {long boat}, {long bookend}, {long canoe}, {long shillelagh},\n   {long ship} and {long snake}.\n",
    "grid": []
  },
  {
    "name": "long^3",
    "desc": "  The next degree of longness after {long long}.  Some people\n   prefer \"extra long\".\n",
    "grid": []
  },
  {
    "name": "long^4",
    "desc": "  The next degree of longness after {long^3}.  Some people\n   prefer \"extra extra long\".\n",
    "grid": []
  },
  {
    "name": "long barge",
    "desc": " (p1)\n",
    "grid": [
      "01000",
      "10100",
      "01010",
      "00101",
      "00010"
    ]
  },
  {
    "name": "long boat",
    "desc": " (p1)\n",
    "grid": [
      "0100",
      "1010",
      "0101",
      "0011"
    ]
  },
  {
    "name": "long bookend",
    "desc": "  The following {induction coil}, longer than a {bookend}.\n",
    "grid": [
      "00011",
      "10001",
      "11110"
    ]
  },
  {
    "name": "long canoe",
    "desc": " (p1)\n",
    "grid": [
      "000011",
      "000001",
      "000010",
      "000100",
      "101000",
      "110000"
    ]
  },
  {
    "name": "long hat",
    "desc": "  = {loop}\n",
    "grid": []
  },
  {
    "name": "long hook",
    "desc": "  = {long bookend}\n",
    "grid": []
  },
  {
    "name": "long house",
    "desc": "  = {dock}\n",
    "grid": []
  },
  {
    "name": "long integral",
    "desc": " (p1)\n",
    "grid": [
      "0011",
      "0101",
      "0100",
      "0010",
      "1010",
      "1100"
    ]
  },
  {
    "name": "long long",
    "desc": "  The next degree of longness after {long}.  Some people\n   prefer \"very long\".\n",
    "grid": []
  },
  {
    "name": "long long barge",
    "desc": " (p1)\n",
    "grid": [
      "010000",
      "101000",
      "010100",
      "001010",
      "000101",
      "000010"
    ]
  },
  {
    "name": "long long boat",
    "desc": " (p1)\n",
    "grid": [
      "01000",
      "10100",
      "01010",
      "00101",
      "00011"
    ]
  },
  {
    "name": "long long canoe",
    "desc": " (p1)\n",
    "grid": [
      "0000011",
      "0000001",
      "0000010",
      "0000100",
      "0001000",
      "1010000",
      "1100000"
    ]
  },
  {
    "name": "long long ship",
    "desc": " (p1)\n",
    "grid": [
      "11000",
      "10100",
      "01010",
      "00101",
      "00011"
    ]
  },
  {
    "name": "long long snake",
    "desc": " (p1)\n",
    "grid": [
      "110000",
      "101000",
      "000101",
      "000011"
    ]
  },
  {
    "name": "long shillelagh",
    "desc": " (p1)\n",
    "grid": [
      "110011",
      "100101",
      "011000"
    ]
  },
  {
    "name": "long ship",
    "desc": " (p1)\n",
    "grid": [
      "1100",
      "1010",
      "0101",
      "0011"
    ]
  },
  {
    "name": "long sinking ship",
    "desc": "  = {long canoe}\n",
    "grid": []
  },
  {
    "name": "long snake",
    "desc": " (p1)\n",
    "grid": [
      "11000",
      "10101",
      "00011"
    ]
  },
  {
    "name": "loop",
    "desc": " (p1)\n",
    "grid": [
      "01100",
      "10010",
      "01010",
      "11011"
    ]
  },
  {
    "name": "looping spaceship",
    "desc": "  = {reflectorless rotating oscillator}\n",
    "grid": []
  },
  {
    "name": "lossless elbow",
    "desc": "  A stationary {elbow} in a {construction arm} {toolkit}\n   that allows a {recipe} to turn a corner with no exponential increase\n   in construction cost.  Compare {slow elbow}.  It is theoretically\n   possible to construct lossless elbows for early construction arms\n   such as the one in the {10hd Demonoid}, but these would currently\n   have to be very large.\n     The lossless elbow that has been used the most in practice is the\n   {Snark}, which can be constructed directly on a {single-channel}\n   {construction lane} using a {Snarkmaker} {recipe}.  Controlled\n   demolition of a Snark is also possible, to remove a temporary elbow\n   that is no longer needed, and leave a {hand} target in its place if\n   necessary for further construction.\n     A {Silver reflector} was used as a lossless elbow in the first\n   {spiral growth} pattern, attached to a separate\n   {universal constructor} component.\n",
    "grid": []
  },
  {
    "name": "low-density Life",
    "desc": "  = {sparse Life}\n",
    "grid": []
  },
  {
    "name": "lumps of muck",
    "desc": "  The common evolutionary sequence that ends in the\n   {blockade}.  The name is sometimes used of the blockade itself, and\n   can in general be used of any stage of the evolution of the\n   {stairstep hexomino}.\n",
    "grid": []
  },
  {
    "name": "LW emulator",
    "desc": " (p4)  The smallest (and least useful) {emulator}, found by\n   Robert Wainwright in June 1980.\n",
    "grid": [
      "00110100101100",
      "00100000000100",
      "00011000011000",
      "11100111100111",
      "10010000001001",
      "01100000000110"
    ]
  },
  {
    "name": "LWSS",
    "desc": " (c/2 orthogonally, p4)  A lightweight spaceship, the smallest\n   known orthogonally moving {spaceship}, and the second most common\n   (after the {glider}).  Found by Conway when one formed from a random\n   soup in 1970.  See also {MWSS} and {HWSS}.\n",
    "grid": [
      "01001",
      "10000",
      "10001",
      "11110"
    ]
  },
  {
    "name": "LWSS emulator",
    "desc": "  = {LW emulator}\n",
    "grid": []
  },
  {
    "name": "LWSS-glider bounce",
    "desc": "  The following reaction in which a {LWSS} and a\n   {glider} collide to form a glider heading back between the two input\n   paths:\n",
    "grid": [
      "0111100000000",
      "1000100000000",
      "0000100000111",
      "1001000000100",
      "0000000000010"
    ]
  },
  {
    "name": "LWSS-LWSS bounce",
    "desc": "  The following {symmetric} reaction in which two\n   {LWSS}s collide head-on to form two {glider}s heading apart at 90\n   degrees from each other.  Compare {LWSS-LWSS deflection}.\n",
    "grid": [
      "100100000001001",
      "000010000010000",
      "100010000010001",
      "011110000011110"
    ]
  },
  {
    "name": "LWSS-LWSS deflection",
    "desc": "  The following symmetric reaction in which two\n   LWSSs collide nearly head-on to form two gliders heading apart at 180\n   degrees from each other.  Compare {LWSS-LWSS bounce}.\n",
    "grid": [
      "0000000001001",
      "0000000010000",
      "0000000010001",
      "0000000011110",
      "0000000000000",
      "0111100000000",
      "1000100000000",
      "0000100000000",
      "1001000000000"
    ]
  },
  {
    "name": "LWSS-to-G",
    "desc": "  See {135-degree MWSS-to-G}.\n",
    "grid": []
  },
  {
    "name": "LWTDS",
    "desc": "  Life Worker Time Deficiency Syndrome.  Term coined by Dieter\n   Leithner to describe the problem of having to divide scarce time\n   between Life and real life.\n",
    "grid": []
  },
  {
    "name": "LW volcano",
    "desc": "  = {toaster}\n",
    "grid": []
  },
  {
    "name": "Lx200",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Paul Callahan in June 1997.  It is\n   made up of two {elementary conduit}s, HL141B + {BFx59H}. The Lx200\n   and {F166} conduits are the two original {dependent conduit}s\n   (several more have since been discovered.)  After 200 ticks, it\n   produces an inverted {Herschel} turned 90 degrees counterclockwise at\n   (17, -40) relative to the input.  Its {recovery time} is 90 ticks.\n   It can be made {Spartan} by replacing the {snake}s with {eater1}s in\n   one of two orientations. A {ghost Herschel} in the pattern below\n   marks the output location:\n",
    "grid": [
      "000000000000000000000110000000000000",
      "000000000000000000000010000000000000",
      "000000000000000000000011100000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000001100000000000",
      "000000000000000000000001100000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000101100",
      "000000000000000000000000000000110100",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000001011000000000000000000",
      "000000000000001101000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000001100",
      "000000000000000000000000000000001010",
      "011000000000000000000000000000000010",
      "111011000000000000000000000000000011",
      "011011101100000000000000000000000000",
      "111011001100000000000000000000000000",
      "110000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000001100",
      "000000000000000000000000000000001100",
      "000000000000000000000000000000000000",
      "000000110000000000000000000000000000",
      "000000010000000000000000000000000000",
      "000011100000000000000000000000001100",
      "000010000000000000000000000000001100",
      "000000000000000000110000000000000000",
      "000000000000000001010000000000000000",
      "000000000000000001000000000000000000",
      "000000000000000011000000001100000000",
      "000000000000000000000000001000000000",
      "000000000000000000000000000111000000",
      "000000000000000000000000000001000000"
    ]
  },
  {
    "name": "macrocell",
    "desc": "  A format used by {Golly} and its {hashlife} algorithm,\n   capable of storing repetitive patterns very efficiently, even if they\n   contain a large number of cells.  For example, a filled square 2^167\n   cells on a side can be stored in less than three kilobytes in\n   macrocell format, or about 800 bytes in compressed macrocell format.\n   The square's total population is over a googol, 10^100; the number of\n   atoms in the observable universe is only about 10^80.\n     This high level of compression is obtained by defining a tree\n   structure composed of increasingly large cell \"tiles\" with\n   power-of-two dimensions.  Tile definitions of any size are re-used\n   whenever they appear multiple times in a large pattern (at the same\n   power-of-two offset).  For example, the following is a macrocell\n   encoding of a complex {pseudo still life} arrangement of {ship}s,\n   with a total population over 2500 cells:\n",
    "grid": []
  },
  {
    "name": "macro-spaceship",
    "desc": "  A {self-constructing} or {self-supporting}\n   {spaceship}, such as the {Caterpillar}, {Centipede},\n   {half-baked knightship}, {waterbear}, {Demonoid}, {Orthogonoid}, and\n   {Caterloopillar}.  Engineered spaceships of these types tend to be\n   much larger and more complex than {elementary} spaceships.\n",
    "grid": []
  },
  {
    "name": "mango",
    "desc": " (p1)  A relatively rare 180-degree rotationally {symmetric}\n   8-{bit} {still life}. The {acorn} produces a mango as part of its\n   {ash}.\n",
    "grid": [
      "01100",
      "10010",
      "01001",
      "00110"
    ]
  },
  {
    "name": "mathematician",
    "desc": " (p5)  Found by Dave Buckingham, 1972.\n",
    "grid": [
      "000010000",
      "000101000",
      "000101000",
      "001101100",
      "100000001",
      "111000111",
      "000000000",
      "111111111",
      "100000001",
      "000111100",
      "000100110"
    ]
  },
  {
    "name": "Max",
    "desc": "  A name for the smallest known {spacefiller}.  The name represents\n   the fact that the growth rate is the fastest possible.  (This has not\n   quite been proved, however.  There remains the possibility, albeit\n   not very likely, that a periodic {agar} could have an average\n   {density} greater than 1/2, and a spacefiller stretching such an agar\n   at the same speed as the known spacefillers would have a faster\n   average growth rate.)\n",
    "grid": []
  },
  {
    "name": "mazing",
    "desc": " (p4)  In terms of its minimum {population} of 12 this ties with\n   {mold} as the smallest p4 {oscillator}.  Found by Dave Buckingham in\n   December 1973.  For some constructions using mazings, see {popover}\n   and {sixty-nine}.\n",
    "grid": [
      "0001100",
      "0101000",
      "1000001",
      "0100011",
      "0000000",
      "0001010",
      "0000100"
    ]
  },
  {
    "name": "mc",
    "desc": "  = {macrocell}\n",
    "grid": []
  },
  {
    "name": "medium fish",
    "desc": "  = {MWSS}\n",
    "grid": []
  },
  {
    "name": "megacell",
    "desc": "  = {p1 megacell}.\n",
    "grid": []
  },
  {
    "name": "memory cell",
    "desc": "  A type of information storage {circuit} useful in many\n   patterns that perform complex logical operations.  Most commonly a\n   memory cell can store a single bit of information.  See for example\n   {demultiplexer}, {honey bit}, and {boat-bit}.  Depending on the\n   application, the circuit may be a {toggle circuit} or a\n   {permanent switch}, or it may be possible to send one or more signals\n   to set the circuit to a \"1\" state, as can be done with a {keeper}\n   mechanism.  In that case a different input signal must be used to\n   test the current state, usually with a {destructive read} reaction.\n     A more complicated example can be found in the {Osqrtlogt} pattern,\n   which destructively reads a growing 2-dimensional array of minimal\n   memory cells.  Each memory cell may either contain a {boat} (below\n   left) or empty space (below right), with no permanent circuitry\n   anywhere near:\n",
    "grid": [
      "0000000000000001100000000000000000000000011",
      "0000000000000001100000000000000000000000011",
      "0000000000000000000000000000000000000000000",
      "0000000000010000000000000000000000000000000",
      "0000000000101000000000000000000000000000000",
      "0000000000011000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000001100000000000000000000000011000000000",
      "0000010010000000000000000000000100100000000",
      "0000001100000000000000000000000011000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0110000000000000000000000001100000000000000",
      "1001000000000000000000000010010000000000000",
      "0110000001110000000000000001100000011100000",
      "0000000001000000000000000000000000010000000",
      "0000000000100000000000000000000000001000000"
    ]
  },
  {
    "name": "Merzenich's p11",
    "desc": " (p11)  Found by Matthias Merzenich in December 2010.\n",
    "grid": [
      "000000000001100000000",
      "000000000000100000000",
      "000000000000101000000",
      "000000000011010100000",
      "000000000101010100000",
      "000000001010010011000",
      "000000010000010000100",
      "000000100000001111000",
      "000001000000000000111",
      "000010000010000011001",
      "000101000101000101000",
      "100110000010000010000",
      "111000000000000100000",
      "000111100000001000000",
      "001000010000010000000",
      "000110010010100000000",
      "000001010101000000000",
      "000001010110000000000",
      "000000101000000000000",
      "000000001000000000000",
      "000000001100000000000"
    ]
  },
  {
    "name": "Merzenich's p18",
    "desc": " (p18)  Found by Matthias Merzenich in June 2011.\n",
    "grid": [
      "00011000000000000",
      "00001000000000000",
      "00101011000000000",
      "01010101000110000",
      "01010000000010000",
      "11010000000010110",
      "00010110000110100",
      "00010000000000100",
      "11010100000111011",
      "10010101001001010",
      "00100101111010010",
      "00011010000110100",
      "00000010010001000",
      "00000010101110000",
      "00000001101000000"
    ]
  },
  {
    "name": "metacatacryst",
    "desc": "  A 52-cell pattern exhibiting quadratic growth.  Found\n   by Nick Gotts, December 2000.  This was for some time the smallest\n   known pattern (in terms of initial population) with superlinear\n   growth.  See {switch-engine ping-pong} for the lowest-population\n   {superlinear growth} pattern as of July 2018, along with a list of\n   the record-holders.\n",
    "grid": []
  },
  {
    "name": "metacell",
    "desc": "  CA logic circuitry that emulates the behavior of a single\n   cell. The circuitry is hard-wired to emulate a particular CA rule,\n   but changing the rule is usually a matter of making simple\n   adjustments. Known examples include David Bell's original 500x500\n   {unit Life cell}, Jared Prince's {Deep Cell}, Brice Due's\n   {OTCA metapixel}, and Adam P. Goucher's {megacell}.\n",
    "grid": []
  },
  {
    "name": "metamorphosis",
    "desc": "  An {oscillator} built by Robert Wainwright that uses\n   the following reaction (found by Bill Gosper) to turn {glider}s into\n   {LWSS}, and converts these LWSS back into gliders by colliding them\n   head on using an {LWSS-LWSS bounce}.  There are two ways to do the\n   following reaction, because the {twin bees shuttle spark} is\n   {symmetric}.\n",
    "grid": [
      "00000000000000000001000000000",
      "00000000000000000000100000000",
      "00000000000000000011100000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000010001000001011000",
      "11000000000100000100001010100",
      "11000000000100000000010000100",
      "00000000000110001000001010100",
      "00000000000001110000001011000",
      "00000000000000000000000000000",
      "00000000000001110000000000000",
      "00000000000110001000000000000",
      "11000000000100000000000000011",
      "11000000000100000100000000011",
      "00000000000010001000000000000"
    ]
  },
  {
    "name": "metamorphosis II",
    "desc": "  An oscillator built by Robert Wainwright in December\n   1994 based on the following p30 {glider}-to-{LWSS} {converter} using\n   a {queen bee shuttle pair}.  This converter was first found by Paul\n   Rendell, January 1986 or earlier, but wasn't widely known about until\n   Paul Callahan rediscovered it in December 1994.\n",
    "grid": [
      "000000000000000000000010",
      "000000000000000000000100",
      "000000000000000000000111",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000101000000000000",
      "000000000100100000000000",
      "110000000000110000000000",
      "110000000010001100000000",
      "000001100000110000000000",
      "000010000100100000000000",
      "000000000101000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000010000000",
      "000000000000000111000000",
      "000000000000001111100000",
      "000000000000010101010000",
      "000000000000011000110000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000010000000",
      "000000000000000101000000",
      "000000000000000101000000",
      "000000000000000010000000",
      "000000000000000110000000",
      "000000000000000110000000",
      "000000000000000110000000"
    ]
  },
  {
    "name": "metapixel",
    "desc": "  See {metacell}, {OTCA metapixel}.\n",
    "grid": []
  },
  {
    "name": "methuselah",
    "desc": "  Any small pattern that stabilizes only after a long time.\n   Term coined by Conway.  Examples include {rabbits}, {acorn}, the\n   {R-pentomino}, {blom}, {Iwona}, {Justyna} and {Lidka}.  See also\n   {ark}.\n",
    "grid": []
  },
  {
    "name": "Mickey Mouse",
    "desc": " (p1)  The following {still life}, named by Mark Niemiec:\n",
    "grid": [
      "0110000110",
      "1001001001",
      "1001111001",
      "0110000110",
      "0001111000",
      "0001001000",
      "0000110000"
    ]
  },
  {
    "name": "middleweight emulator",
    "desc": "  = {MW emulator}\n",
    "grid": []
  },
  {
    "name": "middleweight spaceship",
    "desc": "  = {MWSS}\n",
    "grid": []
  },
  {
    "name": "middleweight volcano",
    "desc": "  = {MW volcano}\n",
    "grid": []
  },
  {
    "name": "mini pressure cooker",
    "desc": " (p3)  Found by Robert Wainwright before June\n   1972.  Compare {pressure cooker}.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00001010000",
      "00011011000",
      "10100000101",
      "11010101011",
      "00010001000",
      "00010101000",
      "00001010000",
      "00000100000"
    ]
  },
  {
    "name": "M.I.P. value",
    "desc": "  The maximum {population} divided by the initial\n   population for an unstable pattern.  For example, the {R-pentomino}\n   has an M.I.P. value of 63.8, since its maximum population is 319.\n   The term is no longer in use.\n",
    "grid": []
  },
  {
    "name": "MIT oscillator",
    "desc": "  = {cuphook}\n",
    "grid": []
  },
  {
    "name": "MMM breeder",
    "desc": "  See {breeder}.\n",
    "grid": []
  },
  {
    "name": "MMS breeder",
    "desc": "  See {breeder}.\n",
    "grid": []
  },
  {
    "name": "mod",
    "desc": "  The smallest number of generations it takes for an {oscillator}\n   or {spaceship} to reappear in its original form, possibly subject to\n   some rotation or reflection.  The mod may be equal to the {period},\n   but it may also be a quarter of the period (for oscillators that\n   rotate 90 degrees every quarter period) or half the period (for other\n   oscillators which rotate 180 degrees every half period, and also for\n   {flipper}s).\n",
    "grid": []
  },
  {
    "name": "mold",
    "desc": " (p4)  Found by Achim Flammenkamp in 1988, but not widely known\n   until Dean Hickerson rediscovered it (and named it) in August 1989.\n   Compare with {jam}.  In terms of its minimum {population} of 12 it\n   ties with {mazing} as the smallest p4 {oscillator}.  But in terms of\n   its 6x6 {bounding box} it wins outright.  In fact, of all oscillators\n   that fit in a 6x7 box it is the only one with {period} greater than\n   2.\n",
    "grid": [
      "000110",
      "001001",
      "100101",
      "000010",
      "101100",
      "010000"
    ]
  },
  {
    "name": "monochromatic salvo",
    "desc": "  A {slow salvo} that uses gliders of only one\n   colour.  For example, the slow salvos generated by\n   {half-baked knightship}s are monochromatic, because they are\n   generated by a single type of reaction which can happen at any\n   position along a diagonal line.  The smallest possible step size is\n   one {full diagonal} (1fd), which is two {half diagonal}s (2hd), which\n   means that any single glider-producing reaction can only reach half\n   of the available glider {lane}s.  See {colour of a glider}.\n",
    "grid": []
  },
  {
    "name": "monogram",
    "desc": " (p4)  Found by Dean Hickerson, August 1989.\n",
    "grid": [
      "1100011",
      "0101010",
      "0110110",
      "0101010",
      "1100011"
    ]
  },
  {
    "name": "monoparity salvo",
    "desc": "  A {slow salvo} that uses gliders of only one\n   {parity}.  Compare {monochromatic salvo}.\n",
    "grid": []
  },
  {
    "name": "Moore neighbourhood",
    "desc": "  The set of all cells that are orthogonally or\n   diagonally adjacent to a cell or group of cells.  The Moore\n   neighbourhood of a cell can be thought of as the points at a\n   Chebyshev distance of 1 from that cell.  Compare\n   {von Neumann neighbourhood}.  The Conway's Life rule is based on the\n   Moore neighborhood, as are all the \"Life-like\" rules and many other\n   commonly investigated rule families.\n     Cell neighbourhoods can also be defined with a higher range. The\n   Moore neighbourhood of range n can be defined recursively as the\n   Moore neighbourhood of the Moore neighbourhood of range n-1.  For\n   example, the Moore neighbourhood of range 2 includes all cells that\n   are orthogonally or diagonally adjacent to the standard Moore\n   neighbourhood.\n",
    "grid": []
  },
  {
    "name": "moose antlers",
    "desc": " (p1)\n",
    "grid": [
      "110000011",
      "100000001",
      "011101110",
      "000101000",
      "000010000"
    ]
  },
  {
    "name": "mosquito",
    "desc": "  See {mosquito1}, {mosquito2}. {mosquito3}, {mosquito4} and\n   {mosquito5}.\n",
    "grid": []
  },
  {
    "name": "mosquito1",
    "desc": "  A {breeder} constructed by Nick Gotts in September 1998.\n   The original version had an initial population of 103, which was then\n   the smallest for any known pattern with superlinear growth (beating\n   the record previously held by {Jaws}).  This was reduced to 97 by\n   Stephen Silver the following month, but was then almost immediately\n   superseded by {mosquito2}.\n     Mosquito1 consists of the classic {puffer train} plus four {LWSS}\n   and four {MWSS} (mostly in {predecessor} form, to keep the population\n   down).  Once it gets going it produces a new block-laying\n   {switch engine} (plus a lot of junk) every 280 generations.  It is\n   therefore an MMS breeder, albeit a messy one.\n",
    "grid": []
  },
  {
    "name": "mosquito2",
    "desc": "  A {breeder} constructed by Nick Gotts in October 1998. Its\n   initial population of 85 was for a couple of hours the smallest for\n   any known pattern with superlinear growth, but was then beaten by\n   {mosquito3}.\n     Mosquito2 is very like {mosquito1}, but uses two fewer {MWSS} and\n   one more {LWSS}.\n",
    "grid": []
  },
  {
    "name": "mosquito3",
    "desc": "  A {breeder} constructed by Nick Gotts in October 1998. Its\n   initial population of 75 was at the time the smallest for any known\n   pattern with superlinear growth, but was beaten a few days later by\n   {mosquito4}.\n     Mosquito3 has one less {LWSS} than {mosquito2}.  It is somewhat\n   different from the earlier mosquitoes in that the {switch engine}s it\n   makes are glider-producing rather than block-laying.\n",
    "grid": []
  },
  {
    "name": "mosquito4",
    "desc": "  A slightly improved version of {mosquito3} which Stephen\n   Silver produced in October 1998 making use of another discovery of\n   Nick Gotts (September 1997): an 8-cell pattern that evolves into a\n   {LWSS} plus some junk.  Mosquito4 is a {breeder} with an initial\n   population of 73, at the time the smallest for any known pattern with\n   superlinear growth, but superseded a few days later by {mosquito5}.\n",
    "grid": []
  },
  {
    "name": "mosquito5",
    "desc": "  A slightly improved version of {mosquito4} which Nick Gotts\n   produced in October 1998.  The improvement is of a similar nature to\n   the improvement of mosquito4 over mosquito3.  Mosquito5 is a\n   {breeder} with an initial population of 71.  This was the smallest\n   population for any known pattern with superlinear growth until it was\n   superseded by {teeth}.  See {switch-engine ping-pong} for the\n   smallest such pattern as of July 2018, along with a list of the\n   record-holders.\n",
    "grid": []
  },
  {
    "name": "mould",
    "desc": "  = {mold}\n",
    "grid": []
  },
  {
    "name": "moving sawtooth",
    "desc": "  A {sawtooth} such that no cell is ON for more than a\n   finite number generations.  David Bell constructed the first pattern\n   of this type, with a c/2 front end and a c/3 back end.  The front end\n   is a {blinker puffer}.  The back end ignites the {blinker fuse}.\n     The smallest currently known moving sawtooth was constructed in\n   April 2011 by a conwaylife.com forum user with the handle\n   'cloudy197'.  The c/2 front end is a {bi-block puffer}.  The 2c/5\n   back end ignites the {bi-block fuse}.\n",
    "grid": []
  },
  {
    "name": "MSM breeder",
    "desc": "  See {breeder}.\n",
    "grid": []
  },
  {
    "name": "multiple roteightors",
    "desc": " (p8)  An {extensible} oscillator family\n   consisting of one or more {roteightor} rotors, discovered by Dean\n   Hickerson in 1990.\n",
    "grid": [
      "00000000000000000000100000000000",
      "00000000110000000011100000000000",
      "00000000010000000100000000000000",
      "00000000010100000110000000000000",
      "00000000001100000000000001000000",
      "00000000000000000000000111000000",
      "00001100000000111000001000000000",
      "00000100000001001000000100000000",
      "00000101000000001001000100000010",
      "00000011001000010010000000001110",
      "00000000010000000010010000010000",
      "11000000010010000011100000011000",
      "01000000011100000000000000000000",
      "01010000000000000000000000000000",
      "00110000000000000000000011100000",
      "00000000000000011100000100100000",
      "00000011100000100100000000100000",
      "00000100100000000100100001001100",
      "00000000100100001001000000001010",
      "00010001001000000001001000000010",
      "00010000001001000001110000000011",
      "00001000001110000000000000000000",
      "01110000000000000000000011000000",
      "01000000000000000000000010100000",
      "00000000110000001110000000100000",
      "00000000010000010010000000110000",
      "00000011100000000010000000000000",
      "00000010000001000100110000000000",
      "00000000000001000000101000000000",
      "00000000000000100000001000000000",
      "00000000000111000000001100000000",
      "00000000000100000000000000000000"
    ]
  },
  {
    "name": "multiplicity",
    "desc": "  In a {reflectorless rotating oscillator}, the maximum\n   number n of independent patterns that can orbit a single point, in a\n   way that reduces the period of the combined oscillator by a factor of\n   n.\n",
    "grid": []
  },
  {
    "name": "multi-state Life",
    "desc": "  = {colourised Life}\n",
    "grid": []
  },
  {
    "name": "multum in parvo",
    "desc": " (stabilizes at time 3933)  A {methuselah} found by\n   Charles Corderman, but not as long-lasting as his {acorn}.\n",
    "grid": [
      "000111",
      "001001",
      "010000",
      "100000"
    ]
  },
  {
    "name": "muttering moat",
    "desc": "  Any {oscillator} whose {rotor} consists of a closed\n   chain of cells each of which is adjacent to exactly two other rotor\n   cells.  Compare {babbling brook}.  Examples include the {bipole}, the\n   {blinker}, the {clock}, the {cuphook}, the {Gray counter}, the\n   {quad}, the {scrubber}, the {skewed quad} and the p2 {snake pit}. The\n   following diagram shows a p2 example (by Dean Hickerson, May 1993)\n   with a larger rotor.  See {ring of fire} for a very large one.\n",
    "grid": [
      "1100000",
      "1010110",
      "0000010",
      "0100100",
      "0010000",
      "0010101",
      "0000011"
    ]
  },
  {
    "name": "MW emulator",
    "desc": " (p4)  Found by Robert Wainwright in June 1980.  See also\n   {emulator} and {filter}.\n",
    "grid": [
      "000000010000000",
      "001101000101100",
      "001000000000100",
      "000110000011000",
      "111001111100111",
      "100100000001001",
      "011000000000110"
    ]
  },
  {
    "name": "MWSS",
    "desc": " (c/2 orthogonally, p4)  A middleweight spaceship, the third most\n   common {spaceship}.  Found by Conway in 1970 by modifying a {LWSS}.\n   See also {HWSS}.\n",
    "grid": [
      "000100",
      "010001",
      "100000",
      "100001",
      "111110"
    ]
  },
  {
    "name": "MWSS emulator",
    "desc": "  = {MW emulator}\n",
    "grid": []
  },
  {
    "name": "MWSS out of the blue",
    "desc": "  The following reaction, found by Peter Rott in\n   November 1997, in which a {LWSS} passing by a p46 {oscillator}\n   creates a {MWSS} travelling in the opposite direction.  Together with\n   some reactions found by Dieter Leithner, and an LWSS-turning reaction\n   which Rott had found in November 1993 (but which was not widely known\n   until Paul Callahan rediscovered it in June 1994) this can be used to\n   prove that there exist {gliderless} guns for LWSS, MWSS and {HWSS}\n   for every period that is a multiple of 46.\n",
    "grid": [
      "1001000000000000000000000000000000000",
      "0000100000000000000000000000000000000",
      "1000100000000000000000000000000000000",
      "0111100000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000110000000000000011",
      "0000000000000000001100000000000000011",
      "0000000000000000000111110000000000000",
      "0011000000000000000011110000000000000",
      "0011000001000000000000000000000000000",
      "0000000011100000000011110000000000000",
      "0000000101010000000111110000000000000",
      "0000000010010000001100000000000000011",
      "0000000011100000000110000000000000011",
      "0000000001000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0010000000100000000000000000000000000",
      "0000000000000000000000000000000000000",
      "1110000000111000000000000000000000000",
      "0110110110110000000000000000000000000",
      "0011100011100000000000000000000000000",
      "0001000001000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0011000001100000000000000000000000000",
      "0011000001100000000000000000000000000"
    ]
  },
  {
    "name": "MWSS-to-G",
    "desc": "  See {135-degree MWSS-to-G}, {45-degree MWSS-to-G}.\n",
    "grid": []
  },
  {
    "name": "MW volcano",
    "desc": " (p5)  Found by Dean Hickerson in April 1992.\n",
    "grid": [
      "0000001000000",
      "0000100010000",
      "0000000000000",
      "0001000001000",
      "0111011101110",
      "1000110110001",
      "1011101011110",
      "0100000000000",
      "0001010101101",
      "0011011101011",
      "0001010010000",
      "0001001100000",
      "0011000000000"
    ]
  },
  {
    "name": "My Experience with B-heptominos in Oscillators",
    "desc": "  An article by Dave\n   Buckingham (October 1996) available from\n   {http://conwaylife.com/ref/lifepage/patterns/bhept/bhept.html}.  It\n   describes his discovery of {Herschel conduit}s, including sufficient\n   (indeed ample) {stable} conduits to enable, for the first time, the\n   construction of period n oscillators and {true} period n guns for\n   every sufficiently large integer n.  See {Herschel loop} and {emu}.\n",
    "grid": []
  },
  {
    "name": "natural",
    "desc": "  Occurring often in random patterns.  There is no precise\n   measure of naturalness, since the most useful definition of \"random\"\n   in this context is open to debate.  Nonetheless, it is clear that\n   objects such as {block}s, {blinker}s, {beehive}s and {glider}s are\n   very natural, while {eater2}s, {dart}s, {gun}s, etc., are not.\n",
    "grid": []
  },
  {
    "name": "natural Heisenburp",
    "desc": " (p46)  A {twin bees shuttle pair} arrangement found\n   by Brice Due in 2006.  A {glider} passes through the reaction area of\n   the shuttle pair completely unaffected.  However, a\n   {Heisenburp effect} causes a second glider to be created \"out of the\n   blue\", following behind the first at a 2{hd} offset.\n",
    "grid": [
      "0000000000000000001100000000000000000",
      "0000000000000000010100000000000000011",
      "0000000000000000010000000000000000011",
      "0000000000000000011100000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000011100000000000000000",
      "0000000011000000010000000000000000011",
      "0000000011000000010100000000000000011",
      "0000000000000000001100000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0100000100000000000000000000000000000",
      "1110001110000000000000000000000000000",
      "1011011010000000000000000000000000000",
      "0011011000000000011000000000000000000",
      "0011011000000000010100000000000000000",
      "0011011000000000010000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "1100000110000000000000000000000000000",
      "1100000110000000000000000000000000000"
    ]
  },
  {
    "name": "ND read",
    "desc": "  = {non-destructive read}\n",
    "grid": []
  },
  {
    "name": "negative spaceship",
    "desc": "  A type of {signal} travelling through a periodic\n   {agar} such as {zebra stripes}. The leading edge of the signal\n   removes the agar, and the trailing edge rebuilds the agar some time\n   later.  The distance between the two edges is sometimes adjustable,\n   as shown in {lightspeed bubble}.  The central part of the \"spaceship\"\n   may consist of dying sparks or even simple empty space.\n     Below is a sample period-5 negative spaceship, found by Hartmut\n   Holzwart in March 2007, in a small stabilized section of\n   {zebra stripes} agar:\n",
    "grid": [
      "010010010010010010010010010010010010010010010010010010010",
      "011111111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111001110011111111111111111110",
      "100000000000000000000000000000011000110000000000000000001",
      "011111111111111111111111100111000110001111001111111111110",
      "000000000000000000000000001100000000000000011000000000000",
      "011111111111111111111111100111000110000011000110011111110",
      "100000000000000000000000000000011000101100000000110000001",
      "011111111111111111111111100111001110001100000110001111110",
      "000000000000000000000000001100000000000011011000000000000",
      "011111111111111111111111100011111000000000011000001111110",
      "100000000000000000000000000001000000000000000110110000001",
      "011111111111111111111111100000100000000010000000110011110",
      "000000000000000000000000001010000001000100000000001100000",
      "011111111111111111111111100010101111100000010000000111110",
      "100000000000000000000000000000011100010000001000000000001",
      "011111111111111111111111100010101111100000010000000111110",
      "000000000000000000000000001010000001000100000000001100000",
      "011111111111111111111111100000100000000010000000110011110",
      "100000000000000000000000000001000000000000000110110000001",
      "011111111111111111111111100011111000000000011000001111110",
      "000000000000000000000000001100000000000011011000000000000",
      "011111111111111111111111100111001110001100000110001111110",
      "100000000000000000000000000000011000101100000000110000001",
      "011111111111111111111111100111000110000011000110011111110",
      "000000000000000000000000001100000000000000011000000000000",
      "011111111111111111111111100111000110001111001111111111110",
      "100000000000000000000000000000011000110000000000000000001",
      "011111111111111111111111111111001110011111111111111111110",
      "000000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111111111111111111111111111110",
      "010010010010010010010010010010010010010010010010010010010"
    ]
  },
  {
    "name": "negentropy",
    "desc": " (p2)  Compare {Hertz oscillator}.\n",
    "grid": [
      "00011010000",
      "00010110000",
      "00000000000",
      "00001110000",
      "00010101011",
      "00011001011",
      "11010001000",
      "11010001000",
      "00001110000",
      "00000000000",
      "00001101000",
      "00001011000"
    ]
  },
  {
    "name": "neighbour",
    "desc": "  Any of the eight cells adjacent to a given cell.  A cell is\n   therefore not considered to be a neighbour of itself, although the\n   neighbourhood used in Life does in fact include this cell (see\n   {cellular automaton}).\n",
    "grid": []
  },
  {
    "name": "new five",
    "desc": " (p3)  Found by Dean Hickerson, January 1990.\n",
    "grid": [
      "001100000",
      "010010000",
      "010100100",
      "110101100",
      "100000000",
      "011101111",
      "000001001",
      "101100000",
      "110110000"
    ]
  },
  {
    "name": "new gun",
    "desc": " (p46)  An old name for the period 46 glider gun show below.\n   This was found by Bill Gosper in 1971, and was the second basic\n   glider gun found (after the {Gosper glider gun}).  It produces a\n   period 46 glider {stream}.\n",
    "grid": [
      "0000000000000000000000000110000011",
      "0000000000000000000000000110000011",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000001101100",
      "0000000000000000000000000010000010",
      "0000000000000000000000000000000000",
      "0000000000000000000000000100000001",
      "0000000000000000000000000100101001",
      "0000000000000000000000000111000111",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000010000000000000000",
      "1100000000000000011000000000000000",
      "1100000000000000001100000000000000",
      "0000000000000110011000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000110011000000000000000",
      "1100000000000000001100000001100000",
      "1100000000000000011000000001100000",
      "0000000000000000010000000000000000"
    ]
  },
  {
    "name": "Noah's ark",
    "desc": "  The following diagonal {puffer} consisting of two\n   {switch engine}s.  This was found by Charles Corderman in 1971. The\n   name comes from the variety of objects it leaves behind: blocks,\n   blinkers, beehives, loaves, gliders, ships, boats, long boats,\n   beacons and block on tables.\n",
    "grid": [
      "000000000010100",
      "000000000100000",
      "000000000010010",
      "000000000000111",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "010000000000000",
      "101000000000000",
      "000000000000000",
      "100100000000000",
      "001100000000000",
      "000100000000000"
    ]
  },
  {
    "name": "n-omino",
    "desc": "  Any {polyomino} with exactly n cells.\n",
    "grid": []
  },
  {
    "name": "non-destructive read",
    "desc": "  A type of test reaction in {memory cell}\n   circuitry, where the information in the memory cell is unchanged and\n   can be read again to produce the same result.  One simple type of\n   non-destructive read reaction is a {signal} sent to a\n   {permanent switch}.  Memory cells with {destructive read} reactions\n   are generally simpler and more commonly used.\n",
    "grid": []
  },
  {
    "name": "nonfiller",
    "desc": "  = {space nonfiller}\n",
    "grid": []
  },
  {
    "name": "non-monotonic",
    "desc": "  A {spaceship} is said to be non-monotonic if its\n   leading edge falls back in some generations.  The first example\n   (shown below) was found by Hartmut Holzwart in August 1992.  This is\n   p4 and travels at c/4.  In April 1994, Holzwart found examples of p3\n   spaceships with this property, and this is clearly the smallest\n   possible period.  Another non-monotonic spaceship is the {weekender}.\n",
    "grid": [
      "000000000011010000000",
      "000000111010111000000",
      "001010000000000100011",
      "110000110000010001111",
      "001011001000011101000",
      "000000001000010000000",
      "001011001000011101000",
      "110000110000010001111",
      "001010000000000100011",
      "000000111010111000000",
      "000000000011010000000"
    ]
  },
  {
    "name": "nonomino switch engine predecessor",
    "desc": "  This is the unique nonomino (a\n   {polyomino} having 9 cells) whose {evolution} results in a\n   {switch engine}, and the smallest polyomino to do so.\n",
    "grid": [
      "111000",
      "001010",
      "001111"
    ]
  },
  {
    "name": "non-spark",
    "desc": "  Something that looks like a spark, but isn't.  An {OWSS}\n   produces one of these instead of a {belly spark}, and is destroyed by\n   it.\n",
    "grid": []
  },
  {
    "name": "non-standard spaceship",
    "desc": "  Any {spaceship} other than a {glider}, {LWSS},\n   {MWSS} or {HWSS}.\n",
    "grid": []
  },
  {
    "name": "non-trivial",
    "desc": "  A non-trivial period-N {oscillator} contains at least one\n   cell that oscillates at the full period.  In other words, it is not\n   made up solely of separate oscillators with smaller periods. Usually\n   it includes a {spark} or other reaction that would not occur if all\n   lower-period subpatterns were separated from each other, but some\n   exceptions are given under {trivial}.  See also {omniperiodic}.\n",
    "grid": []
  },
  {
    "name": "novelty generator",
    "desc": "  A pattern that appears to have an {unknown fate}\n   due to complex feedback loops, for example involving {wave}s of\n   gliders shuttling between perpendicular {rake}s.  Novelty generator\n   patterns fall short of counting as {chaotic growth}, since the rakes\n   continue to be predictable, and much of their {ash} generally remains\n   stable.\n     It has not been proven conclusively that any particular pattern is\n   in fact an infinite novelty generator, since it is always possible\n   that periodicity will spontaneously arise if the simulation is\n   continued far enough.  In fact this happens quite regularly.  But\n   conversely, it has not been proven that periodicity must\n   spontaneously arise for all such patterns.  Bill Gosper, Nick Gotts\n   and others have done extensive experiments along these lines using\n   {Golly}.\n",
    "grid": []
  },
  {
    "name": "NW31",
    "desc": "  One of the most common stable {edge shooter}s.  This\n   {Herschel-to-glider} {converter} suppresses the junk ordinarily left\n   behind by an evolving {Herschel} while allowing both the\n   {first natural glider} and {second natural glider} to escape on\n   {transparent lane}s:\n",
    "grid": [
      "1100000000000000000000000",
      "0100000000000000000000000",
      "0101000000000000000000000",
      "0011000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000011",
      "0000000000000000000000011",
      "0000000000000000000000000",
      "0010000000000000000000000",
      "0010100000000000000000000",
      "0011100000000000000000000",
      "0000100000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000011000000000000",
      "0000000000001000000000000",
      "0000000001110000000000000",
      "0000000001000000000000000"
    ]
  },
  {
    "name": "NW31T120",
    "desc": "  = {NW31}\n",
    "grid": []
  },
  {
    "name": "oblique",
    "desc": "  Neither diagonal nor orthogonal.  See also {knightship}.\n",
    "grid": []
  },
  {
    "name": "obo spark",
    "desc": "  A {spark} of the form O.O (so called after its {rle}\n   encoding).\n",
    "grid": []
  },
  {
    "name": "octagon II",
    "desc": " (p5)  The first known p5 {oscillator}, discovered in 1971\n   independently by Sol Goodman and Arthur Taber.  The name is due to\n   the latter.\n",
    "grid": [
      "00011000",
      "00100100",
      "01000010",
      "10000001",
      "10000001",
      "01000010",
      "00100100",
      "00011000"
    ]
  },
  {
    "name": "octagon IV",
    "desc": " (p4)  Found by Robert Wainwright, January 1979.\n",
    "grid": [
      "0000000110000000",
      "0000000110000000",
      "0000000000000000",
      "0000001111000000",
      "0000010000100000",
      "0000100000010000",
      "0001000000001000",
      "1101000000001011",
      "1101000000001011",
      "0001000000001000",
      "0000100000010000",
      "0000010000100000",
      "0000001111000000",
      "0000000000000000",
      "0000000110000000",
      "0000000110000000"
    ]
  },
  {
    "name": "octomino",
    "desc": "  Any 8-cell {polyomino}.  There are 369 such objects.  The\n   word is particularly applied to the following octomino (or its\n   two-generation successor), which is fairly common but lacks a proper\n   name:\n",
    "grid": [
      "0011",
      "0011",
      "1110",
      "0100"
    ]
  },
  {
    "name": "odd keys",
    "desc": " (p3)  Found by Dean Hickerson, August 1989.  See also\n   {short keys} and {bent keys}.\n",
    "grid": [
      "000000000010",
      "010000000101",
      "101110011010",
      "010010010000",
      "000010010000"
    ]
  },
  {
    "name": "omino",
    "desc": "  = {polyomino}\n",
    "grid": []
  },
  {
    "name": "omniperiodic",
    "desc": "  A {cellular automaton} is said to be omniperiodic if it\n   has {oscillator}s of all {period}s. It is not known if Life is\n   omniperiodic, although this seems likely.  Dave Buckingham's work on\n   Herschel conduits in 1996 (see\n   {My Experience with B-heptominos in Oscillators}) left only a short\n   list of unresolved cases, all with periods of 58 or below.  The list\n   has been progressively reduced since then.  Most recently, period 43\n   and 53 oscillators were made possible in 2013 by Mike Playle's\n   {Snark}.  As of June 2018, no oscillators are known for periods 19,\n   23, 38, or 41.  If we insist that the oscillator must be\n   {non-trivial}, then 34 should be added to this list.\n     Note that if we were to allow infinite oscillators, then all\n   periods are certainly possible, as any period of 14 or more can be\n   obtained using a {glider} (or {LWSS}) stream, or an infinitely long\n   {2c/3} wire containing signals with the desired separation.\n",
    "grid": []
  },
  {
    "name": "one per generation",
    "desc": "  See {grow-by-one object}.\n",
    "grid": []
  },
  {
    "name": "one-sided spaceship synthesis",
    "desc": "  A {glider synthesis} of a {spaceship}\n   in which all gliders come from the same side of the spaceship's path.\n   Such syntheses are used extensively in the 17c/45 {Caterpillar}.  For\n   example, here is a one-sided way to create an {LWSS}.\n",
    "grid": [
      "000100000",
      "000011000",
      "000110000",
      "000000000",
      "000000000",
      "000001000",
      "000101000",
      "000011000",
      "000000000",
      "000000000",
      "000000000",
      "000000000",
      "000000111",
      "000000001",
      "000000010",
      "000000000",
      "000000000",
      "000000000",
      "111000000",
      "001000000",
      "010000000"
    ]
  },
  {
    "name": "one-time",
    "desc": "  A term used for {turner}s and {splitter}s, specifying that\n   the reaction in question is not repeatable as it would be in a\n   {reflector} or {fanout} device.  Instead, the {constellation} is used\n   up, usually in a {clean} reaction, but the much more common {dirty}\n   turners and splitters are also very useful in some situations.\n",
    "grid": []
  },
  {
    "name": "onion rings",
    "desc": "  For each integer n>1 onion rings of order n is a {stable}\n   {agar} of {density} 1/2 obtained by tiling the plane with a certain\n   4n x 4n pattern.  The tile for order 3 onion rings is shown below.\n   The reader should be able to deduce the form of tiles of other\n   orders.\n",
    "grid": [
      "000000111111",
      "011110100001",
      "010010101101",
      "010010101101",
      "011110100001",
      "000000111111",
      "111111000000",
      "100001011110",
      "101101010010",
      "101101010010",
      "100001011110",
      "111111000000"
    ]
  },
  {
    "name": "Online Life-Like CA Soup Search",
    "desc": "  =\n   {The Online Life-Like CA Soup Search}.\n",
    "grid": []
  },
  {
    "name": "on-off",
    "desc": "  Any p2 {oscillator} in which all {rotor} cells die from\n   {overpopulation}.  The simplest example is a {beacon}.  Compare\n   {flip-flop}.\n",
    "grid": []
  },
  {
    "name": "O-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a\n   {traffic light} {predecessor}, although not one of the more common\n   ones.\n",
    "grid": [
      "11111"
    ]
  },
  {
    "name": "orbit",
    "desc": "  A term proposed by Jason Summers to refer to a natural\n   stabilization of a {puffer}.  For example, the {switch engine} has\n   two (known) orbits, the block-laying one and the glider-producing\n   one.\n",
    "grid": []
  },
  {
    "name": "Orion",
    "desc": " (c/4 diagonally, p4)  Found by Hartmut Holzwart, April 1993.\n",
    "grid": [
      "00011000000000",
      "00010100000000",
      "00010000000000",
      "11010000000000",
      "10000100000000",
      "10110000001110",
      "00000111000011",
      "00000011101010",
      "00000000000001",
      "00000010100000",
      "00000110100000",
      "00000010000000",
      "00001101000000",
      "00000001000000",
      "00000110000000"
    ]
  },
  {
    "name": "orphan",
    "desc": "  Conway's preferred term for a {Garden of Eden}.  According to\n   some definitions, an orphan consists of just the minimum living and\n   dead cells needed to ensure that no parent is possible, whereas a GoE\n   is an entire infinite Life plane that contains an orphan.\n",
    "grid": []
  },
  {
    "name": "Orthogonoid",
    "desc": " (256c/3476016, p3476016)  A {self-constructing}\n   {spaceship} analogous to the {Demonoid}s, with a slow orthogonal\n   direction of travel.  The first example was completed by Dave Greene\n   on 29 June 2017, with a top speed of 16c/217251 (this is just\n   256c/3476016 in lowest terms).\n     The construction recipe is a stream of MWSSes, with the recovery\n   time limited to 90 ticks by the {Lx200} {dependent conduit} that\n   follows the initial {syringe} converter.  The design is\n   {hashlife}-friendly, meaning that the spaceship can be trivially\n   adjusted so that spatial and temporal offsets are exact powers of\n   two; period 4194304 and period 8388608 versions have been\n   constructed, with speeds of c/16384 and c/32768 respectively.\n     The MWSSes are converted to {Herschel}s, which produce a standard\n   {single-channel} glider stream that runs the Orthogonoid's single\n   construction arm.  After the child circuitry is complete, a\n   previously constructed {Snark} in the parent is removed from the\n   construction arm lane, converting it to a \"destruction arm\" that\n   shoots down the previous constructor/reflector in the series.\n",
    "grid": []
  },
  {
    "name": "oscillator",
    "desc": "  Any pattern that is a {predecessor} of itself.  The term\n   is usually restricted to non-{stable} finite patterns; period 1\n   oscillators are {stable} and are usually just called {still life}s.\n   The {blinker} is the smallest non-stable oscillator, having period 2.\n   There are oscillators of almost all higher periods (see\n   {omniperiodic}).  In general {cellular automaton} theory the term\n   \"oscillator\" usually covers {spaceship}s as well, but this usage is\n   not normal in Life.\n     Oscillators consisting of separate objects which do not react in\n   any phase are usually ignored.  For example, a separated {blinker}\n   and {pulsar} makes a period 6 oscillator, but is considered\n   {trivial}.\n     An oscillator can be divided into a {rotor} and a {stator}, and the\n   stator can be further subdivided into {bushing} and {casing}.  Some\n   oscillators have no casing cells, and a few 100%-{volatility}\n   oscillators also have no bushing cells.\n     An oscillator can be constructed from any {gun} as long as {eater}s\n   can be added to consume its output.  If it is a {true} {gun} then the\n   period of the oscillator will be the same as the gun - unless the\n   eating mechanism multiplies the period, as in the case of gliders\n   caught by a {boat-bit}.\n     With the discovery of {reflector}s, {relay}s provide an easy way to\n   create oscillators of all large periods.  For example, eight gliders\n   travelling in a loop created by four {Snark}s can create any period\n   above 42, with a population never exceeding 356 live cells.\n     For the very lowest periods, whole families of {extensible}\n   oscillators are known.  Examples of this are {barberpole}, {cross},\n   {pentoad}, {p6 shuttle}, {snacker}, and {multiple roteightors}.  Any\n   of the {shuttle}s are oscillators by definition, for example the\n   {queen bee shuttle}.  Many of these are also extensible.  Other\n   oscillators such as {figure-8} and {tumbler} have unique mechanisms\n   that are not part of an extended family.\n     Some oscillators are useful because of the {perturbation}s they can\n   cause to other objects.  This is especially true if they provide a\n   {spark} on their boundary.  Some oscillators are explicitly found by\n   {search program}s in order to produce these sparks, such as\n   {pipsquirter}s.\n     Some higher period oscillators have been found while running random\n   {soup}s.  This is especially true if the soup is run on a cylindrical\n   or torus {universe}.  Sometimes the found objects can be moved to the\n   normal universe and supported there by added {catalyst}s.\n   {Achim's p144} is an example.\n",
    "grid": []
  },
  {
    "name": "Osqrtlogt",
    "desc": " (p1 circuitry)  A pattern constructed by Adam P. Goucher in\n   2010, which uses an unbounded triangular region as memory for a\n   binary counter.  Empty space is read as a zero, and a boat as a one,\n   as shown in the example pattern in {memory cell}.  The pattern's\n   diametric growth rate is O(sqrt(log(t))), which is the slowest\n   possible for any Life pattern, or indeed any 2D Euclidean cellular\n   automaton.  The population returns infinitely often to its initial\n   minimum value (during carry operations from 11111...1 to 100000...0,\n   so it can be considered to be an unusual form of {sawtooth}.\n",
    "grid": []
  },
  {
    "name": "OTCA metapixel",
    "desc": " (p46 circuitry)  A 2048 x 2048 period 35328 {metacell}\n   constructed by Brice Due in 2006.  It contains a large \"pixel\" area\n   that contains a large population of {LWSS}es when the metacell state\n   is ON, but is empty when it is OFF.  This allows the state of the\n   metacell to be visible at high zoom levels, unlike previous\n   {unit cell}s where the state was signaled by the presence or absence\n   of a single glider in a specific location.\n",
    "grid": []
  },
  {
    "name": "out of the blue",
    "desc": "  See {natural Heisenburp}.  Other similar mechanisms,\n   particularly the method of {LWSS} creation used in the pixel part of\n   the {OTCA metapixel}, may also be referred to as \"out of the blue\"\n   reactions.\n",
    "grid": []
  },
  {
    "name": "overclocking",
    "desc": "  A term used when a {circuit} can accept a signal at a\n   specific period which it cannot accept at a higher period.  A\n   {syringe} is a simple example.\n     Some {staged recovery} circuits also permit overclocking, and can\n   function successfully at a rate faster than their {recovery time}.  A\n   {Silver reflector} has a recovery time of 497 ticks, but can be\n   overclocked to reflect a period 250 glider stream, or any nearby\n   period above 248, simply by removing a beehive after the first glider\n   enters the reflector.  However, a continuous stream of gliders is\n   then required to maintain the circuit, with timing within a tightly\n   bounded range.\n",
    "grid": []
  },
  {
    "name": "overcrowding",
    "desc": "  = {overpopulation}\n",
    "grid": []
  },
  {
    "name": "over-exposure",
    "desc": "  = {underpopulation}\n",
    "grid": []
  },
  {
    "name": "overpopulation",
    "desc": "  Death of a cell caused by it having more than three\n   {neighbour}s.  See also {underpopulation}.\n",
    "grid": []
  },
  {
    "name": "over-unity reaction",
    "desc": "  An important concept in {gun} and\n   {macro-spaceship} construction.  To be a good candidate for building\n   one of these types of patterns with a new period or speed, a\n   stationary reaction (for a gun) or a moving reaction (for a\n   macro-spaceship) must be able to produce some number of output\n   {signal}s, strictly greater than the number of input signals required\n   to maintain the reaction.  The extra signal becomes a gun's output\n   {stream}, or may be used in a variety of ways to construct the\n   supporting {track} for a macro-spaceship.  By implication,\n   \"over-unity\" refers to the ratio of output signals to input signals.\n     If all signal outputs must be used up to sustain a stationary\n   reaction, a high-period {oscillator} may still be possible.  See\n   {emu} for example.\n",
    "grid": []
  },
  {
    "name": "overweight spaceship",
    "desc": "  = {OWSS}\n",
    "grid": []
  },
  {
    "name": "OWSS",
    "desc": "  A would-be {spaceship} similar to {LWSS}, {MWSS} and {HWSS} but\n   longer.  On its own an OWSS is unstable, but it can be escorted by\n   true spaceships to form a {flotilla}.\n",
    "grid": []
  },
  {
    "name": "Ox",
    "desc": "  A 1976 novel by Piers Anthony which involves Life.\n",
    "grid": []
  },
  {
    "name": "p",
    "desc": "  = {period}\n",
    "grid": []
  },
  {
    "name": "p1",
    "desc": "  Period 1, i.e., {stable}.  In the context of logic {circuit}ry,\n   this tends to mean that a mechanism is constructed from\n   {Herschel conduit}s that contain only {still life}s as {catalyst}s.\n   In the context of {slow glider construction}, a P1 {slow salvo} is\n   one in which there are no constraints on the {parity} of gliders in\n   the salvo, because the {intermediate target}s are all stable\n   constellations.  (The usual alternative is a \"P2 slow salvo\", where\n   the relative timing between adjacent gliders can be increased\n   arbitrarily, but only by multiples of two ticks.)\n",
    "grid": []
  },
  {
    "name": "p104 gun",
    "desc": "  A {glider gun} with period 104, found by Noam Elkies on 21\n   March 1996.  It is based on an {R-pentomino} {shuttle} reaction.\n",
    "grid": [
      "011000000001100000000000000000000000000",
      "011000000000100000001000000000000000000",
      "011000000000101100010100000000000011000",
      "010000000000010000001000000000000011100",
      "101000000110000001000000000000000011010",
      "101100000110000100000000000000000000101",
      "000000000000000010000000000000000001001",
      "000000000000000000000000000000000000110",
      "011000000000000000000000000000000000000",
      "011000000000000000000000000000000000000",
      "000000000000000110000000000000000000000",
      "000000000000000011000000000000000000110",
      "000000000000000010000000000000000000110",
      "011000000111000000000000000000000000110",
      "100100000001000000000000000000000000100",
      "101000000000000000000000000011000001010",
      "010110000000000000000000000011000001011",
      "001110000000000000100000000000000000000",
      "000110000000000001010000000000000000000",
      "000000000000000000100000000000000000110",
      "000000000000000000000000000000000000110"
    ]
  },
  {
    "name": "p11 bumper",
    "desc": " (p11)  A periodic {colour-preserving} {glider} {reflector}\n   with a minimum {repeat time} of 44 ticks.  Unlike the p5 through p8\n   cases where Noam Elkies' {domino}-spark based reflectors are\n   available, no small period-22 {colour-changing} reflector is known.\n   A {stable} {Snark} reflector can be substituted for any {bumper}.\n   This changes the timing of the output glider, which can be useful for\n   rephasing periodic glider streams.\n",
    "grid": [
      "0000000000000000000000000000100",
      "0000000000000000000000000000101",
      "0000000000000000000000000000110",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000010000000000000",
      "0000000000000000010100000000000",
      "0000000000000000011000000000000",
      "0000000000000000000000000000000",
      "0000000001100001100000000000000",
      "0000000001100010010000000000000",
      "0001100001100001010000000000000",
      "0000100000110000100000000000000",
      "0010000010110000000000000000000",
      "0011001110000000000011000000000",
      "0000010000101000000010000000000",
      "0011101101101110000001110000000",
      "0100001000010001000000010000000",
      "1010100011010010000000000000000",
      "1010000001010100000000000000000",
      "0100111110011000000000000000000",
      "0011000010100000000000000000000",
      "0000111100100000000000000000000",
      "0011000000110000000000000000000",
      "0010010000000000000000000000000",
      "0000110000000000000000000000000"
    ]
  },
  {
    "name": "p130 shuttle",
    "desc": "  A {shuttle} found in March 2004 by David Eppstein, which\n   originally needed several period 5 oscillators for support.  David\n   Bell found a reaction between two of the shuttles to produce a p130\n   glider gun.  On 18 November 2017 Tanner Jacobi found that the\n   {stable} {sidesnagger} can be used to support the shuttle instead,\n   and this is shown here.\n",
    "grid": [
      "0000011000000000000000000000000000000001100000",
      "0000011000000000000000000000000000000001100000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000100000000000000000000",
      "1100001100000000000000000010000000000011000011",
      "1100010010000000000000000110000000000100100011",
      "0000010100000000000111111100000000000010100000",
      "0000001000000000001110010000000000000001000000",
      "0000000000000000001001101000000000000000000000",
      "0001000000000000000000101000000000000000001000",
      "0010100000000000000011011000000000000000010100",
      "0011000000000000000011110000000000000000001100",
      "0000000000000000000000000000000000000000000000",
      "0011000000000000000011110000000000000000001100",
      "0010100000000000000011011000000000000000010100",
      "0001000000000000000000101000000000000000001000",
      "0000000000000000001001101000000000000000000000",
      "0000001000000000001110010000000000000001000000",
      "0000010100000000000111111100000000000010100000",
      "1100010010000000000000000110000000000100100011",
      "1100001100000000000000000010000000000011000011",
      "0000000000000000000000000100000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000011000000000000000000000000000000001100000",
      "0000011000000000000000000000000000000001100000"
    ]
  },
  {
    "name": "p144 gun",
    "desc": "  A {glider gun} with {true} period 144.  The first one was\n   found by Bill Gosper in July 1994.  For a full description and\n   pattern see {factory}.\n",
    "grid": []
  },
  {
    "name": "p14 gun",
    "desc": "  A glider gun which emits a period 14 glider stream.  This is\n   the smallest possible period for any stream, so such a gun is of\n   great interest.  There is no known true-period p14 glider gun, and\n   finding a small direct example is well beyond current search\n   algorithms' abilities.  However, pseudo-period p14 guns have been\n   created by {inject}ing gliders into a higher period glider stream.\n   The first pseudo p14 gun was built by Dieter Leithner in 1995.\n   Smaller pseudo p14 guns have since been constructed, but they are\n   still much too large to show here.  The essential mechanism used by\n   them is demonstrated in {GIG}.\n",
    "grid": []
  },
  {
    "name": "p15 bouncer",
    "desc": "  Noam Elkies' {colour-changing} glider reflector, with\n   {Karel's p15} providing the necessary {domino} {spark}.  Compare to\n   the {colour-preserving} {Snark}.  The minimum {repeat time} is 30\n   ticks.\n",
    "grid": [
      "000000000000000000000000100",
      "000000000000000000000000101",
      "000000000000000000000000110",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000001000000000",
      "000000000000000010000000000",
      "000000000000000011100000000",
      "000000000000000000000000000",
      "000110000110000000001100000",
      "001001001001000011001100000",
      "001100000011000101000000000",
      "001100000011000010000000000",
      "000011001100000000000000000",
      "000000000000000000110000000",
      "000000000000000000100000000",
      "000000000000000000011100000",
      "010010110100100000000100000",
      "110010000100110000000000000",
      "010010110100100000000000000"
    ]
  },
  {
    "name": "p15 bumper",
    "desc": "  A periodic {colour-preserving} {glider} {reflector} with\n   {Karel's p15} providing the necessary {spark}.  The minimum\n   {repeat time} is 45 ticks.  For an equivalent {colour-changing}\n   periodic glider reflector see {p15 bouncer}.  A {stable} {Snark}\n   reflector can be substituted for any {bumper}.  This changes the\n   timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "0000000000000000000000000000101",
      "0000000000000000000000000000110",
      "0000000000000000000000000000010",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000010000000000000",
      "0000000000000000010100000000000",
      "0000000000000000011000000000000",
      "0000000000000000000000000000000",
      "0000000000000001100000000000000",
      "0110110110000010010000000000000",
      "0110000110000001010000000000000",
      "0110110110000000100000000000000",
      "0000000000000000000000000000000",
      "0000110000000000000011000000000",
      "0010000100000000000010000000000",
      "0100000010000000000001110000000",
      "1000000001000000000000010000000",
      "1000000001000000000000000000000",
      "1000000001000000000000000000000",
      "0100000010000000000000000000000",
      "0010000100000000000000000000000",
      "0000110000000000000000000000000"
    ]
  },
  {
    "name": "p15 reflector",
    "desc": "  An ambiguous term that may refer to\n   {PD-pair reflector}, {p15 bouncer}, or the more recently discovered\n   {p15 bumper}.\n",
    "grid": []
  },
  {
    "name": "p184 gun",
    "desc": "  A {true} period 184 {double-barrelled} glider gun found by\n   Dave Buckingham in July 1996.  The {engine} in this gun is a\n   {Herschel descendant}.  Unlike previous glider guns, the reaction\n   flips on a diagonal so that both gliders travel in the same\n   direction.\n",
    "grid": [
      "0000000000000000000100000000000",
      "0000000000000000011100000000000",
      "0000000000000000100000000000000",
      "0000000000000000110000000000000",
      "0000000000000000000000000000001",
      "0000000000000000000000000000111",
      "0000000000000000000000000001000",
      "0000000000000000000000000001100",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000011000000000",
      "0000000000000000000101000000000",
      "0000000000000000000100000000000",
      "0000000000000000000110100000000",
      "0011000000000000000001100000000",
      "0101000000000000000000000000000",
      "0100000000000000000000000000000",
      "1100000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000001100000000000000000000000",
      "0000010100000000000000000000000",
      "0000010000000000000000000000000",
      "0000110000000000000000000000000"
    ]
  },
  {
    "name": "p1 megacell",
    "desc": " (p1 circuitry)  A {metacell} constructed by Adam P.\n   Goucher in 2008, capable of being programmed to emulate any Moore\n   neighborhood rule, including isotropic and anisotropic non-totalistic\n   rules.  It fits in a 32768 by 32768 bounding box, with the resulting\n   metacell grid at 45 degrees to the underlying Life grid.  Like the\n   {OTCA metapixel}, it includes a large \"pixel\" area so that the state\n   of the megacell can easily be seen even at extremely small-scale zoom\n   levels.\n",
    "grid": []
  },
  {
    "name": "p1 telegraph",
    "desc": " (p1 circuitry)  A variant of Jason Summers' {telegraph}\n   pattern, constructed in 2010 by Adam P. Goucher using only stable\n   circuitry.  A single incoming glider produces the entire ten-part\n   composite lightspeed signal that restores the beehive-chain\n   {lightspeed wire} to its original position.  The signal is detected\n   at the other end of the telegraph and converted back into a single\n   output signal.  This simplification came at the cost of a much slower\n   transmission speed, one bit per 91080 ticks.  In this mechanism,\n   sending the entire ten-part signal constitutes a '1' bit, and not\n   sending the signal means '0'.  See also {high-bandwidth telegraph}.\n",
    "grid": []
  },
  {
    "name": "p22 gun",
    "desc": "  A {true} period 22 {glider gun} constructed by David Eppstein\n   in August 2000, using two interacting copies of a p22 oscillator\n   found earlier the same day by Jason Summers.\n",
    "grid": [
      "000000000000000000110000000000000000000000000",
      "000000000000000000010000000100000000000000000",
      "000000000000000000010100000000000000110000000",
      "000000000000000000001100000000000011001000000",
      "000000000000000000000000111000000011011000000",
      "000000000000000000000000110110000000111000000",
      "000000000000000000000000100110000000000001100",
      "000000000000000000000000011000000000000001010",
      "000000000000000000000000000000000001000000010",
      "000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000",
      "110000000000000000000000000000000000000000000",
      "010000000000000000000000000000000000000000000",
      "010100000000000001110000000000000000000000000",
      "001100010000000010001000000000000000000000000",
      "000000101100000010000100000000000000000000000",
      "000001000010000001101000000000000000000000000",
      "000000100010000000010001100000000000000000000",
      "000000011100000000000001010000000000000000000",
      "000000000000000000000000010000000000000000000",
      "000000000000000000000000011000000000000000000"
    ]
  },
  {
    "name": "p246 gun",
    "desc": "  A {true} period {glider gun} with period 246, discovered by\n   Dave Buckingham in June 1996.  The 180-degree mod-123 symmetry of its\n   {bookend}-based {engine} makes it trivial to modify it into a\n   {double-barrelled} gun.  Its single-barreled form is shown below.\n",
    "grid": [
      "0000000000000000000000000000000000100000000",
      "0000000000000000000000000000000000111000000",
      "0000000000000000000000000000000011000100000",
      "0000000000000000000000000000000101011010000",
      "0000000000000000000000000000001001001010000",
      "0000000000000000000000000000000000001011000",
      "0000000000000000000000000000000000101000000",
      "0000000000000000000000000000000010101000000",
      "0000000000000000000000000000000001101100000",
      "0000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000",
      "0100000000000000000000000000000000000000000",
      "0101000000000000000001100000000000000000000",
      "0011000000000000000000100000000000000000011",
      "0000000000000000000010100000000000000000010",
      "0000000000000000000011000000000000000001010",
      "0000000000000000000000000000000000000001100",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000011000000000000",
      "0000000000000000000000010000011000000000000",
      "0000000000000000011011100000000000000000000",
      "0000000000000000010011110000000000000000000",
      "0000000000000000010110000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000",
      "0000010000000000000000000000000000000000000",
      "0000101111000000000000000000000000000000000",
      "0001010111000000000000000000000000000000000",
      "0010100000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000",
      "0001100000000000000000000000000000000000000",
      "0001100000000000000000000000000000000000000",
      "0001100000000000000000000000000000000000000"
    ]
  },
  {
    "name": "p24 gun",
    "desc": "  A {glider gun} with {true} period 24.  The first one was\n   found by Noam Elkies in June 1997.  It uses three p4 {oscillator}s to\n   {hassle} a pair of {traffic light}s.  One of the oscillators was very\n   large and custom-made.  Shown below is a much smaller version built\n   by Jason Summers and Karel Suhajda in December 2002, using the same\n   mechanism but with a smaller oscillator:\n",
    "grid": [
      "0000000000000000000000010010000000000000000",
      "0000000000000000000001111110000000000000000",
      "0000000000000000011010000000010000000000000",
      "0000000000000110101010111111110010000000000",
      "0000000000011100000010100010001110000000000",
      "0000000000100001001010001000110000000000000",
      "0000000000011111001011110100010110000000000",
      "0000000000001000011000001010110010000110100",
      "0000000000100011000101100110011000001011010",
      "0000000000111110111101000000000000001000010",
      "0000000000000000000001000000001001101011011",
      "0000000000001110001110001010000001010101010",
      "0000000000010000001000010010101000010101010",
      "0000000000001100101000000010011000101011011",
      "1101100000000000000000011011011100100010100",
      "0101000000100010101000010010000000000000100",
      "1001001001010001011100010100000000101011000",
      "1110110101110000000000010000000001100000000",
      "0001010101100000000000000000000001000000000",
      "0010110001010000000000000011000001001000000",
      "0100011000010000000000000111000001000000000",
      "0110000000110000000000000011000001100000000",
      "0000000000110000001110000000000000101011000",
      "0110000000110000001010000000000000000000100",
      "0100011000010000001110000000000000100010100",
      "0010110001010000000000000000000000101011011",
      "0001010101100000000000000000000000010101010",
      "1110110101110000000000000000000001010101010",
      "1001001001010000000001100000000001101011011",
      "0101000000100000000001000000000000001000010",
      "1101100000000000000000111000000000001011010",
      "0000000000000000000000001000000000000110100"
    ]
  },
  {
    "name": "p256 gun",
    "desc": "  A {true} period 256 four-barrelled {glider gun} found by\n   Dave Buckingham in September 1995.  It uses four {R64} {conduit}s to\n   make the second smallest known {Herschel loop} (after the\n   {Simkin glider gun}).  The p256 gun was an early \"teaser\" from Dave\n   Buckingham before he released his full {Herschel} {technology}.\n",
    "grid": [
      "0000000000000000000000000000000110000000000000000",
      "0000000000000000000000000000000110000011000000000",
      "0000000000000000000000000000000000000011000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000110000000011000000000000000001100000000000",
      "0000000110000000001000000000000000001100000000000",
      "0000000000000000001010000000000000000000001100000",
      "0000000000000000000110000000000000000000001100000",
      "0110000000000000000000000000000000000000000000000",
      "0110000000000000000000000000000000000000000000000",
      "0000011000000000000000000000000000000000000000000",
      "0000011000000000000000100000000000000000000000000",
      "0000000000000000000000101000000000000000000000000",
      "0000000000000000000000111000000000000000000000000",
      "0000000000000000000000001000000000000000000000000",
      "1100000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000110000",
      "0000000000000000000000000000000000000000000100000",
      "0000000000000000000000000000000000000000010100000",
      "0000000000000000000000000000000000000000011000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000001100000000000000000000000000000000000000011",
      "0000001000000000000000000000000000000000000000011",
      "0000000100000000000000000000000000000000000000000",
      "0000001100000000000000000000000000000000000000000",
      "0000000000000000000000101000000000000000000000000",
      "0000000000000000000000011000000000000000001100000",
      "0000000000000000000000010000000000000000001100000",
      "0000000000000000000000000000000000000000000000110",
      "0000000000000000000000000000000000000000000000110",
      "0000011000000000000000000000000000000000000000000",
      "0000011000000000000000000000000000000000000000000",
      "0000000000011000000000000000000000000000110000000",
      "0000000000011000000000000000000000000000110000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000001100000000000000000000000000000000000000",
      "0000000001100000110000000000000000000000000000000",
      "0000000000000000110000000000000000000000000000000"
    ]
  },
  {
    "name": "p29 pentadecathlon hassler",
    "desc": "  A {hassler} where two copies of a period\n   29 oscillator (which is itself a {pre-pulsar} hassler) change the\n   period of a {pentadecathlon}.\n",
    "grid": [
      "0000000000100000001000000000000000000001000000010000000000",
      "0000000001010000010100000000000000000010100000101000000000",
      "0000000000100000001000000000000000000001000000010000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000110000110000000000000000000000000",
      "0000000000000000000000000111001110000000000000000000000000",
      "0001100000000000000000000110000110000000000000000000011000",
      "0001000000010000010000000000000000000000100000100000001000",
      "1101000000111000111000000000000000000001110001110000001011",
      "1001100000111000111000000000000000000001110001110000011001",
      "0110000100000000000001100000000000011000000000000010000110",
      "0001111100000000000001010000000000101000000000000011111000",
      "0001000011000000000000010000000000100000000000001100001000",
      "0000110010000000110000011000000001100000110000000100110000",
      "0000001010000000110000000000000000000000110000000101000000",
      "0000001010100100000000000000000000000000000010010101000000",
      "0000000110111100000000000000000000000000000011110110000000",
      "0000000001000000000000000000000000000000000000001000000000",
      "0000000001010000000000000000000000000000000000101000000000",
      "0000000000110000000000000000000000000000000000110000000000"
    ]
  },
  {
    "name": "p30 gun",
    "desc": "  A {glider gun} with {true} period 30.  The first one, found\n   by Bill Gosper in November 1970 (see {Gosper glider gun}), was also\n   the first gun found of any period.  All known p30 glider guns are\n   made from two or more interacting {queen bee shuttle}s. Paul Callahan\n   found 30 different ways that three {queen bee shuttle}s can react to\n   form a period 30 glider gun.  One of the most interesting of these is\n   shown below in which the gliders emerge in an unexpected direction.\n",
    "grid": [
      "1100000000000000000000000000000000000",
      "0100000000000000000000000000000000000",
      "0101000000100000000000001000000000000",
      "0011000000111100000000101000000000000",
      "0000000000011110000001010000000000000",
      "0000000000010010000010010000000000000",
      "0000000000011110000001010000000000000",
      "0000000000111100000000101000000001100",
      "0000000000100000000000001000000001010",
      "0000000000000000000000000000000000010",
      "0000000000000000000000000000000000011",
      "0000000000000000000000000000000000000",
      "0000000000000000111000000000000000000",
      "0000000000000001101100000000000000000",
      "0000000000000001101100000000000000000",
      "0000000000000001111100000000000000000",
      "0000000000000011000110000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000011000000000000000000000",
      "0000000000000001000000000000000000000",
      "0000000000001110000000000000000000000",
      "0000000000001000000000000000000000000"
    ]
  },
  {
    "name": "p30 reflector",
    "desc": "  = {buckaroo}\n",
    "grid": []
  },
  {
    "name": "p30 shuttle",
    "desc": "  = {queen bee shuttle}\n",
    "grid": []
  },
  {
    "name": "p36 gun",
    "desc": "  A glider gun with {true} period 36.  The first one was found\n   by Jason Summers in 2004.  Shown below is a smaller version using\n   improvements by Adam P. Goucher and Scot Ellison:\n",
    "grid": [
      "00000000000000000000000000000000000000000000000010",
      "00000000000000000000000000000000000000000000001110",
      "00000000000000000000000000000000000000000000010000",
      "00000000000000000000000000000000000000000000011000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000011000000000000000",
      "00000000000000000000000000000000100100000000000000",
      "00000000000000000000000000000000101010000000000000",
      "00000000000000000000000000000000010011100000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000110000011000000",
      "00000000000000000000000000000000000100000101100000",
      "00000000000000000000000000000000000000000100100000",
      "00000000000000000000000000000000000000000011100000",
      "00000000000000000000000000000000000000110011000000",
      "00000000000000000000000000000000000001110000000000",
      "00000000000000000000000000000000000001001000000000",
      "00000000000000000000000000000000000001101000001000",
      "00000000000000000000000000000000000000110000011000",
      "00000000000000000000000000110000000000000000000000",
      "11000000000000000000000001001000000000000001110010",
      "01000000000000000000000000101000000000000000010101",
      "01010000000000000000001100010000000000000000001001",
      "00110000000000100000000101100000000000000000000110",
      "00000000000001100000000001000000000000000000000000",
      "00000000000011010000000001000000000000000000000000",
      "00000000000001010000000000000000000000000000000000",
      "00000000000000110000000000000000000000000000000000",
      "00000000000000000000000110000000000000000000000000",
      "00000000000000000000000101000000000000000000000000",
      "00000000000001000000000101100000000000000000000000",
      "00000000000001000000000011000000000000000000000000",
      "00000000000011010000000010000000000000000000000000",
      "00000000000100011000000000000000000000000000000000",
      "00000000001010000000000000000000000000000000000000",
      "00000000001001000000000000000000000000000000000000",
      "00000000000110000000000010000000000011000000000000",
      "00000000000000000000000101000000000001000000000000",
      "00000000000000000000000101001111111110000000000000",
      "00000000000000000000110100101111111001110000000000",
      "00000000000000000000110100001111110010010000000000",
      "00000000000000000000000100000000000001100000000000",
      "00000000000000000000000101000011000000000000000000",
      "00000000000000000000000011000011000000000000000000"
    ]
  },
  {
    "name": "p3 bumper",
    "desc": "  A variant of Tanner Jacobi's {bumper} found by Arie Paap in\n   April 2018.  Two forms of the period 3 {oscillator} {catalyst} are\n   shown below.\n",
    "grid": [
      "0010000000000000000000000001000000000000000000",
      "1010000000000000000000000101000000000000000000",
      "0110000000000000000000000011000000000000000000",
      "0000000000000000000000100000000000000000000000",
      "0000000000000000000011100000000000000000000000",
      "0000000000000000000100000000000000000000000000",
      "0000000000000000000110000000000000000000000000",
      "0000000000000000001100000000000000000000000000",
      "0000000110000000011000000000000011000000000110",
      "0000001001000010001000000000000100100001011110",
      "0000001010001110111000000000000101000111001010",
      "0000000100000000010000000000000010000000000000",
      "0000000000001111110000000000000000000111000000",
      "0011000000001101000000000001100000001011101011",
      "0001000000011000000000000000100000010000101101",
      "1110000000000000000000000111000000011001110000",
      "1000000000000000000000000100000000000010001110",
      "0000000000000000000000000000000000000001110010",
      "0000000000000000000000000000000000000000010000"
    ]
  },
  {
    "name": "p44 gun",
    "desc": "  A {glider gun} with a {true} period of 44.  The first one was\n   found by Dave Buckingham in April 1992.  It uses two interacting\n   copies of an {oscillator} which he also found.  In 1996 he found a\n   gun which only used one copy of the oscillator.  Paul Callahan\n   improved it in 1997, resulting in the gun shown below:\n",
    "grid": [
      "00000000000000000110000001100000000000000000",
      "00000000000000000110000001100000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000110",
      "10100000000000000000000000000000000000000101",
      "10101100000000000000000000000000000000110101",
      "01010100000000000000000000000000000000101010",
      "00010000000000000000000000000000000000001000",
      "00100100000000000001000010000000000000100100",
      "00100000000000000011000011000000000000000100",
      "00100010000000000100000000100000000001000100",
      "00100010000000000011000011000000000001000100",
      "00100000000000000001000010000000000000000100",
      "00100100000000000000000000000000000000100100",
      "00010000000000000000000000000000000000001000",
      "01010100000000000000000000000000000000101010",
      "10101100000000000000000000000000000000110101",
      "10100000000000000000000000000000000000000101",
      "01100000000000000000000000000000000000000110",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000011000000000000000000000000000",
      "00000000000000001000000000000000000000000000",
      "00000000000001110000000000000000000000000000",
      "00000000000001000000000000000000001100000000",
      "00000000000000000011000000000000001010000000",
      "00000000000000000011000000000000000010000000",
      "00000000000000000000000000000000000011000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000110000000000000000000000",
      "00000000000000000001010000000000000000000000",
      "00000000000000000001000000000000000000000000",
      "00000000000000000011000000000000000000000000"
    ]
  },
  {
    "name": "p44 MWSS gun",
    "desc": "  A gun discovered by Dieter Leithner in April 1997, in a\n   somewhat larger form.  This was the smallest known gliderless gun and\n   smallest known MWSS gun until the construction in 2017 of the gun\n   shown under {gliderless}, based on {Tanner's p46}.\n     The p44 MWSS gun is based on a p44 oscillator discovered by Dave\n   Buckingham in early 1992, shown here in an improved form found in\n   January 2005 by Jason Summers using a new p4 {sparker} by Nicolay\n   Beluchenko.  A glider shape appears in this gun for three consecutive\n   generations, but always as part of a larger {cluster}, so even a\n   purist would regard this gun as gliderless.\n",
    "grid": [
      "00000001000000000000000000000000000000000000000000",
      "00110001010000100000000000000000000000000000000000",
      "00100110010101101001110011000000000000000000000000",
      "00001100000001101010110011000000000000000000000000",
      "00011100000001000000011100000000010000000000000000",
      "00000000000000000000000100000001110000000000000000",
      "00000000000000000000000100000010000000011100000000",
      "00000000000000000000000000000011000000010010000000",
      "00000000011000000000000001000000000000010000000000",
      "00000000011000000000000010000000000000010001000000",
      "00000000000000000000000001100000000000010000000000",
      "00000000000000000000000010100000000000001010000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000101000001110000000000000000",
      "00000000000000000000000010000010010000000000000011",
      "11000000000000111000000010000001100000000000110101",
      "11000000000001000100000000000000000000000000110100",
      "00000000000001101100000000000000000000000000000010",
      "00000000000000000000000000000000011000000000110110",
      "00000000000000000000000000000011000000000000010100",
      "00000000000000000000000000000000000000000000010100",
      "00000000000000000000000000000000000000000000001000",
      "00000000000001101100000000000001010000000000000000",
      "11000000000001000100000000000001100000000000000000",
      "11000000000000111000000000000000000000000000000000",
      "00000000000000000000000000011000000000000000000000",
      "00000000000000000000000000010100000000000000000000",
      "00000000000000000000000000000100000000000000000000",
      "00000000000000000000000000000110000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000011000000000000000000000000000000000000000",
      "00000000011000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000",
      "00000000000000000000000100000000000000000000000000",
      "00000000000000000000000100000000000000000000000000",
      "00011100000001000000011100000000000000000000000000",
      "00001100000001101010110011000000000000000000000000",
      "00100110010101101001110011000000000000000000000000",
      "00110001010000100000000000000000000000000000000000",
      "00000001000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "p45 gun",
    "desc": "  A {true}-period glider gun discovered by Matthias Merzenich\n   in April 2010.  By most measures this is the smallest known\n   odd-period gun of any type, either true-period or {pseudo}-period:\n",
    "grid": [
      "000000000000000100100100000000000000000000000000",
      "000000000000000111111100000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000111111100000000000000000000000000",
      "000000000000000100100100000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000010010000000000000000000000000000",
      "000000000000110010010000000000000000000000000000",
      "000000000000110010010000000110000000000000000000",
      "000000000000000000000000000110000110001001000110",
      "000000000000000000000000000000000111110000111110",
      "000000000000000000000000000000000110001001000110",
      "000000000000000000000000000111000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "110110000000000000000000000000000000000000000000",
      "010100000000000000000000000111000000000000000000",
      "010100000011100000000000000000000000000000000000",
      "110110000000000000000000000000000010100000000000",
      "010100000000000000000000000000000001100000000000",
      "010100000011100000000000000000000001000000000000",
      "110110000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000001100000000000000000000000000000000000",
      "000000000001100000001001001100000000000000000000",
      "000000000000000000001001001100000000000000000000",
      "000000000000000000001001000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000001",
      "000000000000000000000000000000000000000000000101",
      "000000000000000000000000000000000000000000000011",
      "000000000000000000100100100000000000000000000000",
      "000000000000000000111111100000000000000000000000",
      "000000000000000000000000000000000000000000000000",
      "000000000000000000111111100000000000000000000000",
      "000000000000000000100100100000000000000000000000"
    ]
  },
  {
    "name": "p46 gun",
    "desc": "  A glider gun which has true-period 46.  The first one found\n   was the {new gun} by Bill Gosper in 1971.  Prior to the discovery of\n   {Tanner's p46} in October 2017, all known p46 guns were made from two\n   or more {twin bees shuttle}s that interact (e.g., see\n   {twin bees shuttle pair}). See {edge shooter} and {double-barrelled}\n   for two more of these.\n     On 21 October 2017 Heinrich Koenig found a glider gun using two\n   copies of {Tanner's p46} placed at right angles to each other.  This\n   is the first p46 gun found which makes no use of the\n   {twin bees shuttle}.\n",
    "grid": [
      "00001100000000000000000000000000000",
      "00000100000000000000000000000000000",
      "00000101000000000000000000000000000",
      "00000011001100000000000000000000000",
      "00000000001100000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "00000000000000000000000000000000000",
      "10000000000000000000000000000000000",
      "11100000001100000000000000000000000",
      "00010000001010000000000000000000000",
      "00101000000010000000000000000000000",
      "00110000001010000000000000000000000",
      "00000000001100000000000000000000000",
      "00110000000000000000000000000000000",
      "00100000000000000000000000000000000",
      "00011100000000000000000000000000000",
      "00000100000000000000000000000000000",
      "00000000110000000000000000000000000",
      "00000000010000000000000000000000000",
      "00000011100000000000000111000000000",
      "00000010000000000000001000100000000",
      "00000000000000000000010000010000000",
      "00000000000001100000010000010000000",
      "00000000000001100000011101110000000",
      "00000000000000000000000000000001100",
      "00000000000000000000000000000001010",
      "00000000000011000000000000000000010",
      "00000000000001000000000000000000011",
      "00000000001110000000000000000110000",
      "00000000001000000000000010000100000",
      "00000000000000000000000101010100000",
      "00000000000000000000001011011000000",
      "00000000000000000000001000000000000",
      "00000000000000000000011000000000000"
    ]
  },
  {
    "name": "p46 shuttle",
    "desc": "  = {twin bees shuttle}\n",
    "grid": []
  },
  {
    "name": "p48 gun",
    "desc": "  A {true} period compound {glider gun} based on the {p24 gun},\n   using a {Rich's p16} {oscillator} as a {filter} to remove half of the\n   gliders from the {stream}.\n",
    "grid": [
      "000000000000000001100000000000110000000000000",
      "000000000000000010010000000001001000000000000",
      "000000000000000010100011011000101000000000000",
      "000000000000001100101000000010100110000000000",
      "000000000000000101010000100001010100000000000",
      "000000000000001001100111111100110010000000000",
      "000000000000001100000101010100000110000000000",
      "000000000000000000000001010000000000000000000",
      "000001001100000000011100000111000000000000000",
      "000010100100100000101010001010100000000000000",
      "000010110101010000110011111001100000000000000",
      "000110100101001000000000000000000000000000000",
      "000100101100100000000000000000000000000000000",
      "000011101010001110000000000000000000000000000",
      "000000110100000110000000000000000000000000000",
      "001010010100010010000101010000000000000000000",
      "001100110101100111000011100000000000001100000",
      "000000001101000110000001000000000000010010000",
      "001111100001000000000000000000000000110000000",
      "010000101110000000000000000011000001110000010",
      "010110101000000110000000100010100001001000101",
      "110100100000011110000000010000100000111000110",
      "010101010000011001000001110000110000000000000",
      "010101101001000000000000000000000000111000110",
      "110110011000111100000000000000000001001000101",
      "000100111001001100001000000000000001110000010",
      "000101011000001000010100000000100000110000000",
      "001101001101001000100010000000010000010010000",
      "000010001100100100010100000001110000001100000",
      "000010100000001000001000000000000000000000000",
      "000110110000000000111000000000000000000000000",
      "000000000011000011111110000110000000000000000",
      "000000000010010011010110010010000000000000000",
      "000000000001101111000111101100000000000000000",
      "000000001110010000000000010011100000000000000",
      "000000010001101100000001101100010000000000000",
      "000000011010001100000001100010110000000000000",
      "000000001011100010000010001110100000000000000",
      "000000010000001100000001100000010000000000100",
      "000000001111110000000000011111100000000000010",
      "000000000010010000000000010010000000000001110"
    ]
  },
  {
    "name": "p4 bumper",
    "desc": " (p4)  A periodic {colour-preserving} {glider} {reflector}\n   with a minimum {repeat time} of 36.  Unlike the p5 through p8 cases\n   where Noam Elkies' {domino} spark-based reflectors are available, no\n   small period-4 {colour-changing} reflector is known.  A {stable}\n   {Snark} reflector can be substituted for any {bumper}.  This changes\n   the timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "000000000000000000000100",
      "000000000000000000000101",
      "000000000000000000000110",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000100000000000",
      "000000000000101000000000",
      "000000000000110000000000",
      "000000000000000000000000",
      "000011000011000000000000",
      "000100100100100000000000",
      "000000000010100000000000",
      "000000000001000000000000",
      "001001000000000000000000",
      "001011000000000110000000",
      "000101110000000100000000",
      "111000101000000011100000",
      "100000001000000000100000",
      "000000001100000000000000"
    ]
  },
  {
    "name": "p4 reflector",
    "desc": "  The following {glider} {reflector}, discovered by Karel\n   Suhajda in October 2012.  Its minimum repeat time is 52 ticks.\n   Unlike the various {bouncer}s discovered many years earlier, it is a\n   {colour-preserving} reflector, so it was made obsolete the following\n   year by the discovery of the much smaller stable {Snark}, which uses\n   the same initial {bait} reaction and so produces an output glider\n   with the same timing.  For a smaller periodic {colour-preserving}\n   glider reflector with a different output timing, see {p4 bumper}.\n",
    "grid": [
      "0000000000000000000000000000000010000000000000000000000000",
      "0000000000000000000000000000000100000000000000000000000000",
      "0000000000000000000000000000000111000000010100000000000000",
      "0000000000000000000000000000000000000000101100000000000000",
      "0000000000000000000000000000000000000011100000100000000000",
      "0000000000000000000000000000000000000100011111111000000000",
      "0000000000000000000000000000000000101010010000000100000000",
      "0000000000000010000000000000000000111101101111111010000000",
      "0000000000000011100000000000000000011100000101001010011000",
      "0000000000000000010000000000000000000111010100011010101000",
      "0000000000000000110000000000000111001101111100001010100000",
      "0000000000000000000000000000010100011101101001011110010011",
      "0000000000000000000000000001100000100001001001000100001001",
      "0000000000000000000100000001101010010000001001000011111110",
      "0000000000000000001000000000001010010010010000000001000000",
      "0000000000000000001110000000010000100100000000000100011000",
      "0000000000000000000000000000101111111000000001101011101000",
      "0000000000000000000000000000010000000001010000101010000000",
      "0000000000000000000110000000000111111111011100101000000000",
      "0000000000000000000110000000100010000000100010101000000000",
      "0000000000000000000000000001001000111100100101010000000000",
      "0000000000000000000000000000011000100010101001000000000000",
      "0000000000000000000000000000010000011101010110010000000000",
      "0000000011000000000000000100011100000100010001110000000000",
      "0001100100100000000000000000010001100100101100000000000000",
      "0001000010100000000000000000010001111000101011000000000000",
      "1101000001000000000000000011100010000001100010100000000000",
      "0101011000000000000000000001110000010011001010100000000000",
      "1001001000000001100000000000111001110111001010110000000000",
      "1100100001000001010000000000100100010001001010000000000000",
      "0000011111000000010000000000010100101100011110000000000000",
      "0000000000000000100000000001010101110111010000000000000000",
      "0000000100000000011100000010110100110000000000000000000000",
      "0000001010000000000100000010000010000001101000000000000000",
      "0000000100000000000000000001111100000010011000000000000000",
      "0000000000000000000000000000010000000011000000000000000000"
    ]
  },
  {
    "name": "p54 shuttle",
    "desc": " (p54)  A surprising variant of the {twin bees shuttle}\n   found by Dave Buckingham in 1973.  See also {centinal}.\n",
    "grid": [
      "11000000000000000000000000011",
      "01000000000000000000000000010",
      "01010000000100000000000001010",
      "00110000010010000010000001100",
      "00000000000010000011000000000",
      "00000000100000000001100000000",
      "00000000100011000011000000000",
      "00000000011111000000000000000",
      "00000000000000000000000000000",
      "00000000011111000000000000000",
      "00000000100011000011000000000",
      "00000000100000000001100000000",
      "00000000000010000011000000000",
      "00110000010010000010000001100",
      "01010000000100000000000001010",
      "01000000000000000000000000010",
      "11000000000000000000000000011"
    ]
  },
  {
    "name": "p5 bouncer",
    "desc": " (p5)  A {colour-changing} glider reflector constructed by\n   Noam Elkies in September 1998 by welding together two special-purpose\n   period-5 {sparker}s.  The minimum {repeat time} is 25 ticks.  For\n   {colour-preserving} glider reflectors see {p5 bumper} and the\n   {stable} {Snark} reflector.\n",
    "grid": [
      "00000000000000000000000000100",
      "00000000000000000000000011000",
      "00000000000000000000000001100",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000110000000000000000000",
      "00000100101000000001000000000",
      "00001010101000000010000000000",
      "00010101001100000011100000000",
      "00010001010010000000000000000",
      "11011001010100000000001100000",
      "10100001110010000011001100000",
      "00101110001100000101000000000",
      "00100100000100000010000000000",
      "00010001010010000000000001100",
      "00001110110110000000110000100",
      "00000010000100000000110011100",
      "00000001110100000110000011100",
      "00000000001011000110000011000",
      "00000000010010011101000000001",
      "00000000011001110000000000011",
      "00000000000000001000000000000",
      "00000000000001111010000000000",
      "00000000000010010001000000000",
      "00000000000011000101110000000",
      "00000000000001010010001000000",
      "00000000000001011010011000000",
      "00000000000000100100000000000",
      "00000000000000011000000000000"
    ]
  },
  {
    "name": "p5 bumper",
    "desc": "  A periodic {colour-preserving} {glider} {reflector} with a\n   {middleweight volcano} producing the necessary {spark}.  The minimum\n   {repeat time} is 35 ticks.  For an equivalent {colour-changing}\n   periodic glider reflector see {p5 bouncer}.  A {stable} {Snark}\n   reflector can be substituted for any {bumper}.  This changes the\n   timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "00000000000000000000000000001",
      "00000000000000000000000000110",
      "00000000000000000000000000011",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00000000000000000000000000000",
      "00011001000000000010000000000",
      "00010010100000000010100000000",
      "00001010100000000011000000000",
      "00011010110000000000000000000",
      "00100011001000001100000000000",
      "01001100011100010010000000000",
      "01010110011100001010000000000",
      "00101100011100000100000000000",
      "00000011001000000000000000000",
      "11111010110000000000011000000",
      "10010010100000000000010000000",
      "00000100100000000000001110000",
      "00000011000000000000000010000"
    ]
  },
  {
    "name": "p5 reflector",
    "desc": "  Traditional name for {p5 bouncer} before 2016, but with\n   the discovery of the {p5 bumper} this has become an ambiguous\n   reference.\n",
    "grid": []
  },
  {
    "name": "p60 gun",
    "desc": "  A glider gun with a {true} period of 60.  The first one was\n   found by Bill Gosper in 1970 and is shown below.\n",
    "grid": [
      "000000000000000000000000000010000000000",
      "000000000000000000000000000010100000000",
      "000000000001100000000000000000011000000",
      "000000000100010000000000000000011000011",
      "000110001000001000000000000000011000011",
      "000110011010001000000000000010100000000",
      "000000001000001000000000000010000000000",
      "000000000100010000000000000000000000000",
      "000000000001100000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000",
      "000000000010100000000000000000000000000",
      "000000000100100011000000000000000000000",
      "110000001100000111011001100000000000000",
      "110000110001000100010001010000000000000",
      "000000001100000101000000001000000000000",
      "000000000100100110000001001000000000000",
      "000000000010100000000000001000000000000",
      "000000000000000000000001010000000110000",
      "000000000000000000000001100000000101000",
      "000000000000000000000000000000000001000",
      "000000000000000000000000000000000001100"
    ]
  },
  {
    "name": "p690 gun",
    "desc": "  A {true} period 690 {glider} gun found by Noam Elkies in\n   July 1996.  It is composed of a p30 {queen bee shuttle pair} and a\n   p46 {twin bees shuttle} whose sparks occasionally react with each\n   other.  This is a very compact gun for such a high period and is used\n   in many patterns requiring sparse glider streams.\n",
    "grid": [
      "0000000000010000000000000000000000000000000000000000",
      "0000000000011100000000000000000000000000000000000000",
      "0000000000000010000000000000000000000000000000000000",
      "0000000000000110000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000001110000000000000000000000000000000000",
      "0000000000000010001000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000100000100000000000000000000000000000000",
      "0000000000000110001100000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000001101000000",
      "0000000000000000100000011000000000000111001100100000",
      "1100000000000001010000011000000000000011000000100011",
      "0100000000000001010000000000000000000001110001111001",
      "0101000001000001000000000000000000000000100010001110",
      "0011000101000001000000001000001000000000000000000000",
      "0000001010000001001000001000001000000000100010001110",
      "0000010010000001001000000000000000000001110001111001",
      "0000001010000000110011000000000001100011000000100011",
      "0000000101000000000000000000000000000111001100100000",
      "0000000001000000000000001000001000000000001101000000",
      "0000000000000000000000001000001000000000000000000000"
    ]
  },
  {
    "name": "p6 bouncer",
    "desc": " (p6)  Noam Elkies' {colour-changing} glider reflector using\n   the {p6 pipsquirter}, with a minimum {repeat time} of 24 ticks.  For\n   {colour-preserving} glider reflectors see {p6 bumper} and the\n   {stable} {Snark} reflector.\n",
    "grid": [
      "0000000000000000000000010",
      "0000000000000000000000100",
      "0000000000000000000000111",
      "0001100000000000000000000",
      "0001000000000000000000000",
      "0000010000000000000000000",
      "0000111100000000010000000",
      "0001000010000000100000000",
      "0001111101000000111000000",
      "0110000101000000000000000",
      "1001000001100000000011000",
      "1101010100100000110011000",
      "0001001011100001010000000",
      "0001101000100000100000000",
      "0000010101100000000000000",
      "0000010101000000001100000",
      "0000001001000000001000000",
      "0000000110000000000111000",
      "0000000000000000000001000"
    ]
  },
  {
    "name": "p6 bumper",
    "desc": " (p6)  A periodic {colour-preserving} {glider} {reflector}\n   with a {unix} providing the necessary {spark}.  The minimum\n   {repeat time} is 36 ticks.  For an equivalent {colour-changing}\n   periodic glider reflector see {p6 bouncer}.  A {stable} {Snark}\n   reflector can be substituted for any {bumper}.  This changes the\n   timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "00000000000000000000000100",
      "00000000000000000000000101",
      "00000000000000000000000110",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000000000000000",
      "00000000000000100000000000",
      "00000000000000101000000000",
      "00000000000000110000000000",
      "00000000000000000000000000",
      "00000000000011000000000000",
      "00000110000100100000000000",
      "00000110000010100000000000",
      "00000000000001000000000000",
      "00000000000000000000000000",
      "00000111000000000110000000",
      "11001011000000000100000000",
      "11001100000000000011100000",
      "00001100000000000000100000"
    ]
  },
  {
    "name": "p6 pipsquirter",
    "desc": " (p6)  A {pipsquirter} oscillator found by Noam Elkies\n   in November 1997, used in various {hassler}s and the colour-changing\n   {p6 bouncer}.\n",
    "grid": [
      "000001000000000",
      "000001000000000",
      "000000000000000",
      "000100010000000",
      "011101011100000",
      "100011000010000",
      "101100110101000",
      "010011001101000",
      "001100110101011",
      "000010010101011",
      "000011110110000",
      "000000001000000",
      "000000101000000",
      "000000110000000"
    ]
  },
  {
    "name": "p6 reflector",
    "desc": "  Traditional name for {p6 bouncer} before 2016, but with\n   the discovery of the {p6 bumper} this has become an ambiguous\n   reference.\n",
    "grid": []
  },
  {
    "name": "p6 shuttle",
    "desc": " (p6)  The following oscillator found by Nicolay Beluchenko\n   in February 2004.\n",
    "grid": [
      "10000000000000",
      "11100000000000",
      "00010000000000",
      "00110000000000",
      "00000000000000",
      "00000010000000",
      "00000111100000",
      "00000010010000",
      "00000001110000",
      "00000000000000",
      "00000000001100",
      "00000000001000",
      "00000000000111",
      "00000000000001"
    ]
  },
  {
    "name": "p72 quasi-shuttle",
    "desc": " (p72)  The following {oscillator}, found by Jason\n   Summers in August 2005.  Although this looks at first sight like a\n   {shuttle}, it isn't really.\n",
    "grid": [
      "0000000000000000000000000000001000000",
      "0000000000000000000000000000011000000",
      "0000000000000000000000000000101100000",
      "0111100000000000000000000001110010000",
      "1000010000000000000000000000010101000",
      "1000101000000000000000000000001010100",
      "0100010100000011000000000000000100111",
      "0000000100000101000000000000000011010",
      "0000000100000100000000000000000001100",
      "0000100100000111000000000000000001000",
      "0000011000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000011000000000000000000000000000000",
      "0000100100000111000000000000000001000",
      "0000000100000100000000000000000001100",
      "0000000100000101000000000000000011010",
      "0100010100000011000000000000000100111",
      "1000101000000000000000000000001010100",
      "1000010000000000000000000000010101000",
      "0111100000000000000000000001110010000",
      "0000000000000000000000000000101100000",
      "0000000000000000000000000000011000000",
      "0000000000000000000000000000001000000"
    ]
  },
  {
    "name": "p7 bouncer",
    "desc": " (p7)  Noam Elkies' {colour-changing} {glider} {reflector}\n   using a {p7 pipsquirter}, with a minimum {repeat time} of 28 ticks.\n   A high-{clearance} version is shown in {p7 pipsquirter}.  For\n   {colour-preserving} glider reflectors see {p7 bumper} and the\n   {stable} {Snark} reflector.\n",
    "grid": [
      "0000000000000000000000010",
      "0000000000000000000000100",
      "0000000000000000000000111",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000100000000",
      "0000001100000001000000000",
      "0000001010000001110000000",
      "0000000010000000000000000",
      "0001001011000000000110000",
      "0001111001000001100110000",
      "0000000111000010100000000",
      "0001111001000001000000000",
      "0010001011000000000000000",
      "0101111010000000011000000",
      "0101001010000000010000000",
      "1101010101100000001110000",
      "1001110100100000000010000",
      "0010001010000000000000000",
      "0001101011000000000000000",
      "0000100000000000000000000",
      "0010101111000000000000000",
      "0101111001000000000000000",
      "0100000100000000000000000",
      "0011111101000000000000000",
      "0000100010100000000000000",
      "0000000100100000000000000",
      "0000000011000000000000000"
    ]
  },
  {
    "name": "p7 bumper",
    "desc": " (p7)  A periodic {colour-preserving} {glider} {reflector}\n   with a minimum {repeat time} of 35 ticks.  For an equivalent\n   {colour-changing} periodic glider reflector see {p7 bouncer}.  A\n   {stable} {Snark} reflector can be substituted for any {bumper}.  This\n   changes the timing of the output glider, which can be useful for\n   rephasing periodic glider streams.\n",
    "grid": [
      "0000001000000000000000000",
      "0000101000000011000001100",
      "0000011000000100100010010",
      "0000000000000000000000000",
      "0000000110000000100010000",
      "0000001001000010000000100",
      "0000001010000011000001100",
      "0000000100000000010100000",
      "0000000000000100110110010",
      "0011000000001010010100101",
      "0001000000001001010101001",
      "1110000000000000100010000",
      "1000000000000000000000000"
    ]
  },
  {
    "name": "p7 pipsquirter",
    "desc": "  A {pipsquirter} oscillator found by Noam Elkies in\n   August 1999, used in various {hassler}s and the colour-changing\n   {p7 reflector}.\n",
    "grid": [
      "0000000000000000100000",
      "0000000010000000100000",
      "0110001110010000000000",
      "0010010001110010001011",
      "0010101100001110101101",
      "1100101011110000100000",
      "0101100000000111011110",
      "0100001010110001010010",
      "1101010110000101000000",
      "0101000000111101000000",
      "0100111111000010000000",
      "1100001001001000000000",
      "0000000000001100000000"
    ]
  },
  {
    "name": "p7 reflector",
    "desc": "  Traditional name for {p7 bouncer} before 2016, but with\n   the discovery of the {p7 bumper} this has become an ambiguous\n   reference.\n",
    "grid": []
  },
  {
    "name": "p8 bouncer",
    "desc": "  A glider {reflector} constructed by Noam Elkies in\n   September 1998, with a minimum {repeat time} of 24 ticks.  It is a\n   {constellation} containing a {figure-8}, {boat}, {eater1}, and\n   {block}.  For {colour-preserving} glider reflectors see {p8 bumper}\n   and the {stable} {Snark} reflector.\n",
    "grid": [
      "000000000000000010",
      "000000000000000100",
      "000000000000000111",
      "000000000000000000",
      "000000000000000000",
      "000000000000000000",
      "000000000010000000",
      "000000000100000000",
      "000000000111000000",
      "000000000000000000",
      "000000000000011000",
      "000000000110011000",
      "000000001010000000",
      "000000000100000000",
      "000001000000000000",
      "000010100001100000",
      "000100010001000000",
      "001000100000111000",
      "010001000000001000",
      "100010000000000000",
      "010100000000000000",
      "001000000000000000"
    ]
  },
  {
    "name": "p8 bumper",
    "desc": "  A periodic {colour-preserving} {glider} {reflector} with a\n   {blocker} attached to provide the necessary spark.  The minimum\n   {repeat time} is 40 ticks.  For an equivalent {colour-changing}\n   periodic glider reflector see {p8 bouncer}.  A {stable} {Snark}\n   reflector can be substituted for any {bumper}.  This changes the\n   timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "00000000000000000000100",
      "00000000000000000000101",
      "00000000000000000000110",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000001000000000000",
      "00000000001010000000000",
      "00000000001100000000000",
      "00000000000000000000000",
      "00000000110000000000000",
      "01100001001000000000000",
      "01100000101000000000000",
      "01100000010000000000000",
      "00100000000000000000000",
      "01010000000001100000000",
      "11010000000001000000000",
      "00000000000000111000000",
      "00000000000000001000000",
      "01100000000000000000000",
      "01100000000000000000000"
    ]
  },
  {
    "name": "p8 G-to-H",
    "desc": "  A small periodic variant of a stable two-glider-to-Herschel\n   component found by Paul Callahan in November 1998  and used in the\n   {Callahan G-to-H}, {Silver reflector} and {Silver G-to-H}.  The\n   minimum {repeat time} is 192 ticks, though some lower periods such as\n   96 are possible via {overclocking}.  Here a {ghost Herschel} marks\n   the output signal location:\n",
    "grid": [
      "0000100000000010000000000000000000",
      "0000111000001110000000000000000000",
      "0000000100010000000000000000000000",
      "0010001100011000000000000000000000",
      "0001000000000000000000000000000000",
      "0111000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000100",
      "0000000000000000000000000000000100",
      "0000000000000000000011000000000111",
      "0000000000000000000011000000000001",
      "0000000011000000000000000000000000",
      "0000000100100000000000000000000000",
      "0011000011000000000000000000000000",
      "0101000000000000000000000000000000",
      "0100000000000000000000000000000000",
      "1100000000000000000000000000000000",
      "0000000000110000000000000000000000",
      "0000000000100000000000000000000000",
      "0000000000011100000000000000000000",
      "0000000000000100000000000110000000",
      "0000000000000000000001100110000000",
      "0000000000000000000010100000000000",
      "0000000000000000000001000000000000",
      "0000000000000000010000000000000000",
      "0000000000000000101000011000000000",
      "0000000000000001000100010000000000",
      "0000000000000010001000001110000000",
      "0000000000000100010000000010000000",
      "0000000000001000100000000000000000",
      "0000000000000101000000000000000000",
      "0000000000000010000000000000000000"
    ]
  },
  {
    "name": "p8 reflector",
    "desc": "  Traditional name for {p8 bouncer} before 2016, but with\n   the discovery of the {p8 bumper} this has become an ambiguous\n   reference.\n",
    "grid": []
  },
  {
    "name": "p90 gun",
    "desc": "  A glider gun with {true} period 90.  The one below by Dean\n   Hickerson uses the output of two p30 guns in a period-multiplying\n   reaction:\n",
    "grid": [
      "0000000000000000000000000000000000000010000000000000000000000000",
      "0000000000000000000000000000000000000011110000000000000000000000",
      "0000000000000000000000000000000011000001111000000010000000000000",
      "0000000000000000000000000001000100100001001000000101000000000000",
      "0000000000000000000000000010100011000001111000011000100000000000",
      "0000000001100000000000000011010000000011110000011000100000000011",
      "0000000001010000000000000011011000000010000000011000100000000011",
      "0000110000001000000000000011010000000000000000000101000000000000",
      "1101001001001000000000000010100000000000000000000010000000000000",
      "1100110000001000000001000001000000000001010000000000000000000000",
      "0000000001010000000101000000000000000001100000000000000000000000",
      "0000000001100000000011000000000000000000100000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000110000000000000000000",
      "0000000000000000000000000000000000000000000110000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000110000000000000000000000",
      "0000000000000000000000000000000000000000100000000000000000000000",
      "0000000000000000000000000000000000000000011100000000000000000000",
      "0000000000000000000000000000000000000000000100000000000000000000"
    ]
  },
  {
    "name": "p92 gun",
    "desc": "  A glider gun with a {true} period of 92.  The first one was\n   found by Bill Gosper in 1971 using a period doubling reaction using\n   two p46 guns.  Many different p92 guns are known that use multiple\n   {twin bees shuttle}s.  A period 92 gun can also be made by adding a\n   {semi-cenark} to any period 46 glider gun.\n     On 18 November 2017, Martin Grant found a new gun using one twin\n   bees shuttle and one {Tanner's p46} oscillator, making it the\n   smallest known p92 gun.\n",
    "grid": [
      "0000110000000000000010000000000000000000000000",
      "0000010000000000000101000000000000000000000000",
      "0000010100000000000101000000000000000000000000",
      "0000001100110000011101100000000000000000000110",
      "0000000000110000100000000000000000000000000110",
      "0000000000000000011101100000000100000000000000",
      "0000000000000000000101100001100100000000000000",
      "0000000110101000000000000010000010000000000011",
      "0000000110101000000000000110010100000000000011",
      "0000000110001000000000000011000100000000000000",
      "0000000110000110000001100001110000000000000000",
      "1000000110000011000001100000000000000000000000",
      "1110000000111010000000000001110000000000000000",
      "0001000001100010101000000011000100000000000000",
      "0010100000010010001000000110010100000000000011",
      "0011000000010100101000000010000010000000000011",
      "0000000000000000000000000001100100000000000000",
      "0011000000000000000000000000000100000000000000",
      "0010000000000000000000000000000000000000000110",
      "0000100000000000000000000000000000000000000110",
      "0001100000000000000000000000000000000000000000",
      "0000000011000000000000000000000000000000000000",
      "0000000001000000000000000000000100000000000000",
      "0000001110000000000000000000000010000000000000",
      "0000001000000000000000000000001110000000000000"
    ]
  },
  {
    "name": "p9 bumper",
    "desc": "  A periodic {colour-preserving} {glider} {reflector} with a\n   {repeat time} of 36.  Unlike the p5 through p8 cases where Noam\n   Elkies' {domino} spark-based reflectors are available, no small\n   period-9 {colour-changing} reflector is known.  A {stable} {Snark}\n   reflector can be substituted for any {bumper}.  This changes the\n   timing of the output glider, which can be useful for rephasing\n   periodic glider streams.\n",
    "grid": [
      "000000000000000000000000100",
      "000000000000000000000000101",
      "000000000000000000000000110",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000100000000000",
      "000000110000000101000000000",
      "000001010000000110000000000",
      "011001000000000000000000000",
      "010101100000011000000000000",
      "000100010000100100000000000",
      "100101011000010100000000000",
      "111001010000001000000000000",
      "000110100000000000000000000",
      "001001001000000000110000000",
      "000111111000000000100000000",
      "000000000000000000011100000",
      "000001100000000000000100000",
      "000001100000000000000000000"
    ]
  },
  {
    "name": "pair of bookends",
    "desc": "  = {bookends}\n",
    "grid": []
  },
  {
    "name": "pair of tables",
    "desc": "  = {table on table}\n",
    "grid": []
  },
  {
    "name": "paperclip",
    "desc": " (p1)  A relatively 180-degree rotationally {symmetric}\n   14-{bit} {still life}.  The {Iwona} {methuselah} contains a paperclip\n   in its {ash}.\n",
    "grid": [
      "00110",
      "01001",
      "01011",
      "11010",
      "10010",
      "01100"
    ]
  },
  {
    "name": "parallel grey ship",
    "desc": "  = {with-the-grain grey ship}\n",
    "grid": []
  },
  {
    "name": "Parallel HBK",
    "desc": " ((6,3)c/245912, p245912)  A much smaller successor to the\n   {half-baked knightship}, constructed by Chris Cain in September 2014.\n   Several slow-salvo recipes are needed to support the multi-glider\n   salvo {seed}s at the upstream end of the spaceship.  \"Parallel\" means\n   that these recipes are sent in parallel instead of one after the\n   other, in series, as in the original HBK.\n",
    "grid": []
  },
  {
    "name": "Parallel HBK gun",
    "desc": "  An {armless} constructor pattern that is programmed\n   to build {Parallel HBK} oblique spaceships every 125906944 ticks.\n   This gun was created by Chris Cain on 3 January 2015.\n",
    "grid": []
  },
  {
    "name": "parasite",
    "desc": "  A self-sustaining reaction attached to the output of a rake\n   or puffer, that damages or modifies the standard output.  Compare\n   {tagalong}.  In 2009, while experimenting with {novelty generator}\n   patterns in {Golly}, Mitchell Riley discovered parasites on glider\n   streams from p20 and p8 backward rakes.  In some cases, parasites can\n   even \"reproduce\", as in the pattern below, though the number of\n   copies is limited since they will eventually use up their host glider\n   stream:\n",
    "grid": [
      "000000100000000000001000000000",
      "000001110000000000011100000000",
      "000110111000000000111011000000",
      "000010010110000011010010000000",
      "011010000101000101000010110000",
      "011010100101101101001010110000",
      "010000000010101010000000010000",
      "110000000110101011000000011000",
      "000000000000101000000000000000",
      "000000011101000101110000000000",
      "000000110000000000011000000000",
      "000000100000100001100100000000",
      "000001100001110001100100000000",
      "000000000001011000111000000000",
      "000000000000111000010000000000",
      "000000000000111000000000000000",
      "000000000000111000000000000000",
      "000000000000110000000000000000",
      "000000000000000000000000000000",
      "000000000000000000010100000000",
      "000000000000000000001100000000",
      "000000000000000110001000000000",
      "000000001100000011000000000000",
      "000000011000000100000000000000",
      "000000000100000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000001100000000000",
      "000000000010000001110000000000",
      "000000000111010001110000000000",
      "000000001101000001110000000000",
      "000000001100000010110000000000",
      "000000001100000011100001100000",
      "000000001101100001000001000000",
      "000000000110000000000011000000",
      "000000000011101000101110000000",
      "000000000000000101000000000000",
      "000110000000110101011000000011",
      "000010000000010101010000000010",
      "000011010100101101101001010110",
      "000011010000101000101000010110",
      "000000010010110000011010010000",
      "000000110111000000000111011000",
      "000000001110000000000011100000",
      "000000000100000000000001000000"
    ]
  },
  {
    "name": "parent",
    "desc": "  A pattern is said to be a parent of the pattern it gives rise\n   to after one generation.  Some patterns have infinitely many parents,\n   but others have none at all (see {Garden of Eden}).  Typically\n   parents are considered trivial if they contain groups of cells that\n   can be removed without changing the result, such as isolated faraway\n   cells.\n",
    "grid": []
  },
  {
    "name": "parent cells",
    "desc": "  The three cells that cause a new cell to be born.\n",
    "grid": []
  },
  {
    "name": "parity",
    "desc": "  Even or odd, particularly as applied to the {phase} of an\n   oscillator or spaceship.  For example, in {slow salvo} constructions,\n   the {intermediate target}s are frequently period 2, most often\n   because they contain {blinker}s or {traffic light}s.  A glider\n   striking a P2 constellation will generally produce a different result\n   depending on its parity. Period-4 intermediate targets are rare (or\n   not used), so it doesn't matter for example whether an odd-parity\n   glider in a slow salvo is phase 1 or phase 3.  Only the even/odd\n   parity is important.\n",
    "grid": []
  },
  {
    "name": "partial result",
    "desc": "  An intermediate object found by a {search program}\n   which might be a substantial part of a complete {spaceship} or\n   {oscillator}, but which isn't complete.\n     Running a partial result works for a few generations until the\n   {speed of light} corruption from any unfinished edge destroys the\n   whole object.  But a partial result can still be used to see whether\n   the object (if ever finished) would provide a desired {spark} or\n   {perturbation}.  If no partial results are found then it is likely\n   that no such object exists under the constraints of the search.\n     Very large partial results can indicate that there is a good chance\n   that the object being searched for might actually exist (but this is\n   no guarantee).  Rerunning the search using the partial result as a\n   base and relaxing some constraints, widening or adjusting the search\n   area, or splitting the object into multiple {arm}s might result in\n   finding a complete working object.\n     As an example, here is a large partial result for a period 6\n   {knightship} found by Josh Ball in April 2017.  The first 22 columns\n   were rediscovered in 2018 as part of the successful search for\n   {Sir Robin}.  See also {almost knightship} for an earlier small\n   example by Eugene Langvagen.\n",
    "grid": [
      "00001110000000000000000000",
      "00010011000000000000000000",
      "00010000100000000000000000",
      "00000000000000000000000000",
      "00011100011011100000000000",
      "01101010000101100000000000",
      "00010010000100110000000000",
      "10010000000010000000000000",
      "10000100110010010000000000",
      "01011100110001100000000000",
      "00011010110100010000000000",
      "00000000011011100000000000",
      "00000000010000010000000000",
      "00000000000011100111000000",
      "00000000000000010110000000",
      "00000000001101000111000000",
      "00000000001100100110000000",
      "00000000000011110001000000",
      "00000000000001101001000000",
      "00000000000110101010000000",
      "00000000000000100000000000",
      "00000000000100000001100000",
      "00000000000011000001100000",
      "00000000000000110100000000",
      "00000000000000001110010100",
      "00000000000000001100010000",
      "00000000000000000100000000",
      "00000000000000000011111010",
      "00000000000000000001100111",
      "00000000000000000001100001",
      "00000000000000000000000110"
    ]
  },
  {
    "name": "PD",
    "desc": "  = {pentadecathlon}\n",
    "grid": []
  },
  {
    "name": "PD hassler",
    "desc": "  = {p29 pentadecathlon hassler}\n",
    "grid": []
  },
  {
    "name": "PD-pair reflector",
    "desc": "  A pair of {pentadecathlon}s arranged so that their\n   {V spark}s turn a glider by 90 degrees.  The minimum {repeat time} is\n   45 ticks.\n",
    "grid": [
      "00000000000000111000000",
      "00000000000000000000000",
      "00000000000001000100000",
      "00000000000001000100000",
      "00000000000000000000000",
      "00000000000000111000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000111000000",
      "00000000000000000000000",
      "00000000000001000100000",
      "00000000000001000100000",
      "00000000000000000000100",
      "00000000000000111000101",
      "00000000000000000000110",
      "00000000000000000000000",
      "10010110100100000000000",
      "11110110111100000000000",
      "10010110100100000000000"
    ]
  },
  {
    "name": "pedestle",
    "desc": " (p5)  An {oscillator} found by Dave Buckingham in 1973.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "01001100000",
      "01110000000",
      "00000111000",
      "00011000100",
      "00100001001",
      "01010101011",
      "01010001010",
      "11010101010",
      "10010000100",
      "00100011000",
      "00011100000",
      "00000001110",
      "00000110010",
      "00001010000",
      "00000100000"
    ]
  },
  {
    "name": "penny lane",
    "desc": " (p4)  Found by Dave Buckingham, 1972.\n",
    "grid": [
      "000110000011000",
      "000100000001000",
      "110100000001011",
      "110101111101011",
      "000010010010000",
      "000001111100000",
      "000000000000000",
      "000000010000000",
      "000000101000000",
      "000000010000000"
    ]
  },
  {
    "name": "pentadecathlon",
    "desc": " (p15)  Found in 1970 by Conway while tracking the\n   history of short rows of cells, 10 cells giving this object, which is\n   the most {natural} {oscillator} of period greater than 3.  In fact it\n   is the fifth most common {oscillator} overall, appearing in random\n   soups slightly more frequently than the {clock}, but much less\n   frequently than the {blinker}, {toad}, {beacon} or {pulsar}.  The\n   pentadecathlon can be constructed using just three gliders, as shown\n   in {glider synthesis}.\n",
    "grid": [
      "0010000100",
      "1101111011",
      "0010000100"
    ]
  },
  {
    "name": "pentant",
    "desc": " (p5)  Found by Dave Buckingham, July 1976.\n",
    "grid": [
      "1100000000",
      "0100000000",
      "0101000000",
      "0011000011",
      "0000000001",
      "0000011110",
      "0000010000",
      "0010001110",
      "0011110010",
      "0000010000",
      "0000100000",
      "0000110000"
    ]
  },
  {
    "name": "pentaplet",
    "desc": "  Any 5-cell {polyplet}.\n",
    "grid": []
  },
  {
    "name": "pentapole",
    "desc": " (p2)  The {barberpole} of length 5.\n",
    "grid": [
      "11000000",
      "10100000",
      "00000000",
      "00101000",
      "00000000",
      "00001010",
      "00000001",
      "00000011"
    ]
  },
  {
    "name": "pentoad",
    "desc": " (p5)  Found by Bill Gosper, June 1977.  This is {extensible}:\n   if an eater is moved back four spaces then another {Z-hexomino} can\n   be inserted.  (This extensibility was discovered by Scott Kim.)\n",
    "grid": [
      "0000000000011",
      "0000000000010",
      "0000000001010",
      "0000000001100",
      "0000011000000",
      "0000001000000",
      "0000001000000",
      "0000001100000",
      "0011000000000",
      "0101000000000",
      "0100000000000",
      "1100000000000"
    ]
  },
  {
    "name": "pentomino",
    "desc": "  Any 5-cell {polyomino}.  There are 12 such patterns, and\n   Conway assigned them all letters in the range O to Z, loosely based\n   on their shapes.  Only in the case of the {R-pentomino} has Conway's\n   label remained in common use, but all of them can nonetheless be\n   found in this lexicon.\n",
    "grid": []
  },
  {
    "name": "period",
    "desc": "  The smallest number of generations it takes for an\n   {oscillator} or {spaceship} to reappear in its original form.  The\n   term can also be used for a {puffer}, {wick}, {fuse}, {superstring},\n   stream of {spaceship}s, {factory} or {gun}.  In the last case there\n   is a distinction between {true} period and {pseudo} period.  There is\n   also a somewhat different concept of period for {wicktrailer}s.\n",
    "grid": []
  },
  {
    "name": "period doubler",
    "desc": "  See {period multiplier}.\n",
    "grid": []
  },
  {
    "name": "periodic",
    "desc": "  For {circuit} mechanisms, \"periodic\" is the opposite of {p1}\n   or {stable}.  Periodic {circuit}s necessarily contain {oscillator}s,\n   and therefore they can generally only accept input {signal}s that are\n   {synchronized} to the combined {period} of those oscillators (but see\n   {universal regulator}).\n     For {signal} {stream}s, \"periodic\" means that signals will only be\n   present in the stream at one out of every n ticks, where n is the\n   {period} of the stream.  In a periodic {intermittent stream} there\n   may be gaps, so that signals do not always appear at every nth tick.\n   However, if a signal does appear, its distance measured in ticks from\n   previous and future signals will always be an exact multiple of n.\n",
    "grid": []
  },
  {
    "name": "period multiplier",
    "desc": "  A term commonly used for a {pulse divider}, because\n   dividing the number of {signal}s in a regular stream by N necessarily\n   multiplies the {period} by N.  The term \"period multiplier\" can be\n   somewhat misleading in this context, because most such circuits can\n   accept input streams that are not strictly {periodic}.\n     Reactions have also been found to period double or period triple\n   the output of some {rake}s to create high-period rakes in a\n   relatively small space (i.e., an exponential increase in period for a\n   linear increase in size).\n     For {Herschel} signals and {glider gun}s, a number of small period\n   doubler, tripler, and quadrupler mechanisms are known.  For example,\n   the following {conduit} produces one output glider after accepting\n   four input {B-heptomino}es, or four Herschels if a conduit such as\n   {F117} is prepended that includes the same {BFx59H} converter.\n",
    "grid": [
      "000000000000000000001000000000000000000000000",
      "000000000000000000001110000000000000000000000",
      "000000000000000000000001000000000000000000000",
      "000000000000110000000011000000000000000000000",
      "000000000000010000000000000000000000000000000",
      "000000000000010100000000000000000000000000000",
      "110000000000001100000000000000000000000000000",
      "101000000000000000000000000000000000000000000",
      "001000000000000000000000000000000000000000000",
      "001100000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000",
      "010001100000000000000000000000000000000000000",
      "011001100000000000000000000000000000000000000",
      "001100000000000000000000000000000000000000000",
      "011000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000110000000000",
      "000000000110000000000000000000000110000000000",
      "000000001010000000000000000000000000000000000",
      "000000001000000000000000000000000000000000000",
      "000000011000000000000000000000000000000000000"
    ]
  },
  {
    "name": "permanent switch",
    "desc": "  A {signal}-carrying {circuit} that can be modified\n   so that it cleanly absorbs any future signals instead of allowing\n   them to pass.  Optionally there may be a separate mechanism to\n   restore the circuit to its original function.\n     In the following example, a glider from the northeast (shown) will\n   perform a simple {block pull} that switches off an {F166} conduit, so\n   that any future Herschel inputs will be cleanly absorbed.  A glider\n   from the southwest (also shown) can restore the block to its original\n   position.\n",
    "grid": [
      "01100000000000000000000000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000000000000000000000",
      "01000000000000000000000000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000000000000110000000",
      "00000000000000000000000000000000000000000000000000010000000",
      "00000000000000000000000000000000000000000000000000100000000",
      "00000000000000000000000000000000000000000000000000110000000",
      "00000000000000000000000000000000001000000000000000000000000",
      "00000000000000000000000000000000001010000000000000000000000",
      "10001100000000000000000000000000001100000000000000000000000",
      "11001100000000000000000000000000000000000000000000000000000",
      "01100000000000000000000001100000000000000000000000000000000",
      "11000000000000000000000001100000000000000000000000000110000",
      "00000000000000000000000000000000000000000000000000000110000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000001100000000000000000000000000000000000000000000",
      "00000000000010100000000110000000000000000000000000000000000",
      "00000000000000100000001010000000000000000000000000000000000",
      "00000000000000000000001000000000000000000000000000000000000",
      "00000000000000000000011000000000000000000000000011000000000",
      "00000000000000000000000000000000000000000000000011000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000001100000000000000000000011",
      "00000000000000000000000000000000000100000000000000000000001",
      "00000000000000000000000000000000111000000000000000000001110",
      "00000000000000000000000000000000100000000000000000000001000",
      "00000000000000000000000000000000000000000000110000000000000",
      "00000000000000000000000000000000000000000000100000000000000",
      "00000000000000000000000000000000000000000000011100000000000",
      "00000000000000000000000000000000000000000000000100000000000"
    ]
  },
  {
    "name": "perpendicular grey ship",
    "desc": "  = {against-the-grain grey ship}\n",
    "grid": []
  },
  {
    "name": "perturb",
    "desc": "  To change the fate of an object by reacting it with other\n   objects.  Typically, the other objects are sparks from {spaceship}s\n   or {oscillator}s, or are {eater}s or impacting spaceships.\n   Perturbations are typically done to turn a {dirty} reaction into a\n   {clean} one, or to change the products of a reaction. In many\n   desirable cases the perturbing objects are not destroyed by the\n   reaction, or else are easily replenished.\n",
    "grid": []
  },
  {
    "name": "perturbation",
    "desc": "  = {perturb}.\n",
    "grid": []
  },
  {
    "name": "PF35W",
    "desc": "  One of the three {elementary} conduits used in the composite\n   {Fx176} {Herschel conduit}.  It converts an input {pi-heptomino} into\n   an output {wing} in 35 ticks.  In November 2017, Aidan F. Pierce\n   discovered the compact PF35W variant below, which improved the repeat\n   time of the Fx176 to 73 ticks and allowed {glider}s from following\n   {dependent conduit}s to escape freely:\n",
    "grid": [
      "100000000011000",
      "111000011001000",
      "000100100110000",
      "001100011001110",
      "000000000101001",
      "000000000100011",
      "000000000010000",
      "000000000110000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000111000000000",
      "000001000000000",
      "000111000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "000000000000000",
      "001100000000000",
      "000100000000000",
      "111000000000000",
      "100000000000000"
    ]
  },
  {
    "name": "phase",
    "desc": "  A representative generation of a periodic object such as an\n   {oscillator} or {spaceship}.  The number of phases is equal to the\n   {period} of the object.  The phases of an object usually repeat in\n   the same cyclic sequence forever, although some {perturbation}s can\n   cause a {phase change}.\n",
    "grid": []
  },
  {
    "name": "phase change",
    "desc": "  A {perturbation} of a periodic object that causes the\n   object to skip forward or backward by one or more {phase}s.  If the\n   perturbation is repeated indefinitely, this can effectively change\n   the {period} of the object.  An example of this, found by Dean\n   Hickerson in November 1998, is shown below.  In this example, the\n   period of the {oscillator} would be 7 if the {mold} were removed, but\n   the period is increased to 8 because of the repeated phase changes\n   caused by the mold's {spark}.\n",
    "grid": [
      "000000000010000",
      "000000000101100",
      "001100000000010",
      "001000000100101",
      "000000010001001",
      "111111010000110",
      "100000000000000",
      "011011000110000",
      "001010000101000",
      "001010000001000",
      "000100000001100"
    ]
  },
  {
    "name": "phase shift",
    "desc": "  = {phase change}\n",
    "grid": []
  },
  {
    "name": "phi",
    "desc": "  The following common {spark}.  The name comes from the shape in\n   the generation after the one shown here.\n",
    "grid": [
      "01110",
      "10001",
      "10001",
      "01110"
    ]
  },
  {
    "name": "phi calculator",
    "desc": " (p1 circuitry)  See {pi calculator}.\n",
    "grid": []
  },
  {
    "name": "phoenix",
    "desc": "  Any pattern all of whose cells die in every generation, but\n   which never dies as a whole.  A {spaceship} cannot be a phoenix, and\n   in fact every finite phoenix eventually evolves into an {oscillator}.\n   The following 12-cell oscillator (found by the MIT group in December\n   1971) is the smallest known phoenix, and is sometimes called simply\n   \"the phoenix\".\n",
    "grid": [
      "00001000",
      "00101000",
      "00000010",
      "11000000",
      "00000011",
      "01000000",
      "00010100",
      "00010000"
    ]
  },
  {
    "name": "pi",
    "desc": "  = {pi-heptomino}\n",
    "grid": []
  },
  {
    "name": "Pianola breeder",
    "desc": "  A series of patterns by Paul Tooke in 2010, based on\n   a simplification and extension of the {Gemini} spaceship's\n   construction mechanism.  Tooke  produced a number of\n   slow-salvo-constructed patterns with {superlinear growth}, including\n   a series of breeder patterns of previously unknown types.  For some\n   patterns, the Gemini's two {construction arm}s were moved to a\n   permanent stationary platform, using fourteen glider-loop channels\n   instead of twelve.\n     Some of these breeder patterns remain difficult to classify\n   unambiguously.  For example, one pattern was designed to be an MSS\n   breeder - a modified {Gemini} spaceship puffing {slide gun}s which\n   build lines of {block}s.  However, the slide guns produce both moving\n   and stationary objects at a linear rate, because streams of gliders\n   are needed to reach out to the construction zone to do the {push}\n   reaction and build more blocks.  The pattern could therefore be\n   classified as a hybrid MSM/MSS breeder.  Other breeder patterns\n   utilizing slide guns and {universal constructor} technology are\n   likely to cause similar classification ambiguities.\n",
    "grid": []
  },
  {
    "name": "pi calculator",
    "desc": " (p1 circuitry)  A device constructed by Adam P. Goucher\n   in February 2010, which calculates the decimal digits of pi (the\n   transcendental number, not the Life pattern!) and displays them in\n   the Life universe as 8x10 dot matrix characters formed by\n   arrangements of blocks along a diagonal stripe at the top.  A {push}\n   reaction moves a ten-block diagonal cursor to the next position as\n   part of the \"printing\" operation for each new digit.\n     The actual calculation is done in binary, using a streaming spigot\n   algorithm based on linear fractional transformations.  The pi\n   calculator is made up of a 188-state computer connected to a printing\n   device via period-8 {regulator}s and a binary-to-decimal conversion\n   mechanism.  The complete pattern can be found in {Golly}'s Very Large\n   Patterns online archive, along with the very similar 177-state phi\n   calculator which uses a simpler algorithm to calculate and print the\n   Golden Ratio.\n",
    "grid": []
  },
  {
    "name": "pi climber",
    "desc": "  The reaction that defines rate of travel of the\n   {Caterpillar} spaceship.  A pi climber consists of a pi-heptomino\n   \"climbing\" a chain of blinkers, moving 17 cells every 45 ticks, and\n   leaving behind an identical chain of blinkers, shifted downward by 6\n   cells.  A single pi climber does not produce any gliders or other\n   output, but two or more of them travelling on nearby blinker chains\n   can be arranged to emit gliders every 45 ticks.  Compare\n   {Herschel-pair climber}.\n",
    "grid": [
      "00100",
      "00100",
      "00100",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00000",
      "00100",
      "01110",
      "01010"
    ]
  },
  {
    "name": "pi-heptomino",
    "desc": " (stabilizes at time 173)  A common pattern.  The name is\n   also applied to later generations of this object.  In a {pi ship},\n   for example, the pi-heptomino itself never arises.\n",
    "grid": [
      "111",
      "101",
      "101"
    ]
  },
  {
    "name": "pincers",
    "desc": "  = {great on-off}\n",
    "grid": []
  },
  {
    "name": "pinwheel",
    "desc": " (p4)  Found by Simon Norton, April 1970.  Compare {clock II}.\n",
    "grid": [
      "000000110000",
      "000000110000",
      "000000000000",
      "000011110000",
      "110100001000",
      "110100101000",
      "000100011011",
      "000101001011",
      "000011110000",
      "000000000000",
      "000011000000",
      "000011000000"
    ]
  },
  {
    "name": "pi orbital",
    "desc": " (p168)  Found by Noam Elkies, August 1995.  In this\n   {oscillator}, a {pi-heptomino} is turned ninety degrees every 42\n   generations.  A second pi can be inserted to reduce the period to 84.\n",
    "grid": [
      "00000000000000110000110000110000000000000000000000000000000",
      "00000000000001001010000101001000000000000000000000000000000",
      "00000000000001110000000000111000000000000000000000000000000",
      "00000000000000001100000011000000000000000000000000000000000",
      "00000000000000010011111100100000000000000000000000000000000",
      "00000000000000011000000001100000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000100000000000000000000000000000110000000000100000000",
      "00000001000111000000100000000010000000110000000001010000000",
      "00000000101111100000000001110001000000000000000000000000000",
      "00000000000010001000001011111010000000000000000001000000000",
      "00000000000011000011100000100000000000000000000001100000000",
      "00000000000011000011100001100000000000000000001111100000000",
      "00000000000000000001000001100000000000000000001101100000110",
      "00000000000000000000000000000000000000000000000001000000101",
      "00000000000000000000000000000000000000000000000000000110101",
      "00000000000000000000000000000000000000000000000000000101010",
      "00000000000000000000000000000000000000000000000000000001000",
      "00000000000000000000000000000000000111000000000101000100100",
      "00000001100000000000000000000000000100100000000100100000100",
      "00000001100000000000000000000000000000010000000101001000100",
      "00000000000000000000000000000000000100100000000000001000100",
      "00000000000000000000000000000000000111000000000000000000100",
      "00000000000000000000000000000000000000000000000000000100100",
      "00000000000000000000000000000000000000000000000010000001000",
      "00000000000000000000000000000000000000000000011011000101010",
      "00000000000000000000000000000000000000000000011111000110101",
      "00000000010000000000000000000000000000000000000011000000101",
      "00000000101000000000000000000000000000000000000010000000110",
      "00000000000000000000000000000000000000000000000000000000000",
      "01100000001000000000000000000000000000000000000010100000000",
      "10100000011000000000000000000000000000000000000001000000000",
      "10101100011111000000000000000000000000000000000000000000000",
      "01010100011011000000000000000000000000000000000000000000000",
      "00010000001000000000000000000000000000000000000000000000000",
      "00100100000000000000000000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000000000000000000000",
      "00100010000000000000000000000000000000000000000000000000000",
      "00100010010100000000000000000000000000000000000000110000000",
      "00100000100100000000000000000000000000000000000000110000000",
      "00100100010100000000000000000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000000000000000000",
      "01010100000000000000000000000000000000000000000000000000000",
      "10101100000000000000000000000000000000000000000000000000000",
      "10100000010000000000000000000000000000000000000000000000000",
      "01100000110110000000000000000000110000010000000000000000000",
      "00000000111110000000000000000000110000111000011000000000000",
      "00000000110000000000000000000000100000111000011000000000000",
      "00000000010000000000000000001011111010000010001000000000000",
      "00000000000000000000000000010001110000000000111110100000000",
      "00000001010000000001100000001000000000100000011100010000000",
      "00000000100000000001100000000000000000000000000000100000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000110000000011000000000000000",
      "00000000000000000000000000000000100111111001000000000000000",
      "00000000000000000000000000000000011000000110000000000000000",
      "00000000000000000000000000000011100000000001110000000000000",
      "00000000000000000000000000000010010100001010010000000000000",
      "00000000000000000000000000000001100001100001100000000000000"
    ]
  },
  {
    "name": "pi portraitor",
    "desc": " (p32)  Found by Robert Wainwright in 1984 or 1985.\n   Compare with {gourmet} and {popover}.\n",
    "grid": [
      "000000000001100000000000",
      "000000110100001011000000",
      "000000100000000001000000",
      "000000011000000110000000",
      "000011100111111001110000",
      "000010010000000010010000",
      "011010100000000001010110",
      "010101000000000000101010",
      "000100000000000000001000",
      "010010000000000000010010",
      "000010000000111000010000",
      "100010000000101000010001",
      "100010000000101000010001",
      "000010000000000000010000",
      "010010000000000000010010",
      "000100000000000000001000",
      "010101000000000000101010",
      "011010100000000001010110",
      "000010010000000010010000",
      "000011100111111001110000",
      "000000011000000110000000",
      "000000100000000001000000",
      "000000110100001011000000",
      "000000000001100000000000"
    ]
  },
  {
    "name": "pipsquirt",
    "desc": "  = {pipsquirter}\n",
    "grid": []
  },
  {
    "name": "pipsquirter",
    "desc": "  An {oscillator} that produces a {domino} {spark} that is\n   orientated parallel to the direction from which it is produced (in\n   contrast to domino sparkers like the {pentadecathlon} and {HWSS},\n   which produce domino sparks perpendicular to the direction of\n   production).  See {p6 pipsquirter}, {p7 pipsquirter}.\n",
    "grid": []
  },
  {
    "name": "pi ship",
    "desc": "  A {growing spaceship} in which the back part consists of a\n   {pi-heptomino} travelling at a speed of 3c/10.  The first example was\n   constructed by David Bell.  All known pi ships are too large to show\n   here, but the following diagram shows how the pi fuse works.\n",
    "grid": [
      "0000000000001000000000000",
      "0000000000010100000000000",
      "1100000000110110000000011",
      "1100000000000000000000011"
    ]
  },
  {
    "name": "piston",
    "desc": " (p2)  Found in 1971.\n",
    "grid": [
      "11000000011",
      "10100100101",
      "00111100100",
      "10100100101",
      "11000000011"
    ]
  },
  {
    "name": "pi wave",
    "desc": "  A line of {pi-heptomino}es stabilizing one another.  For\n   example, an infinite line of pi-heptominoes arranged as shown below\n   produces a pi wave that moves at a speed of 3c/10 with period 30, and\n   leaves no debris.\n",
    "grid": [
      "111000000000000000111000000000000000111000000000000000111",
      "101000000000000000101000000000000000101000000000000000101",
      "101000000000000000101000000000000000101000000000000000101"
    ]
  },
  {
    "name": "pixel",
    "desc": "  = {cell}\n",
    "grid": []
  },
  {
    "name": "plet",
    "desc": "  = {polyplet}\n",
    "grid": []
  },
  {
    "name": "polyomino",
    "desc": "  A finite collection of orthogonally connected cells.  The\n   mathematical study of polyominoes was initiated by Solomon Golomb in\n   1953.  Conway's early investigations of Life and other cellular\n   automata involved tracking the histories of small polyominoes, this\n   being a reasonable way to ascertain the typical behaviour of\n   different cellular automata when the patterns had to be evolved by\n   hand rather than by computer.  Polyominoes have no special\n   significance in Life, but their extensive study during the early\n   years lead to a number of important discoveries and has influenced\n   the terminology of Life.  (Note on spelling:  As with \"dominoes\" the\n   plural may also be spelt without an e.  In this lexicon I have\n   followed Golomb in using the longer form.)\n     It is possible for a polyomino to be an {oscillator}.  In fact\n   there are infinitely many examples of such polyominoes, namely the\n   {cross} and its larger analogues.  The only other known examples are\n   the {block}, the {blinker}, the {toad}, the {star} and (in two\n   different phases) the {pentadecathlon}.\n     A polyomino can also be a {spaceship}, as the {LWSS}, {MWSS} and\n   {HWSS} show.\n",
    "grid": []
  },
  {
    "name": "polyplet",
    "desc": "  A finite collection of orthogonally or diagonally connected\n   cells.  This king-wise connectivity is a more natural concept in Life\n   than the orthogonal connectivity of the {polyomino}.\n",
    "grid": []
  },
  {
    "name": "pond",
    "desc": " (p1)\n",
    "grid": [
      "0110",
      "1001",
      "1001",
      "0110"
    ]
  },
  {
    "name": "pond on pond",
    "desc": " (p1)  This term is often used to mean {bi-pond}, but may\n   also be used of the following {pseudo still life}.\n",
    "grid": [
      "011000110",
      "100101001",
      "100101001",
      "011000110"
    ]
  },
  {
    "name": "popover",
    "desc": " (p32)  Found by Robert Wainwright in August 1984.  Compare\n   with {gourmet} and {pi portraitor}.\n",
    "grid": [
      "00000000000000000000010000000000",
      "00000000000000000000010000000000",
      "00000000000000000000011100000000",
      "00000000000001100000001100000000",
      "00000000000001100111001100000000",
      "00000000000000000001110000000000",
      "00000000000000000001110000000000",
      "00000000000000110000000000000000",
      "00111000000001001000000000000000",
      "00111000000001010000000000000000",
      "11100110001000100001110000000000",
      "00000110001000000000000000000000",
      "00001110001000000000000000000000",
      "00001000000000000000001100011000",
      "00001000000000001110010010011000",
      "00000000100000001010001010000000",
      "00000001010000001010000100000000",
      "00011001001000000000000000010000",
      "00011000110000000000000000010000",
      "00000000000000000000010001110000",
      "00000000000000000000010001100000",
      "00000000001110000000010001100111",
      "00000000000000000110000000011100",
      "00000000000000001001000000011100",
      "00000000000000001010000000000000",
      "00000000001110000100000000000000",
      "00000000001110000000000000000000",
      "00000000110011100110000000000000",
      "00000000110000000110000000000000",
      "00000000111000000000000000000000",
      "00000000001000000000000000000000",
      "00000000001000000000000000000000"
    ]
  },
  {
    "name": "population",
    "desc": "  The number of ON cells.\n",
    "grid": []
  },
  {
    "name": "P-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a common\n   {spark}.\n",
    "grid": [
      "11",
      "11",
      "10"
    ]
  },
  {
    "name": "PPS",
    "desc": " (c/5 orthogonally, p30)  A pre-pulsar spaceship.  Any of three\n   different p30 c/5 orthogonal {spaceship}s in which a {pre-pulsar} is\n   pushed by a pair of {spider}s.  The back sparks of the spaceship can\n   be used to perturb gliders in many different ways, allowing the easy\n   construction of c/5 puffers.  The first PPS was found by David Bell\n   in May 1998 based on a p15 pre-pulsar spaceship found by Noam Elkies\n   in December 1997.  See also {SPPS} and {APPS}.\n     The pattern below shows the basic mechanism of a PPS.  The two\n   isolated sparks at the left and right sides are the {edge spark}s\n   from the two supporting spiders.\n",
    "grid": [
      "0001000001000",
      "0010100010100",
      "0000000000000",
      "0011100011100",
      "0000000000000",
      "0000000000000",
      "0000000000000",
      "0011100011100",
      "0000000000000",
      "1010100010101",
      "0001000001000"
    ]
  },
  {
    "name": "pre-beehive",
    "desc": "  The following common {parent} of the {beehive}.\n",
    "grid": [
      "111",
      "111"
    ]
  },
  {
    "name": "pre-block",
    "desc": "  The following common {parent} of the {block}.  Another such\n   pattern is the {grin}.\n",
    "grid": [
      "10",
      "11"
    ]
  },
  {
    "name": "precursor",
    "desc": "  = {predecessor}\n",
    "grid": []
  },
  {
    "name": "predecessor",
    "desc": "  Any pattern that evolves into a given pattern after one\n   or more generations.\n",
    "grid": []
  },
  {
    "name": "pre-pre-block",
    "desc": "  A common predecessor to the {pre-block} (and thus the\n   {block}):\n",
    "grid": [
      "101",
      "011"
    ]
  },
  {
    "name": "pre-pulsar",
    "desc": "  A common {predecessor} of the {pulsar}, such as that shown\n   below.  This duplicates itself in 15 generations.  (It fails,\n   however, to be a true {replicator} because of the way the two copies\n   then interact.)\n",
    "grid": [
      "111000111",
      "101000101",
      "111000111"
    ]
  },
  {
    "name": "pre-pulsar spaceship",
    "desc": "  = {PPS}.\n",
    "grid": []
  },
  {
    "name": "pressure cooker",
    "desc": " (p3)  Found by the MIT group in September 1971.\n   Compare {mini pressure cooker}.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00001010000",
      "00011011000",
      "10100000101",
      "11010101011",
      "00010001000",
      "00010001000",
      "00001110000",
      "00000000000",
      "00010110000",
      "00011010000"
    ]
  },
  {
    "name": "primer",
    "desc": "  A pattern originally constructed by Dean Hickerson in November\n   1991 that emits a stream of {LWSS}s representing the prime numbers.\n   Some improvements were found by Jason Summers in October 2005.\n",
    "grid": []
  },
  {
    "name": "PRNG",
    "desc": "  = {pseudo-random number generator}\n",
    "grid": []
  },
  {
    "name": "propagator",
    "desc": "  = {linear propagator}\n",
    "grid": []
  },
  {
    "name": "protein",
    "desc": " (p3)  Found by Dave Buckingham, November 1972.\n",
    "grid": [
      "0000110000000",
      "0000100000000",
      "0000001000000",
      "0011110101100",
      "0100000101001",
      "0100110101011",
      "1101000001000",
      "0001001101000",
      "0001000010000",
      "0000111100000",
      "0000000000000",
      "0000110000000",
      "0000110000000"
    ]
  },
  {
    "name": "pseudo",
    "desc": "  Opposite of {true}.  A {gun} emitting a period n {stream} of\n   spaceships (or rakes) is said to be a pseudo period n gun if its\n   mechanism oscillates with a period greater than n.  This period will\n   necessarily be a multiple of n.  If the base mechanism's period is\n   instead a fraction of n, then a {period multiplier} must also be\n   present which is considered to be part of the mechanism, and the gun\n   as a whole is still a true period gun.  For example, a {filter} may\n   be used on a lower-period gun to produce a compound gun such as the\n   true {p48 gun}.\n     Pseudo period n glider guns are known to exist for all periods\n   greater than or equal to 14, with smaller periods being impossible.\n   All known {p14 gun}s are pseudo guns requiring several {signal}\n   {inject}ions, so they are quite large.  The following smaller example\n   is a pseudo period 123 gun, interleaving the streams from two true\n   period 246 guns:\n",
    "grid": [
      "00000000000000000000000000000000001000000000000000000000000000",
      "00000000000000000000000000000000001110000000000000000000000000",
      "00000000000000000000000000000000110001000000000000000000000000",
      "00000000000000000000000000000001010110100000000000000000000000",
      "00000000000000000000000000000010010010100000000000000000000000",
      "00000000000000000000000000000000000010110000000000000000000000",
      "00000000000000000000000000000000001010000000000000000000000000",
      "00000000000000000000001110000000101010000000000000000000000000",
      "00000000000000000000000000000000011011000000000000000000000000",
      "00000000000000000000010010000000000000000000000000000000000000",
      "11000000000000000000011100000000000000000000000000000000000000",
      "01000000000000000000000000000000000000000000000000000000000000",
      "01010000000000000000000110110000000000000000000000000000000000",
      "00110000000000000001100110101000000000000110000000000000000000",
      "00000000000000000001100110001000000000000100000000000000000000",
      "00000000000000000000000000011100000000010100000000000110000000",
      "00000000000000000000000110011100000000011000000000000101000000",
      "00000000000000000010100111000000000000000000000000000011100000",
      "00000000000000000010100011000000000000000000000000000001100000",
      "00000000000000000001000000000000000000000000000000000101000000",
      "00000000000000000000000000000000000000000000000011001010000000",
      "00000000000000000000000000000000000000000000000010100100000000",
      "00000000000000000000000000000000000000000000000001111000000000",
      "00000000000000000000000000000110000000000000000000110000000000",
      "00000000000000000000000000000110000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000001111000000000000000000000",
      "00000000000000000000000000000000000011111010000000000000000000",
      "00000000000000000000000000000000000001001010000000000000000000",
      "00000100000000000000000000000000000000000110000000000000000000",
      "00001011110000000000000000000000000000010100000000000000000000",
      "00010101110000000000000000000000000011000000000000100000000011",
      "00101000000000000000000000000000000101111000000000010000000010",
      "00010000000000000000000000000000000100011000000001110000001010",
      "00011000000000000011000000000000000011010000000000000000001100",
      "00011000000000000010100000000000000001110000000000000000000000",
      "00011000000000000001110000000000000000000000000000000000000000",
      "00000000000000000000110000000000000000000000000000000000000000",
      "00000000000000000010100000000000000000000000000000000000000000",
      "00000000000001100101000000000000000000000000000000000000000000",
      "00000000000001010010000000000000000000000000000000000000000000",
      "00000000000000111100000000000000000000000000000011000000000000",
      "00000000000000011000000000000000000000000000000011000000000000",
      "00000000000000000000110110000000000000000000000000000000000000",
      "00000000000000000000010100000000000000000000000000000000000000",
      "00000000000000000000010000000000000000000000000000000000000000",
      "00000000000000000011010010000000000000000000000000000000000000",
      "00000000000000000001010111000000000000000000000000000000000000",
      "00000000000000000001011000100000000000000000000000000000000000",
      "00000000000000000000100011000000000000000000000000000000000000",
      "00000000000000000000011100000000000000000000000000000000000000",
      "00000000000000000000000100000000000000000000000000000000000000"
    ]
  },
  {
    "name": "pseudo-barberpole",
    "desc": " (p5)  Found by Achim Flammenkamp in August 1994. In\n   terms of its minimum {population} of 15 this is the smallest known p5\n   {oscillator}.  See also {barberpole}.\n",
    "grid": [
      "000000000011",
      "000000000001",
      "000000000100",
      "000000010100",
      "000000000000",
      "000001010000",
      "000000000000",
      "000101000000",
      "000000000000",
      "001100000000",
      "100000000000",
      "110000000000"
    ]
  },
  {
    "name": "pseudo-random glider generator",
    "desc": "  A {pseudo-random number generator} in\n   which the bits are represented by the presence or absence of\n   {glider}s.  The first pseudo-random glider generator was built by\n   Bill Gosper.  David Bell built the first moving one in 1997, using\n   c/3 {rake}s.\n",
    "grid": []
  },
  {
    "name": "pseudo-random number generator",
    "desc": "  A pseudo-random number generator\n   (PRNG) is an algorithm that produces a sequence of bits that looks\n   random (but cannot really be random, being algorithmically\n   determined).\n     In Life, the term refers to a PRNG implemented as a Life pattern,\n   with the bits represented by the presence or absence of objects such\n   as {glider}s or {block}s.  Such a PRNG usually contains gliders or\n   other {spaceship}s in a loop with a feedback mechanism that causes\n   later spaceships to interfere with the generation of earlier\n   spaceships.  The {period} can be very high, as a loop of n spaceships\n   has 2^n possible states.\n",
    "grid": []
  },
  {
    "name": "pseudo still life",
    "desc": "  A {stable} pattern whose live cells are either\n   immediately adjacent to each other, or are connected into a single\n   group by adjacent dead cells where birth is suppressed by\n   overpopulation.\n     The definition of {strict still life} rules out such stable\n   patterns as the {bi-block}.  In such patterns there are dead cells\n   which have more than 3 neighbours in total, but fewer than 3 in any\n   component still life.  These patterns are called pseudo still lifes,\n   and have been enumerated up to 32 bits, as shown in the table below.\n",
    "grid": [
      "11111111111111"
    ]
  },
  {
    "name": "puffer",
    "desc": "  An object that moves like a {spaceship}, except that it leaves\n   debris behind.  The first known puffers were found by Bill Gosper and\n   travelled at c/2 orthogonally (see diagram below for the very first\n   one, found in 1971).\n",
    "grid": [
      "011100000010000010000001110",
      "100100000111000111000001001",
      "000100001101000101100001000",
      "000100000000000000000001000",
      "000100100000000000001001000",
      "000100110000000000011001000",
      "001000110000000000011000100"
    ]
  },
  {
    "name": "puffer engine",
    "desc": "  A pattern which can be used as the main component of a\n   {puffer}.  The pattern may itself be a puffer (e.g. the classic\n   {puffer train}), it may be a spaceship (e.g. the {Schick engine}), or\n   it may even be unstable (e.g. the {switch engine}).\n",
    "grid": []
  },
  {
    "name": "pufferfish",
    "desc": " (c/2, p12)  A puffer discovered by Richard Schank in\n   November 2014, from a symmetric soup search using an early version of\n   {apgsearch}.  It consists of a pair of {B-heptomino}es stabilised by\n   a backend that leaves only pairs of blocks behind.  It is simple\n   enough to be easily synthesized with gliders.\n",
    "grid": [
      "000100000001000",
      "001110000011100",
      "011001000100110",
      "000111000111000",
      "000000000000000",
      "000010000010000",
      "001001000100100",
      "100000101000001",
      "110000101000011",
      "000000101000000",
      "000101000101000",
      "000010000010000"
    ]
  },
  {
    "name": "pufferfish spaceship",
    "desc": " (c/2, p36)  Generally, any {spaceship}\n   constructed using {pufferfish}.  May refer specifically to the\n   extensible c/2 {spaceship} constructed by Ivan Fomichev in December\n   2014, the first such spaceship to contain no period-2 or period-4\n   parts.  (The first two or three rows might be considered to be period\n   2 or 4, but they are directly dependent on following rows for\n   support.).\n     The pattern consists of two adjacent {pufferfish} {puffer}s, plus\n   four copies of a nontrivial period 36 c/2 {fuse} for pufferfish\n   {exhaust}, discovered using a randomized soup search.\n",
    "grid": [
      "000000010000000100000000000000000010000000100000000",
      "000000111000001110000000000000000111000001110000000",
      "000001001100011001000000000000001101000001011000000",
      "000001000100010001000000000000000110100010110000000",
      "000000110110110110000000000000010110000000110100000",
      "000000110100010110000000000000101001010101001010000",
      "000000001000001000000000000000101000110110001010000",
      "000000000110110000000000000000011101000001011100000",
      "000011001000001001100000000000001110000000111000000",
      "000011001000001001100000000000001100000000011000000",
      "000000000000000000000000000000001000000000001000000",
      "000000001010101000000000000000011000000000001100000",
      "000000001100011000000000000000011000000000001100000",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000001100011000000000",
      "000000000000000000010000000000100001100011000000000",
      "000100000000000000111000000001110000000000000010000",
      "001110001100010101101000000011010000000000000111000",
      "011001001100000000010000000011100000000000001101000",
      "011110100000010001010000000011100000000000001100000",
      "110000010000000110011000000011110000000000000011000",
      "010000000000000000100100000010010000000000010011000",
      "010111001000010100110000000110000000000000010000100",
      "010100011000010100110001000010100000000000100101000",
      "011000000100100000001001000011100000000001100011000",
      "100000101000010100001011000000000000000010000000000",
      "011001001000010000001011000000000000100001100000000",
      "011000110000000110001101100110000001111110000000000",
      "000000000000000000000000100001000010101010000000111",
      "000000000000000000000000000000100010010000000001000",
      "000000000000000000000000000000100001000000000010000",
      "000000000000000000000000000001000000000000000001010"
    ]
  },
  {
    "name": "puffer train",
    "desc": "  The full name for a {puffer}, coined by Conway before\n   any examples were known.  The term was also applied specifically to\n   the classic puffer train found by Bill Gosper and shown below. This\n   is very {dirty}, and the tail does not stabilize until generation\n   5533.  It consists of a {B-heptomino} (shown here one generation\n   before the standard form) escorted by two {LWSS}.  (This was the\n   second known puffer.  The first is shown under {puffer}.)\n",
    "grid": [
      "011100000000000111",
      "100100000000001001",
      "000100001110000001",
      "000100001001000001",
      "001000010000000010"
    ]
  },
  {
    "name": "puff suppressor",
    "desc": "  An attachment at the back of a {line puffer} that\n   suppresses all or some of its puffing action.  The example below (by\n   Hartmut Holzwart) has a 3-cell puff suppressor at the back which\n   suppresses the entire puff, making a p2 {spaceship}.  If you delete\n   this puff suppressor then you get a p60 double {beehive} {puffer}.\n   Puff suppressors were first recognised by Alan Hensel in April 1994.\n",
    "grid": [
      "000000000000100000000000000000000",
      "000000000011010000000000000000000",
      "000000000011000100000000000000000",
      "000000001000110100000100000000000",
      "000000001111011000111100000001010",
      "000000100000010000111000001010010",
      "000000111111100010001000010010000",
      "000101000000110010001010110000100",
      "001111111110000010011000000001000",
      "011000000000000001011011110001001",
      "110000110100000000001000100101000",
      "011000010000000011100000010101001",
      "000000000100000011000000100001100",
      "011000010000000011100000010101001",
      "110000110100000000001000100101000",
      "011000000000000001011011110001001",
      "001111111110000010011000000001000",
      "000101000000110010001010110000100",
      "000000111111100010001000010010000",
      "000000100000010000111000001010010",
      "000000001111011000111100000001010",
      "000000001000110100000100000000000",
      "000000000011000100000000000000000",
      "000000000011010000000000000000000",
      "000000000000100000000000000000000"
    ]
  },
  {
    "name": "pull",
    "desc": "  A reaction, most often mediated by gliders, that moves an object\n   closer to the source of the reaction.  See {block pull},\n   {blinker pull}, {loaf pull}; also {elbow}.\n",
    "grid": []
  },
  {
    "name": "pulsar",
    "desc": " (p3)  Despite its size, this is the fourth most common\n   {oscillator} (and by far the most common of period greater than 2)\n   and was found very early on by Conway.  See also {pre-pulsar},\n   {pulsar quadrant}, and {quasar}.\n",
    "grid": [
      "0011100011100",
      "0000000000000",
      "1000010100001",
      "1000010100001",
      "1000010100001",
      "0011100011100",
      "0000000000000",
      "0011100011100",
      "1000010100001",
      "1000010100001",
      "1000010100001",
      "0000000000000",
      "0011100011100"
    ]
  },
  {
    "name": "pulsar 18-22-20",
    "desc": "  = {two pulsar quadrants}\n",
    "grid": []
  },
  {
    "name": "pulsar CP 48-56-72",
    "desc": "  = {pulsar}  (The numbers refer to the populations\n   of the three {phase}s.)\n",
    "grid": []
  },
  {
    "name": "Pulsar Pixel Display",
    "desc": " (p30 circuitry)  A large-scale raster line\n   display device constructed by Mark Walsh in August 2010, where\n   {pulsar}s form the individual pixels in an otherwise empty grid.  The\n   published sample pattern displays and erases eight 7x5-pixel\n   characters on each of two lines of text.\n",
    "grid": []
  },
  {
    "name": "pulsar quadrant",
    "desc": " (p3)  This consists of a quarter of the outer part of\n   a {pulsar} stabilized by a {cis fuse with two tails}.  This is\n   reminiscent of {mold} and {jam}.  Found by Dave Buckingham in July\n   1973.  See also {two pulsar quadrants}.\n",
    "grid": [
      "00000100",
      "00011100",
      "00100011",
      "10010010",
      "10001010",
      "10000100",
      "00000000",
      "00111000"
    ]
  },
  {
    "name": "pulse",
    "desc": "  A moving object, such as a {spaceship} or {Herschel}, which can\n   be used to transmit information.  See {pulse divider}.\n     Also another name for a {pulsar quadrant}.\n",
    "grid": []
  },
  {
    "name": "pulse divider",
    "desc": "  A mechanism that lets every n-th object that reaches it\n   pass through, and deletes all the rest, where n > 1 and the objects\n   are typically {glider}s, {spaceship}s or {Herschel}s.  A common\n   synonym is {period multiplier}.  For n=2, the simplest known stable\n   pulse dividers are the {semi-Snark}s.\n     The following diagram shows a p5 glider pulse divider by Dieter\n   Leithner (February 1998).  The first glider moves the centre block\n   and is reflected at 90 degrees.  The next glider to come along will\n   not be reflected, but will move the block back to its original\n   position.  The relatively small size and low period of this example\n   made it useful for constructing compact glider {gun}s of certain\n   periods, but it became largely obsolete with the discovery of the\n   {stable} {CC semi-Snark}, which uses the same basic mechanism.\n   Period 7, 22, 36 and 46 versions of this pulse divider are also\n   known.\n",
    "grid": [
      "00000110000000000000000000",
      "00000110000000000000000000",
      "00000000000000000000000000",
      "00000000000000000011000000",
      "00000000000000000100100000",
      "00000000000000000101001001",
      "10000000000000001101011111",
      "01100000000000100011000000",
      "11000000000000000110011100",
      "00000000000001000101001010",
      "00000000110000000110011010",
      "00000000110000100011000100",
      "00000000000000001101011000",
      "00000000000000000101010000",
      "00000000000000000101001000",
      "00000000000000000010011000",
      "00110000000000000000000000",
      "00010000000000000000000000",
      "11100000000000000000000000",
      "10000000000000000000000000",
      "00000000000000000000000000",
      "00000000000011000000000000",
      "00000000000010000000000000",
      "00000000000001110000000000",
      "00000000000000010000000000"
    ]
  },
  {
    "name": "pulshuttle V",
    "desc": " (p30)  Found by Robert Wainwright, May 1985. Compare\n   {Eureka}.\n",
    "grid": [
      "000000000000010000000000000010000000000000",
      "000000000000101000000010000101000000000000",
      "000000000000010000001101100010000000000000",
      "000000000000000000000010000000000000000000",
      "001100000011000000000000000000110000001100",
      "100001001000010000000000000010000100100001",
      "100001001000010000000000000010000100100001",
      "100001001000010000000010000010000100100001",
      "001100000011000000001101100000110000001100",
      "000000000000000000000010000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "001100000011000000000000000000110000001100",
      "100001001000010000000010000010000100100001",
      "100001001000010000001101100010000100100001",
      "100001001000010000000010000010000100100001",
      "001100000011000000000000000000110000001100",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000010000000000000000000",
      "001100000011000000001101100000110000001100",
      "100001001000010000000010000010000100100001",
      "100001001000010000000000000010000100100001",
      "100001001000010000000000000010000100100001",
      "001100000011000000000000000000110000001100",
      "000000000000000000000010000000000000000000",
      "000000000000010000001101100010000000000000",
      "000000000000101000000010000101000000000000",
      "000000000000010000000000000010000000000000"
    ]
  },
  {
    "name": "pure glider generator",
    "desc": "  A pattern that evolves into one or more\n   {glider}s, and nothing else.  There was some interest in these early\n   on, but they are no longer considered important.  Here's a neat\n   example:\n",
    "grid": [
      "001000000000000",
      "001000000000000",
      "111000000000000",
      "000000000000000",
      "000000111000000",
      "000000010000000",
      "000000000000111",
      "000000000000100",
      "000000000000100"
    ]
  },
  {
    "name": "push",
    "desc": "  A reaction that moves an object farther away from the source of\n   the reaction.  See {sliding block memory}, {pi calculator}, {elbow},\n   {universal constructor}.  See also {pull}, {fire}.\n",
    "grid": []
  },
  {
    "name": "pushalong",
    "desc": "  Any {tagalong} at the front of a spaceship.  The following\n   is an example found by David Bell in 1992, attached to the front of a\n   {MWSS}.\n",
    "grid": [
      "001110100000",
      "011110100000",
      "110000000000",
      "010100000000",
      "001111010000",
      "000111000000",
      "000000000000",
      "000000000000",
      "000000111110",
      "000000100001",
      "000000100000",
      "000000010001",
      "000000000100"
    ]
  },
  {
    "name": "pyrotechnecium",
    "desc": " (p8)  Found by Dave Buckingham in 1972.\n",
    "grid": [
      "0000000100000000",
      "0000011111000000",
      "0000100000100000",
      "0100101011010000",
      "1010101000010010",
      "0100100001010101",
      "0000101101010010",
      "0000010000010000",
      "0000001111100000",
      "0000000010000000"
    ]
  },
  {
    "name": "pyrotechneczum",
    "desc": "  A common mistaken spelling of {pyrotechnecium}, caused\n   by a copying error in the early 1990s.\n",
    "grid": []
  },
  {
    "name": "python",
    "desc": "  = {long snake}\n",
    "grid": []
  },
  {
    "name": "Q",
    "desc": "  = {Quetzal}\n",
    "grid": []
  },
  {
    "name": "qd",
    "desc": "  Abbreviation for {quarter diagonal}.\n",
    "grid": []
  },
  {
    "name": "Q-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a\n   {traffic light} {predecessor}.\n",
    "grid": [
      "1111",
      "0001"
    ]
  },
  {
    "name": "quad",
    "desc": " (p2)  Found by Robert Kraus, April 1971.  Of all {oscillator}s\n   that fit in a 6x6 box this is the only {flipper}.\n",
    "grid": [
      "110011",
      "100101",
      "010000",
      "000010",
      "101001",
      "110011"
    ]
  },
  {
    "name": "QuadLife",
    "desc": "  A form of {colourised Life} in which there are four types of\n   ON cell.  A newly-born cell takes the type of the majority of its\n   three {parent cells}, or the remaining type if its parent cells are\n   all of different types.  In areas where there are only two types of\n   ON cell QuadLife reduces to {Immigration}.\n",
    "grid": []
  },
  {
    "name": "quadpole",
    "desc": " (p2)  The {barberpole} of length 4.\n",
    "grid": [
      "1100000",
      "1010000",
      "0000000",
      "0010100",
      "0000000",
      "0000101",
      "0000011"
    ]
  },
  {
    "name": "quad pseudo",
    "desc": "  A {still life} that can be broken down into four {stable}\n   pieces but not into two or three.  This term may refer to the\n   following 34-bit pattern, found by Gabriel Nivasch in July 2001, or\n   any similar pattern with the same property.\n",
    "grid": [
      "00000000110",
      "00011010010",
      "00010110100",
      "00000000110",
      "00010110001",
      "01110110110",
      "10000000100",
      "01110110100",
      "00010101000"
    ]
  },
  {
    "name": "quadratic filter",
    "desc": "  A {toolkit} developed by Dean Hickerson and Gabriel\n   Nivasch in 2006, enabling the construction of patterns with\n   asymptotic population growth matching an infinite number of different\n   sublinear functions - namely, O(t^(1/2^n)) for any chosen n.  See\n   also {exponential filter}, {recursive filter}.\n",
    "grid": []
  },
  {
    "name": "quadratic growth",
    "desc": "  The fastest possible asymptotic rate of population\n   growth for any Life pattern - O(t^2) in big-O notation, where t is\n   the number of ticks.  The first quadratic-growth pattern found was\n   Bill Gosper's 1971 {breeder}.  Many other types of breeders and\n   {spacefiller}s have been constructed since.\n     In April 2011, Stephen Silver gave an example of a one-cell-thick\n   pattern over a million cells long that exhibited quadratic growth.\n   In October 2015, Chris Cain constructed a one-cell-thick pattern with\n   a reduced bounding box of 2596x1, improving on a series of previous\n   longer results.  The smallest known quadratic growth pattern by\n   initial population is the 23-cell {switch-engine ping-pong} by\n   Michael Simkin.\n     There are an infinite number of possible growth rates between\n   linear and quadratic growth.  See {superlinear growth}.\n",
    "grid": []
  },
  {
    "name": "quadratic replicator",
    "desc": "  A pattern that fills all or part of the Life\n   plane by making copies of itself in a nonlinear way.  Small quadratic\n   replicators are known in other Life-like rules, but as of July 2018\n   no example has been found or constructed in Conway's Life.\n",
    "grid": []
  },
  {
    "name": "quadratic sawtooth",
    "desc": "  Any {sawtooth} pattern with a quadratic envelope,\n   or specifically a pattern assembled by Martin Grant in May 2015,\n   consisting of two {caber tosser}s with period multipliers for timing\n   which activate and deactivate two toggleable rake guns (see\n   {toggleable gun}).  The gliders emitted by those rakes annihilate on\n   the diagonal while the rakes are eaten by 2c/5 ships. All the rakes\n   and gliders are destroyed before the next cycle.  See also\n   {Osqrtlogt}.\n",
    "grid": []
  },
  {
    "name": "quadri-Snark",
    "desc": "  A period-multiplying {colour-preserving} {signal}\n   {conduit} found by Tanner Jacobi in October 2017, producing one\n   output {glider} for every four input gliders.  It is made by\n   replacing one of the eaters in a {tremi-Snark} with a {catalyst}\n   found using {Bellman}.  The catalyst causes the formation of a {tub}\n   which then requires an additional glider to delete.  However, this\n   adds 5 ticks to the repeat time, so that it becomes 48.  If period\n   quadrupling is needed with a {colour-changing} reaction, a\n   {CP semi-Snark} and a {CC semi-Snark} can be used in series, or a\n   period-multiplying {Herschel conduit} can be connected to a {syringe}\n   and an appropriately chosen Herschel-to-glider {converter}.\n",
    "grid": [
      "010000000000000000000000000000000000000000000000000000000",
      "001000000000000000000000000000000000000000000000000000000",
      "111000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000010000000000000000000000000000000000000000000",
      "000000000000001000000000000000000000000000000000000000000",
      "000000000000111000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000010000000000000000000000000000000",
      "000000000000000000000000001000000000000000000000000000000",
      "000000000000000000000000111000000000000001100000000000000",
      "000000000000000000000000000000000000000000100000000000000",
      "000000000000000000000000000000000000000010000011000000000",
      "000000000000000000000000000000000000000011000001000000000",
      "000000000000000000000000000000000000000000000001011000000",
      "000000000000000000000000000000000000000011001101001000000",
      "000000000000000000000000000000000000000011000101100000000",
      "000000000000000000000000000000000000000000000100000000000",
      "000000000000000000000000000000000000000000001100000000000",
      "000000000000000000000000000000000000000000000000000110000",
      "000000000000000000000000000000000000010000000000000101000",
      "000000000000000000000000000000000000001000000000000001000",
      "000000000000000000000000000000000000111000000000000001011",
      "000000000000000000000000000000000000000000011000001101010",
      "000000000000000000000000000000000000000000011000001101010",
      "000000000000000000000000000000000000000000000000000001011",
      "000000000000000000000000000000000011000000000000001111001",
      "000000000000000000000000000000000101000000000000001000110",
      "000000000000000000000000000000000100000000000000000011000",
      "000000000000000000000000000000001100000000000000000001000",
      "000000000000000000000000000000000000000000000000000100000",
      "000000000000000000000000000000000000000000000000000110000"
    ]
  },
  {
    "name": "quapole",
    "desc": "  = {quadpole}\n",
    "grid": []
  },
  {
    "name": "quarter",
    "desc": " (c/4 diagonally, p4)  The following {spaceship}, found by\n   Jason Summers in September 2000.  The name is due to the 25-cell\n   minimum population.  This is the smallest known {c/4 spaceship} other\n   than the {glider}.  This spaceship can also be used to make the\n   smallest known {tubstretcher}.\n",
    "grid": [
      "0000000011000",
      "0000000110000",
      "0000000001000",
      "0000000000011",
      "0000000000100",
      "0000000000000",
      "0000000001001",
      "0110000011000",
      "1100000100000",
      "0010000101000",
      "0000110010000",
      "0000110000000"
    ]
  },
  {
    "name": "quarter diagonal",
    "desc": "  A unit of measurement sometimes used for diagonal\n   distances, especially for {slow salvo} glider {lane}s.  One advantage\n   of measurement in quarter diagonals is that gliders travel diagonally\n   at 1qd/tick, so that the same integer value can serve as either a\n   time or a diagonal distance measurement.\n",
    "grid": []
  },
  {
    "name": "quasar",
    "desc": " (p3)  Found by Robert Wainwright, August 1971.  This is related\n   to the {pulsar}, and is just the smallest of an extensible series of\n   p3 oscillators built using pulsar quadrants which are shifted with\n   respect to each other.\n",
    "grid": [
      "00000000001110001110000000000",
      "00000000000000000000000000000",
      "00000000100001010000100000000",
      "00000000100001010000100000000",
      "00000000100001010000100000000",
      "00000000001110001110000000000",
      "00000000000000000000000000000",
      "00000000111000000011100000000",
      "00111001000010001000010011100",
      "00000001000010001000010000000",
      "10000101000010001000010100001",
      "10000100000000000000000100001",
      "10000100111000000011100100001",
      "00111000000000000000000011100",
      "00000000000000000000000000000",
      "00111000000000000000000011100",
      "10000100111000000011100100001",
      "10000100000000000000000100001",
      "10000101000010001000010100001",
      "00000001000010001000010000000",
      "00111001000010001000010011100",
      "00000000111000000011100000000",
      "00000000000000000000000000000",
      "00000000001110001110000000000",
      "00000000100001010000100000000",
      "00000000100001010000100000000",
      "00000000100001010000100000000",
      "00000000000000000000000000000",
      "00000000001110001110000000000"
    ]
  },
  {
    "name": "quasi still life",
    "desc": "  A {stable} {constellation} where the individual\n   {still life}s share dead cells, so the neighborhoods of those dead\n   cells are changed, but all cells that used to remain dead from\n   under-population still do so.  Under Life rules, this occurs when\n   objects are diagonally adjacent (e.g., two {block}s sharing a single\n   diagonal neighbor) or when single protruding cells in two objects\n   such as {tub}s share multiple neighbors.  The term is due to Mark\n   Niemiec.\n",
    "grid": [
      "1111111111111111"
    ]
  },
  {
    "name": "queen bee",
    "desc": "  See {queen bee shuttle}.\n",
    "grid": []
  },
  {
    "name": "queen bee shuttle",
    "desc": " (p30)  Found by Bill Gosper in 1970.  There are a\n   number of ways to stabilize the ends.  Gosper originally stabilized\n   shuttles against one another in a square of eight shuttles. Two\n   simpler methods are shown here; for a third see {buckaroo}. The queen\n   bee shuttle is the basis of all known {true} p30 {gun}s (see\n   {Gosper glider gun}).\n",
    "grid": [
      "0000000001000000000000",
      "0000000101000000000000",
      "0000001010000000000000",
      "1100010010000000000000",
      "1100001010000000000000",
      "0000000101000000001100",
      "0000000001000000001010",
      "0000000000000000000010",
      "0000000000000000000011"
    ]
  },
  {
    "name": "queen bee shuttle pair",
    "desc": "  Any arrangement of two {queen bee shuttle}s\n   such that the two {beehive}s created between them are consumed in\n   some way. There are many ways that the two shuttles can be placed,\n   either head-to-head, or else at right angles.  The most well-known\n   and useful arrangement results in the {Gosper glider gun}.\n     Other arrangements don't create any lasting output, but create\n   large {spark}s which can perturb objects (especially gliders) in\n   various ways.  For example, one arrangement of a queen bee shuttle\n   pair was used in the original {unit Life cell} as a {memory cell}.\n   Here an input glider is converted into a block, which remains until\n   it is deleted by a glider on a right-angled path.\n",
    "grid": [
      "0000000000000000000000010",
      "0000000000000000000000100",
      "0000000000000000000000111",
      "0000000000000000000000000",
      "0000000000000100000000000",
      "0000000000001010000000000",
      "0000000000001101000000000",
      "0000000000001101100000000",
      "0000000000001101000000000",
      "0011000000001010000000000",
      "0101000000000100001110000",
      "0100000000000000001110000",
      "1100000000000000010001000",
      "0000000000000000100000100",
      "0000000000000000010001000",
      "0000000000000000001110000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000110000000",
      "0000000000000000010000000",
      "0000000000000011100000000",
      "0000000000000010000000000"
    ]
  },
  {
    "name": "Quetzal",
    "desc": "  Any Herschel track-based gun with a period below 62, which is\n   the lowest period with a stable glider-emitting conduit.  This was\n   Dieter Leithner's name for the {true} p54 glider gun he built in\n   January 1998 - a short form of {Quetzalcoatlus}, which expresses the\n   fact that the gun was a very large {Herschel loop} that was not an\n   {emu}.  Shortly afterwards Leithner also built a p56 Quetzal using a\n   mechanism found by Noam Elkies for this purpose.  In October 1998\n   Stephen Silver constructed a p55 Quetzal using Elkies' p5 {reflector}\n   of the previous month.  Quetzals of periods 57-61 have since been\n   constructed.\n     Some of the more recent Quetzals are not Herschel loops, but are\n   instead short Herschel tracks firing several glider streams all but\n   one of which is reflected back to the beginning of the track to\n   create a new Herschel.  Noam Elkies first had the idea of doing this\n   for the p55 case, and Stephen Silver constructed the resulting gun\n   shortly after building the original (much larger) p55 Quetzal. Jason\n   Summers later built a p54 version, which is more complicated because\n   the evenness of the period makes the timing problems considerably\n   more difficult.\n",
    "grid": []
  },
  {
    "name": "Quetzalcoatlus",
    "desc": "  A giant flying dinosaur after which Dieter Leithner\n   named his p54 gun.  Usually abbreviated to {Quetzal}, or simply Q (as\n   in Q54, Q55, Q56, Q-gun, etc.).\n",
    "grid": []
  },
  {
    "name": "quilt",
    "desc": "  = {squaredance}\n",
    "grid": []
  },
  {
    "name": "R",
    "desc": "  = {R-pentomino}\n",
    "grid": []
  },
  {
    "name": "R190",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in July 1996.  It\n   is made up of two {elementary conduit}s, HRx131B + {BFx59H}.  After\n   190 ticks, it produces a {Herschel} turned 90 degrees clockwise at\n   (24, 16) relative to the input.  Its {recovery time} is 107 ticks.  A\n   {ghost Herschel} in the pattern below marks the output location:\n",
    "grid": [
      "0000000000110000000000000000000000000",
      "0000000110010000000000000000000000000",
      "0000011101100000000000000000000000000",
      "0000100000000000000000000000000000000",
      "0100111101100000000000000000000000000",
      "0111000101100000000000000000000000000",
      "0000100000000000000000000000000000000",
      "0001100000000000000000000000000110000",
      "0000000000000000000000000000000100000",
      "0000000000000000000000000000010100000",
      "0000000000000000000000000000011000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000001101",
      "0000000000000000000000000000000001011",
      "0000000000000000000000000000000000000",
      "1000000000000000000000000011000000000",
      "1010000000000000000000000011000000000",
      "1110000000000000000000000000000000000",
      "0010000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000001100011000000000000000000000",
      "0000000000100010000000000000000000000",
      "0000000111000001110000000000000000000",
      "0000000100000000010000000000000000000",
      "0000000000000000010100000000000000000",
      "0000000000000000001100000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000000000000000",
      "0000000000000000000000000111000000000",
      "0000000000000000000000000100000000000",
      "0000000000000000000000001100000000000"
    ]
  },
  {
    "name": "R2D2",
    "desc": " (p8)  This was found, in the form shown below, by Peter Raynham\n   in the early 1970s.  The name derives from a form with a larger and\n   less symmetric {stator} found by Noam Elkies in August 1994. Compare\n   with {Gray counter}.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00010101000",
      "00010101000",
      "11010001011",
      "11010001011",
      "00010001000",
      "00010101000",
      "00001010000",
      "00000100000"
    ]
  },
  {
    "name": "r5",
    "desc": "  = {R-pentomino}\n",
    "grid": []
  },
  {
    "name": "R64",
    "desc": "  An {elementary conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in September 1995.\n   After 64 ticks, it produces a {Herschel} rotated 90 degrees clockwise\n   at (11, 9) relative to the input.  Its {recovery time} is 153 ticks,\n   though this can be improved to 61 ticks by adding a from-the-side\n   eater inside the turn to avoid interference from the output\n   Herschel's {first natural glider}, as shown below.  A\n   {ghost Herschel} in the pattern below marks the output location:\n",
    "grid": [
      "00000000001100000000000",
      "00000000001100000110000",
      "00000000000000000110000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000011000000",
      "00000000000000011000000",
      "00000000000000000000011",
      "00000000000000000000011",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "01000000000000000000000",
      "01010000000000000000000",
      "01110000000000000000000",
      "00010000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00011011000000000000000",
      "00101010100000000000000",
      "00101001000000000000000",
      "01101000000001110000000",
      "10001100000001000000000",
      "01010010100011000000000",
      "11011001100000000000000"
    ]
  },
  {
    "name": "rabbits",
    "desc": " (stabilizes at time 17331)  A 9-cell {methuselah} found by\n   Andrew Trevorrow in 1986.\n",
    "grid": [
      "1000111",
      "1110010",
      "0100000"
    ]
  },
  {
    "name": "racetrack",
    "desc": "  A pattern in which a {signal} makes its way in a loop\n   through an \"obstacle course\" of reactions in order to demonstrate\n   various ways that the signal can be reflected, temporarily stored,\n   and converted.  The more different reactions that are used the better\n   the racetrack.  David Goodenough built racetracks for p30 and p46\n   {technology} in 1995.  Racetracks are also known for\n   {Herschel conduit} {technology}, and simple ones are useful for\n   building {oscillator}s and {glider gun}s.\n",
    "grid": []
  },
  {
    "name": "rake",
    "desc": "  Any {puffer} whose debris consists of {spaceship}s.  A rake is\n   said to be forwards, backwards or sideways according to the direction\n   of the spaceships relative to the direction of the rake.  Originally\n   the term \"rake\" was applied only to forwards c/2 glider puffers (see\n   {space rake}).  Many people prefer not to use the term in the case\n   where the puffed spaceships travel parallel or anti-parallel to the\n   puffer, as in this case they do not rake out any significant region\n   of the Life plane (and, in contrast to true rakes, these puffers\n   cannot travel in a stream, and so could never be produced by a\n   {gun}).\n     Although the first rakes (circa 1971) were c/2, rakes of other\n   velocities have since been built.  Dean Hickerson's construction of\n   {Cordership}s in 1991 made it easy for c/12 diagonal rakes to be\n   built, although no one actually did this until 1998, by which time\n   David Bell had constructed c/3 and c/5 rakes (May 1996 and September\n   1997, respectively).  Jason Summers constructed a 2c/5 rake in June\n   2000 (building on work by Paul Tooke and David Bell) and a c/4\n   orthogonal rake in October 2000 (based largely on reactions found by\n   David Bell).\n     The smallest possible period for a rake is probably 7, as this\n   could be achieved by a 3c/7 orthogonal backwards glider puffer.  The\n   smallest period attained to date is 8 (Jason Summers' {backrake},\n   March 2001).\n",
    "grid": []
  },
  {
    "name": "$rats",
    "desc": " (p6)  Found by Dave Buckingham, 1972.\n",
    "grid": [
      "000001100000",
      "000000100000",
      "000010000000",
      "110101111000",
      "110100000101",
      "000100111011",
      "000100001000",
      "000011101000",
      "000000010000",
      "000000100000",
      "000000110000"
    ]
  },
  {
    "name": "rattlesnake",
    "desc": " (p11)  Found by Dean Hickerson in January 2016 and named\n   by Jeremy Tan.\n",
    "grid": [
      "0000000011000",
      "0000000010000",
      "0000000001000",
      "0000000011000",
      "0000000000000",
      "0000000000000",
      "0000000000000",
      "0000010000000",
      "0000011000000",
      "1101010111000",
      "1011010101000",
      "0000001001110",
      "0000000110001",
      "0000000001110",
      "0000000001000"
    ]
  },
  {
    "name": "R-bee",
    "desc": "  = {bun}.  This name is due to the fact that the pattern is a\n   single-cell modification of a {beehive}.\n",
    "grid": []
  },
  {
    "name": "reaction envelope",
    "desc": "  The collection of {cell}s that are alive during\n   some part of a given active reaction.  This term is used for\n   {Herschel} {circuit}s and other stable circuitry, whereas\n   {construction envelope} is specific to recipes in {self-constructing}\n   circuitry.\n     There are some subtleties at the edges of the envelope.\n   Specifically, two reactions that have the exact same set of cells\n   defining their envelopes may have different behavior when placed next\n   to a single-cell protrusion like the tail of an {eater1}, or one side\n   of a {tub}.  The difference depends on whether two orthogonally\n   adjacent cells at the edge of the envelope are ever simultaneously\n   alive, within the protruding cell's {zone of influence}.\n",
    "grid": []
  },
  {
    "name": "reanimation",
    "desc": "  A reaction performed by a {convoy} of {spaceship}s (or\n   other moving objects) which converts a common stationary object into\n   a glider without harming the convoy. This provides one way for\n   {signal}s that have been frozen in place by some previous reaction to\n   be released for use.\n     Simple reactions using period 4 c/2 spaceships have been found for\n   reanimating a {block}, {boat}, {beehive}, {ship}, {loaf}, {bi-block},\n   or {toad}.  The most interesting of these is for a {beehive} since it\n   seems to require an unusual p4 spaceship:\n",
    "grid": [
      "0000000000100000000000000000000000",
      "0000000001010000000000000000000000",
      "0000000001010000000000000000000000",
      "0000000000100000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000001110000000000000111",
      "0000000000000010010000011100001001",
      "0000000000000000010000100100000001",
      "0000000000000100010000100010010001",
      "0000000000000000010010001010000001",
      "0011100000000000010100000000110010",
      "0100100000000000000100000000111110",
      "0000100000000001110001000000110000",
      "1000100000000000000000000000000110",
      "1000100000000000000000000000000000",
      "0000100000000000000000000000000000",
      "0101000000000000000100000000000000",
      "0000000000000000001110000000000000",
      "0000000000000000011010000000000000",
      "0000100000000000011100000000000000",
      "0001110000000000011100000000000000",
      "0001011000000000011100000000000000",
      "0000111000000000001100000000000000",
      "0000111000000000000000000000000000",
      "0000110000000000000000000000000000"
    ]
  },
  {
    "name": "reburnable fuse",
    "desc": "  A very rare type of {fuse} whose output is identical\n   to its input, possibly with some spatial and/or temporal offset.  See\n   {lightspeed wire} for an example.  Reburnable fuses are used\n   primarily in the construction of fixed-speed {self-supporting}\n   {macro-spaceship}s, where the speed of the fuse's burning reaction\n   becomes the speed of the spaceship.  Examples include the\n   {Caterpillar}, {Centipede}, and {waterbear}.\n",
    "grid": []
  },
  {
    "name": "receiver",
    "desc": "  See {Herschel receiver}.\n",
    "grid": []
  },
  {
    "name": "recipe",
    "desc": "  = {glider synthesis} or {construction recipe}.\n",
    "grid": []
  },
  {
    "name": "recovery time",
    "desc": "  The number of {tick}s that must elapse after a {signal}\n   is sent through a {conduit}, before another signal can be safely sent\n   on the same path.  In general, a lower recovery time means a more\n   useful conduit.  For example, the {Snark}'s very low recovery time\n   allowed for the creation of {oscillator}s with previously unknown\n   {period}s, 43 and 53.\n     For the most part this is a synonym for {repeat time}.  However,\n   {overclocking} a complex circuit can often allow it to be used at a\n   {repeat time} much lower than its safe recovery time.\n",
    "grid": []
  },
  {
    "name": "rectifier",
    "desc": "  The smallest known 180-degree {reflector}, discovered by\n   Adam P. Goucher in 2009.  It was the smallest and fastest stable\n   reflector of any kind until the discovery of the {Snark} in 2013. The\n   rectifier has the same output glider as the {boojum reflector} but a\n   much shorter {repeat time} of only 106 ticks.\n     Another advantage of the rectifier is that the output glider is on\n   a {transparent lane}, so it can be used in logic circuitry to merge\n   two signal paths.\n",
    "grid": [
      "00100000000000000000000000000000000000000000",
      "10100000000000000000000000000000000000000000",
      "01100000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000100000000000000000000000000000",
      "00000000000001010000000000000000000000000000",
      "00000000000001010000000000000000000000000000",
      "00000000000000100000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000110000000000000000000",
      "00000000000000000000000110000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000110000000000000000000000000000000000000",
      "00001010000000000000000000000000000000000000",
      "00001000000000000000000000000000000000000000",
      "00011000000000000000000000000000000000000000",
      "00000000000000000000000000000000001100000000",
      "00000000000000000000000000000000010010011000",
      "00000000000000000000000000000000010100001000",
      "00000000000000110000000000000000001000001011",
      "00000000000001010000000000000000000001101010",
      "00000000000001000000000000000000000001001001",
      "00000000000011000000000000000000001000010011",
      "00000000000000000000000000000000001111100000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000011010000",
      "00000000000000000000000000000000000010110000",
      "00000000000000000000000000001110000000000000",
      "00000000000000000000000000001000000000000000",
      "00000000000000000000000000000100000000000000"
    ]
  },
  {
    "name": "recursive filter",
    "desc": "  A {toolkit} developed by Alexey Nigin in July 2015,\n   which enables the construction of patterns with population growth\n   that asymptotically matches an infinite number of different\n   superlinear functions.  Toolkits enabling other, sublinear infinite\n   series had been completed by Dean Hickerson and Gabriel Nivasch in\n   2006.  See {quadratic filter} and {exponential filter}.\n     Sublinear functions are possible using the recursive-filter toolkit\n   as well.  It can be used to construct a glider-emitting pattern with\n   a slowness rate S(t) = O(log***...*(t)), the nth-level iterated\n   logarithm of t, which asymptotically dominates any\n   primitive-recursive function f(t).\n",
    "grid": []
  },
  {
    "name": "reflector",
    "desc": "  Any {stable} or oscillating pattern that can reflect some\n   type of {spaceship} (usually a {glider}) without suffering permanent\n   damage.  A pattern that is damaged or destroyed during the reflection\n   process is generally called a {one-time} {turner} instead.\n     The first known reflector was the {pentadecathlon}, which functions\n   as a 180-degree glider reflector (see {relay}).  Other examples\n   include the {buckaroo}, the {twin bees shuttle} and some oscillators\n   based on the {traffic jam} reaction.  Glider {gun}s can also be made\n   into reflectors, although these are mostly rather large.\n     In September 1998 Noam Elkies found some fast small-period glider\n   reflectors, with {oscillator}s supplying the required {domino}\n   {spark}s at different periods.  A {figure-8} produced a {p8 bouncer},\n   and a {p6 pipsquirter} produced an equivalent {p6 bouncer}.  A more\n   complicated construction allows a {p5 bouncer} (which, as had been\n   anticipated, soon led to a {true} p55 {Quetzal} gun).  And in August\n   1999 Elkies found a suitable {sparker} to produce a {p7 bouncer},\n   allowing the first p49 oscillator to be constructed.\n     These were all called simply \"p5 reflector\", \"p6 reflector\", etc.,\n   until 6 April 2016 when Tanner Jacobi discovered an equally small and\n   simple reaction, the {bumper}, starting with a {loaf} as {bait}\n   instead of a {boat}.  This resulted in a series of periodic\n   {colour-preserving} reflectors, whereas Elkies' {bouncer} reflectors\n   are all {colour-changing}.  A useful mnemonic is that \"bouncer\"\n   contains a C and is colour-changing, whereas \"bumper\" contains a P\n   and is colour-preserving.\n     Stable reflectors are special in that if they satisfy certain\n   conditions they can be used to construct {oscillator}s of all\n   sufficiently large periods.  It was known for some time that stable\n   reflectors were possible (see {universal constructor}), but no one\n   was able to construct an explicit example until Paul Callahan did so\n   in October 1996.\n     Callahan's original reflector has a {repeat time} of 4840, soon\n   improved to 1686, then 894, and then 850.  In November 1996 Dean\n   Hickerson found a variant in which this is reduced to 747.  Dave\n   Buckingham reduced it to 672 in May 1997 using a somewhat different\n   method, and in October 1997 Stephen Silver reduced it to 623 by a\n   method closer to the original.  In November 1998 Callahan reduced\n   this to 575 with a new initial reaction.  A small modification by\n   Silver a few days later brought this down to 497.\n     In April 2001 Dave Greene found a 180-degree stable reflector with\n   a repeat time of only 202 (see {boojum reflector}).  This reflector\n   won bounties offered by Dieter Leithner and Alan Hensel.  Half of the\n   prize money was recycled into a new prize for a small 90-degree\n   reflector, which in turn was won by Mike Playle's {colour-preserving}\n   {Snark} reflector.  The Snark is currently the smallest known stable\n   reflector, with a recovery time of 43.  Playle has offered a $100\n   prize for a {colour-changing} stable reflector contained within a 25\n   by 25 {bounding box}, with a recovery time of 50 generations or less.\n     As of June 2018, the following {splitter} is among the smallest\n   known 90-degree {colour-changing} {reflector}s.  The top output can\n   be blocked off by an {eater} if needed.  For small 180-degree\n   colour-changing reflectors see {rectifier}, and also the sample\n   pattern in {splitter}.\n",
    "grid": [
      "00000000000000001100000000000100000011000000000000000000",
      "00000000000000001100000000001010000100100000000000000000",
      "00000000000000000000000000001010001011100110000000000000",
      "00000000000000000000000000011011010100000010000000000000",
      "00000000000000000000000000000001010001100010100000000000",
      "00000000000000000000000000011010011110100001100000000000",
      "00000000000000000000000000011010100010000000000000000000",
      "00000000000000000000000000000001010001000000000000000000",
      "00000000000000000000000000000000101000100000000000000000",
      "00000000000000000000000000000000010001100000000000000100",
      "00000000000000000000000000000000000000000000000000001010",
      "00000000000000000000000000000000000000000000000000000100",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000011000000000000000000000000000000",
      "00000000000000000000000011000000000000000000000000000000",
      "00000000011000000000000000000000000000000000000000000000",
      "00000000100100000000000000000000000000000000000000000000",
      "00000001011000000000000000000000000000000000000000000110",
      "00000001000000000000000000000000000000000000000000000110",
      "00000011000000000000000000000000000000000000000000000000",
      "00000000000000000000011000000000000000000000000000000000",
      "00000000000000000000010000000000000000000000000000000000",
      "00000000000000000000001110000000000000000000000000000000",
      "00000000000000000000000010000011000000000000000000000000",
      "00000000000000000000000000000101000000000000000000000000",
      "00000000000000000000000000000100000000000000000000000000",
      "00000000000000000000000000001100000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000010000000000000001100",
      "00000000000000000000000000000000000101000000000000001010",
      "00000000000000000000000000000000000101000000000000000010",
      "00000000000000000000000000000000000010000000000000000011",
      "11100000000000000000000000000000000000001100000000000000",
      "00100000000000000000000000000000000000001010000000000000",
      "01000000000000000000000000000000000000000010000000000000",
      "00000000000000000000000000000000000000000011000000000000"
    ]
  },
  {
    "name": "reflectorless rotating oscillator",
    "desc": "  A pattern that rotates itself 90 or\n   180 degrees after some number of {generation}s, with the additional\n   constraint that multiple non-interacting copies of the pattern can be\n   combined into a new oscillator with a period equal to the appropriate\n   fraction of the component oscillators' period. The second constraint\n   disqualifies small time-symmetric {oscillator}s such as the {blinker}\n   and {monogram}.\n     A working RRO might look something like a {pi orbital} or\n   {p256 gun} loop containing one or more {pi}s or {Herschel}s in the\n   same loop, but without any external stabilisation mechanism.  Such\n   patterns can be proven to exist (see {universal constructor}), but as\n   of June 2018 none have been explicitly constructed in Life.  There is\n   no upper limit on {multiplicity} for a constructor-based RRO.\n",
    "grid": []
  },
  {
    "name": "regulator",
    "desc": "  An object which converts input {glider}s aligned to some\n   period to output gliders aligned to a different period.  The most\n   interesting case is a {universal regulator}, of which several have\n   been constructed by Paul Chapman and others.\n",
    "grid": []
  },
  {
    "name": "relay",
    "desc": "  Any {oscillator} in which {spaceship}s (typically {glider}s)\n   travel in a loop.  The simplest example is the p60 one shown below\n   using two {pentadecathlon}s.  Pulling the pentadecathlons further\n   apart allows any period of the form 60+120n to be achieved.  This is\n   the simplest proof of the existence of oscillators of arbitrarily\n   large period.\n",
    "grid": [
      "00000000000000000000000000010000100",
      "00000000000000001100000001101111011",
      "00000000000000000110000000010000100",
      "00000000000000001000000000000000000",
      "00100001000000000000000000000000000",
      "11011110110000000000000000000000000",
      "00100001000000000000000000000000000"
    ]
  },
  {
    "name": "repeater",
    "desc": "  Any {oscillator} or {spaceship}.\n",
    "grid": []
  },
  {
    "name": "repeat time",
    "desc": "  The minimum number of generations that is possible\n   between the arrival of one object and the arrival of the next.  This\n   term is used for things such as {reflector}s or {conduit}s where the\n   {signal} objects ({glider}s or {Herschel}s, for example) will\n   interact fatally with each other if they are too close together, or\n   one will interact fatally with a disturbance caused by the other.\n   For example, the repeat time of Dave Buckingham's 59-step B-heptomino\n   to Herschel conduit (shown under {conduit}) is 58.\n",
    "grid": []
  },
  {
    "name": "rephaser",
    "desc": "  The following reaction that shifts the phase and path of a\n   pair of gliders.  There is another form of this reaction,\n   {glider-block cycle}, that reflects the gliders 180 degrees.\n",
    "grid": [
      "00100100",
      "10100101",
      "01100110",
      "00000000",
      "00000000",
      "00011000",
      "00011000"
    ]
  },
  {
    "name": "replicator",
    "desc": "  A finite pattern which repeatedly creates copies of\n   itself.  Such objects are known to exist (see\n   {universal constructor}), but no concrete example is known.  The\n   {linear propagator} may be considered to be the first example of a\n   replicator built in Life, but this is debatable as each of its copies\n   replicates itself only once, allowing no possibility of\n   {superlinear growth}.\n",
    "grid": []
  },
  {
    "name": "reverse caber tosser",
    "desc": "  A storage mechanism for data feeding a\n   {universal constructor} designed by Adam P. Goucher in 2018.  A very\n   large integer can be encoded in the position of a very faraway\n   object.  If the distance to that object is measured using {circuit}ry\n   designed to be as simple as possible, a complete decoder and\n   universal constructor can be created by colliding a small number of\n   gliders - no more than 329 according to a June 2018\n   {glider synthesis}, and exactly 43 according to a July 1 redesign by\n   Chris Cain using eight far-distant {GPSE}s and, amazingly, no\n   stationary circuitry except for a single {catalyst} {block}.  Some\n   intermediate designs with 50+ gliders need no stationary circuitry at\n   all.\n     With the correct placement of the faraway object, the complete\n   pattern is theoretically capable of building any glider-constructible\n   object.  This means that 43 is the maximum number of gliders required\n   to build any constructible object, no matter what size.  However, it\n   is not possible to determine in practice what the locations of these\n   43 gliders should be, even for a relatively simple construction.\n",
    "grid": []
  },
  {
    "name": "reverse fuse",
    "desc": "  A {fuse} that produces some initial debris, but then\n   burns {clean}ly.  The following is a simple example.\n",
    "grid": [
      "000000000000011",
      "000000000000101",
      "000000000001000",
      "000000000010000",
      "000000000100000",
      "000000001000000",
      "000000010000000",
      "000000100000000",
      "000001000000000",
      "000010000000000",
      "000100000000000",
      "001000000000000",
      "110000000000000"
    ]
  },
  {
    "name": "revolver",
    "desc": " (p2)\n",
    "grid": [
      "10000000000001",
      "11100001000111",
      "00010101001000",
      "00100000010100",
      "00101000000100",
      "00010010101000",
      "11100010000111",
      "10000000000001"
    ]
  },
  {
    "name": "RF28B",
    "desc": "  A {converter} with several known forms, many of which found by\n   Dave Buckingham in 1972 and in the early 1980s.  It accepts an\n   {R-pentomino} as input and produces an output {B-heptomino} 28 ticks\n   later.  Of nine major variants known as of July 2018, four versions\n   are shown below.  For each version, the R-pentomino inputs are shown\n   near the left and right edges, along with the B-heptomino output\n   locations near the center.\n",
    "grid": [
      "00000000100000000000000000000000000100000000",
      "00000001010000000100000000000000001010000001",
      "00000000100000011100000000000000000100000111",
      "00000000000000100000000000000000000000001000",
      "00000000000000110000000000000000000000001100",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000010000000000100000000100000000001000000",
      "00000011000000000010000001000000000011000000",
      "00000110000000000011000011000000000001100000",
      "00000000000000000110000001100000000000000000",
      "00000000000000000100000000100000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000",
      "00000010000000000100000000100000000001000000",
      "00000011000000000010000001000000000011000000",
      "00000110000000000011000011000000000001100000",
      "00000000000000000110000001100000000000000000",
      "00000000000000000100000000100000000000000000",
      "00000000000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000000",
      "01010000000000000000000000000000010000000000",
      "10010000000000000000000000000000101000000000",
      "01100000000000000000000000000000011000000000"
    ]
  },
  {
    "name": "RF48H",
    "desc": "  Stephen Silver's alternate completion of Paul Callahan's\n   {Herschel receiver}.  As of June 2018 there are four known variants.\n   The original version consists of a single {loaf}.  A {ghost Herschel}\n   marks the output location.\n",
    "grid": [
      "0000001000000000000000000100",
      "0000001100000000000000000100",
      "0000011000000000000000000111",
      "0000000000000000000000000001",
      "0000000000000000000000000000",
      "0110000000000000000000000000",
      "1001000000000000000000000000",
      "1010000000000000000000000000",
      "0100000000000000000000000000"
    ]
  },
  {
    "name": "Rich's p16",
    "desc": "  A period 16 oscillator found by Rich Holmes in July 2016,\n   using {apgsearch}.  For its use as a {filter} see for example\n   {p48 gun}.\n",
    "grid": [
      "0000100010000",
      "0011010101100",
      "0100010100010",
      "1000110110001",
      "1010000000101",
      "0100000000010",
      "0000000000000",
      "0000110110000",
      "0001010101000",
      "0000100010000"
    ]
  },
  {
    "name": "ring of fire",
    "desc": " (p2)  The following {muttering moat} found by Dean\n   Hickerson in September 1992.\n",
    "grid": [
      "0000000000000000100000000000000000",
      "0000000000000010101000000000000000",
      "0000000000001010101010000000000000",
      "0000000000101010101010100000000000",
      "0000000010101001101010101000000000",
      "0000001010101000000100101010000000",
      "0000101010010000000000101010100000",
      "0000011010000000000000010010101000",
      "0001000100000000000000000010110000",
      "0000111000000000000000000001000100",
      "0010000000000000000000000000111000",
      "0001100000000000000000000000000010",
      "0100010000000000000000000000001100",
      "0011110000000000000000000000010001",
      "1000000000000000000000000000001110",
      "0111000000000000000000000000000001",
      "1000100000000000000000000000111100",
      "0011000000000000000000000000100010",
      "0100000000000000000000000000011000",
      "0001110000000000000000000000000100",
      "0010001000000000000000000001110000",
      "0000110100000000000000000010001000",
      "0001010100100000000000000101100000",
      "0000010101010000000000100101010000",
      "0000000101010010000001010101000000",
      "0000000001010101011001010100000000",
      "0000000000010101010101010000000000",
      "0000000000000101010101000000000000",
      "0000000000000001010100000000000000",
      "0000000000000000010000000000000000"
    ]
  },
  {
    "name": "rle",
    "desc": "  Run-length encoded.  Run-length encoding is a simple (but not\n   very efficient) method of file compression.  In Life the term refers\n   to a specific ASCII encoding used for patterns in Conway's Life and\n   other similar cellular automata.  This encoding was introduced by\n   Dave Buckingham and is now the usual means of exchanging relatively\n   small patterns by email or in online forum discussions.\n     As an example of the rle format, here is a representation of the\n   {Gosper glider gun}.  The \"run lengths\" are the numbers, b's are dead\n   cells, o's are live cells, and dollar signs signal new lines:\n",
    "grid": []
  },
  {
    "name": "R-mango",
    "desc": "  A small active reaction, so named because it is a single-cell\n   modification of a {mango}, but now more commonly known as {dove}.\n",
    "grid": []
  },
  {
    "name": "RNE-19T84",
    "desc": "  The following {edge shooter} {converter}, accepting an\n   input {R-pentomino} and producing a glider heading northeast (if the\n   R-pentomino is in standard orientation).\n",
    "grid": [
      "000000000000000001000000000",
      "000000000000000111000000000",
      "000000000000001000000000000",
      "000100000000001100000000000",
      "001010000000000000000000000",
      "001010000000000000000000000",
      "011011000000000000000000001",
      "010000000000000000000000111",
      "001011000000000000000001000",
      "101011000000000000000001100",
      "110000000000000000000000000",
      "000000000000010000000000000",
      "000000000000111000001100000",
      "000000000000100000010010000",
      "000000000000000000001100000"
    ]
  },
  {
    "name": "rock",
    "desc": "  Dean Hickerson's term for an {eater} which remains intact\n   throughout the eating process.  The {snake} in Dave Buckingham's\n   59-step B-to-Herschel conduit (shown under {conduit}) is an example.\n   Other still lifes that sometimes act as rocks include the {tub}, the\n   {hook with tail}, the {eater1} (eating with its tail) and the {hat}\n   (in Heinrich Koenig's stabilization of the {twin bees shuttle}).\n",
    "grid": []
  },
  {
    "name": "roteightor",
    "desc": " (p8)  Found by Robert Wainwright in 1972.  See also\n   {multiple roteightors}.\n",
    "grid": [
      "01000000000000",
      "01110000000011",
      "00001000000010",
      "00011000001010",
      "00000000001100",
      "00000000000000",
      "00000111000000",
      "00000100100000",
      "00000100000000",
      "00110010001000",
      "01010000001000",
      "01000000010000",
      "11000000001110",
      "00000000000010"
    ]
  },
  {
    "name": "rotor",
    "desc": "  The cells of an {oscillator} that change state.  Compare\n   {stator}.  It is easy to see that any rotor cell must be adjacent to\n   another rotor cell.\n",
    "grid": []
  },
  {
    "name": "R-pentomino",
    "desc": "  This is by far the most active {polyomino} with less than\n   six cells: all the others stabilize in at most 10 generations, but\n   the R-pentomino does not do so until generation 1103, by which time\n   it has a {population} of 116, including six {glider}s.\n",
    "grid": [
      "011",
      "110",
      "010"
    ]
  },
  {
    "name": "RRO",
    "desc": "  = {reflectorless rotating oscillator}\n",
    "grid": []
  },
  {
    "name": "rule 22",
    "desc": "  Wolfram's rule 22 is the 2-state 1-D {cellular automaton} in\n   which a cell is ON in the next generation if and only if exactly one\n   of its three neighbours is ON in the current generation (a cell being\n   counted as a neighbour of itself).  This is the behaviour of Life on\n   a cylinder of width 1.\n",
    "grid": []
  },
  {
    "name": "ruler",
    "desc": "  A pattern constructed by Dean Hickerson in April 2005 that\n   produces a stream of {LWSS} with gaps in it, such that the number of\n   LWSS between successive gaps follows the \"ruler function\" (sequence\n   A001511 in The On-Line Encyclopedia of Integer Sequences).\n",
    "grid": []
  },
  {
    "name": "rumbling river",
    "desc": "  Any {oscillator} in which the {rotor} is connected and\n   contained in a strip of width 2.  The following p3 example is by Dean\n   Hickerson, November 1994.\n",
    "grid": [
      "0000000000000011000000110000001100010110000000000",
      "0000100000000100100001001000010010011010000000000",
      "1001010000100011001000110010001010000010110000000",
      "1111010011111100111111001111110011111101010000000",
      "0000010100000101000001010000010100000101000000110",
      "0011010101010001010100010101000101010001010000010",
      "0100000101000101010001010100010101000101010101100",
      "0110000001010000010100000101000001010000010100000",
      "0000000101011111100111111001111110011111100101111",
      "0000000110100000101000100110001001100010000101001",
      "0000000000101100100100001001000010010000000010000",
      "0000000000110100011000000110000001100000000000000"
    ]
  },
  {
    "name": "Rx202",
    "desc": "  A {composite conduit}, one of the original sixteen\n   {Herschel conduit}s, discovered by Dave Buckingham in May 1997.  It\n   is made up of two {elementary conduit}s,  HR143B + {BFx59H}.  After\n   202 ticks, it produces an inverted {Herschel} turned 90 degrees\n   clockwise at (7, 32) relative to the input.  Its {recovery time} is\n   201 ticks.  A {ghost Herschel} in the pattern below marks the output\n   location:\n",
    "grid": [
      "0000000000000011000000000000000",
      "0000000000011001000000000000000",
      "0000000001110110000001000000000",
      "0000000010000000000111000000000",
      "0000000001110110001000000000000",
      "0000000000010110001100000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000011000000",
      "0000000000000000000000010000000",
      "0000000000000000000001010000000",
      "0000000000000000000001100000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0001000000000000000000000000000",
      "0001010000000000000000000000000",
      "0001110000000000000000000000000",
      "0000010000000000000000000000000",
      "0000000000000000000000110000000",
      "0000000000000000000000110000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "1011000000000000000000000000000",
      "1101000000000000000000000000000",
      "0000000000000000000001100000000",
      "0000000001100000000010010011000",
      "0000000001100000000010100001000",
      "0000000000000000000001000001011",
      "0000000000000000000000001101010",
      "0000000000000000000000001001001",
      "0000000000000000000001000010011",
      "0000000000000000000001111100000",
      "0000000000000000000000000000000",
      "0000000000000000000111111100000",
      "0000000000000000000100100100000",
      "0000000000000000010100000000000",
      "0000000000000000011000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000000000000000000000000000",
      "0000000001110000000000000000000",
      "0000000000010000000000000000000",
      "0000000000011000000000000000000"
    ]
  },
  {
    "name": "S",
    "desc": "  Usually means {big S}, but may sometimes mean {paperclip}.\n",
    "grid": []
  },
  {
    "name": "sailboat",
    "desc": " (p16)  A {boat} {hassle}d by a {Kok's galaxy}, a {figure-8}\n   and two {eater3}s.  Found by Robert Wainwright in June 1984.\n",
    "grid": [
      "00000000100000000000100000000",
      "00000001010000000001010000000",
      "00000000100000000000100000000",
      "00000000000000000000000000000",
      "00000011111000000011111000000",
      "00000100001000000010000100000",
      "00001001000000000000010010000",
      "01001011000000000000011010010",
      "10101000001000000010000010101",
      "01001000010100000101000010010",
      "00001100100100000100100110000",
      "00000000011000000011000000000",
      "00000000000001100000000000000",
      "00000000000001010000000000000",
      "00000000100100100000000000000",
      "00000001000000000000000000000",
      "00000110000000000111000000000",
      "00100000011010000111000000000",
      "00000100010010000111000000000",
      "00000111010001000000111000000",
      "00100000000000100000111000000",
      "00010001011100000000111000000",
      "00001001000100000000000000000",
      "00001011000000100000000000000",
      "00000000001100000000000000000",
      "00000000010000000000000000000",
      "00000100100000000000000000000"
    ]
  },
  {
    "name": "salvo",
    "desc": "  A collection of spaceships, usually gliders, all travelling in\n   the same direction.  Any valid glider construction {recipe} can be\n   partitioned into no more than four salvos.  Compare {flotilla}.  In\n   contrast with a {convoy}, the spaceships in a salvo are usually\n   consumed by the reactions that they cause.  Simple examples include\n   {block pusher} and {block pull}.\n     Salvos may be {slow} or {synchronized}.  The following partially\n   {synchronized} three-glider salvo produces an {LWSS} from a block.\n",
    "grid": [
      "1100000000",
      "1100000000",
      "0000000000",
      "0000000000",
      "1110000000",
      "1000000000",
      "0100000000",
      "0000000000",
      "0000000111",
      "0000000100",
      "0000000010",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000000000",
      "0000000111",
      "0000000100",
      "0000000010"
    ]
  },
  {
    "name": "sawtooth",
    "desc": "  Any finite pattern whose {population} grows without bound\n   but does not tend to infinity.  (In other words, the population\n   reaches new heights infinitely often, but also infinitely often\n   returns to some fixed value.)  Conway's preferred plural is\n   \"sawteeth\".\n     The first sawtooth was constructed by Dean Hickerson in April 1991.\n   The current smallest known sawtooth was found by a conwaylife.com\n   forum user with the online handle 'thunk'.  It has a bounding box of\n   74x60, and is the smallest known sawtooth in terms of its minimum\n   repeating population of 177 cells. The following variant has a higher\n   repeating population of 194 and an optimized bounding box of 62x56:\n",
    "grid": [
      "00000000000000000000000000000000000000000000000000000110100000",
      "00000000000000000000000000000000000000000000000000000101100000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000110000000000000000000000000000000000000000000000000",
      "00000000000110000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000110000000000000000000000000000110000000110000011",
      "00001100000000110000000000000000000000000000000000000110000011",
      "00000100000000000000000000000000000000000001010000000000000000",
      "00001000000110000000000000000000000000000100000000000000110000",
      "00001100000110000000000000000000000001101011000000000000110000",
      "00000000000000000000000000000000000000101100000000000000000000",
      "00000000000000000000000000000000000000010000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000011000000000000000000000000000",
      "00000000000000000000000000000000011000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000110000011000000000000000000000000",
      "00000000000000000000000000000110000011000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000011100000000000000000000000000000000000000",
      "00000000000000000000010010000000000000000000000000000000000000",
      "00000000000000000000010110000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000110000000000001000000000100000000000000000",
      "00000000000000000000100100000000001010000011100000000000000000",
      "00111100000000000000011100000000001100000100000000000000000000",
      "11000011000000000000000000000000000000000110000000000000000000",
      "11000001000000000000000000000000000000000000000000000000000000",
      "00110101000000000000001100000000000000000000000000000000000000",
      "00000001000000000000001100000000000000000000000000000000000000",
      "00010001000000000000000000000000001000010000000000000000000000",
      "00010000100000000000000000000000110000010000000000000000000000",
      "00000111000100000000000000000000011000101000000000000000000000",
      "00000110000100000000000000000000000001101100000000000000000000",
      "00000000000110000000000000000000000010000010000000000000000000",
      "00000000000001000000000000000000000000010000000000000000000000",
      "00000000000001110000000000000000000011000110000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000001000000000000000000000100000000000000000000000",
      "00000000000000010111110000000000000000100000000000000000000000",
      "00000000000000110000010000000000000001000000000000000000000000",
      "00000000000000110001001000000000000000000000000000000000000000",
      "00000000000000000000001000000000000000000000000000000000000000",
      "00000000000000001101001000000000000000011000000000000000000000",
      "00000000000000000001001000000000000000011000000000000000000000",
      "00000000000000000000110000000000000000000000000000000000000000",
      "00000000000000000000110000010000100000000000000000000000000000",
      "00000000000000000000000001101111011000000000000000000000000000",
      "00000000000000000000000000010000100000000000000000000000000000"
    ]
  },
  {
    "name": "SBM",
    "desc": "  = {sliding block memory}\n",
    "grid": []
  },
  {
    "name": "Schick engine",
    "desc": " (c/2 orthogonally, p12)  This {spaceship}, found by Paul\n   Schick in 1972, produces a large {spark} (the 15 live cells at the\n   rear in the {phase} shown below) which can be {perturb}ed by other\n   c/2 spaceships to form a variety of {puffer}s.  See {blinker ship}\n   for an example perturbation of the spark.  The diagram below shows\n   the smallest form of the Schick engine, using two {LWSS}.  It is also\n   possible to use two {MWSS}es or two {HWSS}es, or even an LWSS and an\n   HWSS.\n",
    "grid": [
      "111100000000000000",
      "100010000000001000",
      "100000000000110000",
      "010010011000001110",
      "000000111000000111",
      "010010011000001110",
      "100000000000110000",
      "100010000000001000",
      "111100000000000000"
    ]
  },
  {
    "name": "Schick ship",
    "desc": "  = {Schick engine}\n",
    "grid": []
  },
  {
    "name": "scorpion",
    "desc": " (p1)\n",
    "grid": [
      "0001000",
      "0111000",
      "1000110",
      "1010101",
      "0110101",
      "0000010"
    ]
  },
  {
    "name": "scrubber",
    "desc": " (p2)  Found in 1971.\n",
    "grid": [
      "00001000000",
      "00111000000",
      "01000000000",
      "01001110000",
      "11010001000",
      "00010001000",
      "00010001011",
      "00001110010",
      "00000000010",
      "00000011100",
      "00000010000"
    ]
  },
  {
    "name": "SE",
    "desc": "  = {switch engine}\n",
    "grid": []
  },
  {
    "name": "seal",
    "desc": " (c/6 diagonally, p6)  The first diagonal {c/6 spaceship}, found\n   by Nicolay Beluchenko in September 2005.\n",
    "grid": [
      "0001001100000000000000000000000000",
      "0111010101000000000000000000000000",
      "0100111001100000000000000000000000",
      "1001111110101110000000000000000000",
      "0100111010111110000000000000000000",
      "0000001010101000000000000000000000",
      "1010001010111110000000000000000000",
      "1001010010110001000000000000000000",
      "0001001100000001110000000000000000",
      "0100011111011100110000000000000000",
      "0000100000000010000000000000000000",
      "0010100000000010000000000000000000",
      "0000110111110001000000000000000000",
      "0000001011100100000110000000000000",
      "0000001001000101110110000000000000",
      "0000000011000111010010001000000000",
      "0000000011000011011110001110000000",
      "0000000000000000000101001000000000",
      "0000000000000101000001100110000000",
      "0000000000000100100000101110000010",
      "0000000000000100010000110010001001",
      "0000000000000001110000011000000001",
      "0000000000000001010010010000011001",
      "0000000000000000010011011010010000",
      "0000000000000000100000001010000000",
      "0000000000000000010001111000000000",
      "0000000000000000001000100000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000010000000000",
      "0000000000000000000000101000000000",
      "0000000000000000000001100000000000",
      "0000000000000000000001010000000000",
      "0000000000000000000001100000000000",
      "0000000000000000000000010000000000",
      "0000000000000000000000100000000000"
    ]
  },
  {
    "name": "search program",
    "desc": "  A computer program or script that automates the search\n   for Life objects having certain desired properties.  These are used\n   because the difficulty of finding previously unknown Life objects now\n   commonly exceeds the patience, speed, and accuracy of humans.\n   Various types of search programs are used for finding objects such as\n   {spaceship}s, {oscillator}s, {drifter}s, {catalyst}s, {soup}s,\n   {Garden of Eden}s, and {slow salvo}s.\n     Some search programs generate {partial result}s as they are\n   running, so even if they don't complete successfully, something of\n   use might still be salvaged from the run.\n     Example search programs are {dr}, {lifesrc}, {gfind}, and\n   {Bellman}.\n     There are other types of programs which don't perform searches as\n   such, but instead perform large constructions.  These are used to\n   correctly complete very complicated objects such as the\n   {Caterpillar}, {Gemini}, {Caterloopillar}, and\n   {universal constructor}-based spaceships such as the {Demonoid}s and\n   {Orthogonoid}s.\n",
    "grid": []
  },
  {
    "name": "second glider domain",
    "desc": "  The second glider domain of an {edge shooter} is\n   the set of spacetime offsets, relative to the {glider} {stream}\n   emitted by the edge shooter, where a second independent glider stream\n   may be present without interfering with the edge shooter.  This is\n   useful to know, because edge shooters are often used to generate\n   glider streams very close to other glider streams, to make for\n   example a {spaceship} {gun} or {converter}.\n",
    "grid": []
  },
  {
    "name": "second natural glider",
    "desc": "  The glider produced at T=72 during the\n   {evolution} of a {Herschel}.  This is the common edge-shooting glider\n   output used in the {NW31} converter and several other converter\n   variants.\n",
    "grid": []
  },
  {
    "name": "seed",
    "desc": "  A {constellation} of still lifes and/or oscillators, which can\n   be converted into another Life object when it is struck by one or\n   more gliders.  Usually the resulting object is a rare still life or\n   spaceship, more complex than the original constellation.  {Spartan}\n   single-glider (1G) seeds are more commonly seen than multi-glider\n   seeds, because a Spartan 1G seed can be readily constructed and\n   {trigger}ed using a {slow salvo}.  See also {freeze-dried}.  For\n   example, the following is a 14{sL} 1G seed for a c/7 loafer\n   spaceship.\n",
    "grid": [
      "0000000000000000000000000000000000010000000000",
      "0000000000000000000000000000000000100000000000",
      "0000000000000000000000000000000000111000000000",
      "0000000000000110000000000000000000000000000000",
      "0000000000000010000000000000000000000000000000",
      "0000000000000010100000000000000000000000000000",
      "0000000000000001100000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000",
      "0010100000000000000000000000000000000000000000",
      "0101000000000000000000000000000000000000000000",
      "0110000000000000000000000000000000000000000000",
      "0000000000000011000000000000000000000000000000",
      "0000000000000101000000000000000000000000000000",
      "0000000000000110000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000011000000000000000000000000",
      "0000000000000000000101000000000000000000000000",
      "0000000000100000000010000000000000000000000000",
      "0000000001010000100000000000000000000000000000",
      "0000000000110001010000000000000000000000000000",
      "0000000000000010100000000000000000000000000000",
      "0000000000000011000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000001",
      "0000000000000000000000000110000000000000000111",
      "0000000000000000000011000110000000000000001000",
      "0000000000000000000100100000000000000000001100",
      "0100000000000000000100100000000000000000000000",
      "1010000000000000000011000000000000000000000000",
      "0110000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000001100000000000000000000000",
      "0000000000000000000001010000110000000000000000",
      "0000000000000000000000100000101000000000000000",
      "0000000000000000000000000000011000000000000000",
      "0000000000000000000000000000000001100000000000",
      "0000000000000000000000000000000001100000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000110000000000000000000000",
      "0000000000000000000001001000000000000000000000",
      "0000000000000000000001001000000000000000000000",
      "0000000000000000000000110000000000000000000000"
    ]
  },
  {
    "name": "Seeds of Destruction Game",
    "desc": "  An interactive search application written\n   by Paul Chapman in 2013.  Its primary purpose was to assist in the\n   design of self-destruct circuits in self-constructing circuitry.  It\n   has also regularly been helpful in completing glider syntheses, and\n   was used to find the {31c/240} base reaction for the {shield bug} and\n   {Centipede} spaceships.\n",
    "grid": []
  },
  {
    "name": "self-constructing",
    "desc": "  A type of pattern, generally a {macro-spaceship},\n   that contains encoded construction information about itself, and\n   makes a complete copy of itself using those instructions.  The\n   {Gemini}, {linear propagator}, {spiral growth} patterns, {Demonoid}s\n   and {Orthogonoid} are examples of self-constructing patterns.\n   Self-constructing spaceships often have trivially adjustable speeds.\n   In many cases, the direction of travel can also be altered, less\n   easily, by changing the encoded {construction recipe}.  Compare\n   {self-supporting}, {elementary}.\n",
    "grid": []
  },
  {
    "name": "self-supporting",
    "desc": "  A type of pattern, specifically a {macro-spaceship},\n   that constructs {signal}s or {track}s or other scaffolding to assist\n   its movement, but does not contain complete information about its own\n   structure.  Examples include the Caterpillar, {Centipede},\n   {half-baked knightship}, {waterbear}, and the {Caterloopillar}s.\n   {Caterpillar} has been used as a general term for self-supporting\n   spaceships, but it is not very appropriate for the HBKs.\n     In general a self-supporting pattern cannot be trivially adjusted\n   to alter its speed or direction.  The variable speeds of the HBKs and\n   the Caterloopillars are exceptions, but their direction of travel is\n   fixed, and a specific Caterloopillar can't be made to change its\n   speed without completely rebuilding it.  Compare {self-constructing},\n   {elementary}.\n",
    "grid": []
  },
  {
    "name": "semi-cenark",
    "desc": "  Either of two {semi-Snark} variants discovered by Tanner\n   Jacobi in November 2017.  The name is due to the initial {converter},\n   which produces a {century} output for every two input {glider}s.  The\n   minimum safe repeat time is 43 ticks for the smaller initial\n   {catalyst} shown in {CC semi-cenark} and {CP semi-cenark}, or 42\n   ticks with the slightly larger catalyst variant shown below.  There\n   is also {overclocking} possible at period 36, 38, or 39.  The reset\n   glider can be followed immediately by a new trigger glider, as shown\n   below, so the minimum repeat time for an {intermittent stream} of\n   gliders is only 50 ticks.\n",
    "grid": [
      "101000000000000000000000000000000000",
      "011000000000000000000000000000000000",
      "010000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000101000000000000000000000000",
      "000000000011000000000000000000000000",
      "000000000010000000000000000000000000",
      "000000000000010000000000000000000000",
      "000000000000001100000000000000000000",
      "000000000000011000000000000000000000",
      "000000000000000000000000000001000000",
      "000000000000000000000000000111000000",
      "000000000000000000000000001000000000",
      "000000000000000000000000001100000000",
      "000000000000000000000000000000000000",
      "000000000000000000000000000000000000",
      "000000000000000000000010000000000000",
      "000000000000001100000001100100000000",
      "000000000000001001000011001010000000",
      "000000000000110011000000001100000000",
      "000000000001001100000000000000000000",
      "000000000001100011000000000000000000",
      "000000000000000010100000000000000000",
      "000000000000000001000000000000000000",
      "000000000000000000000000000000000011",
      "000000000000000000000000000000001001",
      "000000000000000000000110000000001110",
      "000000000000000000000010000001000000",
      "000000000000000000011100000001111000",
      "000000000000000000010000000000001000",
      "000000000000000000000000000000010000",
      "000000000000000000000000000000011000"
    ]
  },
  {
    "name": "semi-Snark",
    "desc": "  Any small {stable} {signal} {conduit} that produces one\n   output glider for every two input gliders, with a 90 degree\n   reflection.  These can act as period-doublers for any glider stream\n   whose period is at least equal to their repeat time, and so adding\n   one of these to a single glider {gun} often results in a pattern much\n   smaller than the older {technology} of crossing the output of two\n   guns.\n     The available semi-Snarks differ in their complexity, size, repeat\n   time, and the colour of their output gliders.  The {CC semi-Snark}\n   was the first one found, and the term \"semi-Snark\" is often used\n   specifically for this object.  The \"CC\" prefix stands for\n   {colour-changing}, by contrast with the more recently discovered\n   {colour-preserving} {CP semi-Snark}.\n     There are also CC and CP variants of a semi-Snark based on a\n   two-{glider} to {century} {converter} discovered by Tanner Jacobi in\n   November 2017.  These {semi-cenark}s are the fastest semi-Snarks\n   known as of July 2018, with a {repeat time} as low as 50 ticks, or a\n   periodic input rate as low as 36 ticks.\n",
    "grid": []
  },
  {
    "name": "sesquihat",
    "desc": " (p1)  Halfway between a {hat} and a {twinhat}.\n",
    "grid": [
      "0000100",
      "1101010",
      "0101010",
      "0101011",
      "0010000"
    ]
  },
  {
    "name": "SGR",
    "desc": "  Abbreviation for {stable} {glider} {reflector}.  This term is no\n   longer in use.\n",
    "grid": []
  },
  {
    "name": "shield bug",
    "desc": " (31c/240 orthogonally, p240)  The first 31c/240\n   {macro-spaceship}, constructed by Dave Greene on September 9, 2014.\n",
    "grid": []
  },
  {
    "name": "shillelagh",
    "desc": " (p1)\n",
    "grid": [
      "11000",
      "10011",
      "01101"
    ]
  },
  {
    "name": "ship",
    "desc": " (p1)  The term is also used as a synonym of {spaceship}.\n",
    "grid": [
      "110",
      "101",
      "011"
    ]
  },
  {
    "name": "ship in a bottle",
    "desc": " (p16)  Found by Bill Gosper in August 1994. See also\n   {bottle}.\n",
    "grid": [
      "000011000000110000",
      "000100100001001000",
      "000101000000101000",
      "011001110011100110",
      "100000010010000001",
      "101100000000001101",
      "010100000000001010",
      "000110001100011000",
      "000000010100000000",
      "000000011000000000",
      "000110000000011000",
      "010100000000001010",
      "101100000000001101",
      "100000010010000001",
      "011001110011100110",
      "000101000000101000",
      "000100100001001000",
      "000011000000110000"
    ]
  },
  {
    "name": "ship on boat",
    "desc": "  = {ship tie boat}\n",
    "grid": []
  },
  {
    "name": "ship on ship",
    "desc": "  = {ship-tie}\n",
    "grid": []
  },
  {
    "name": "ship-tie",
    "desc": " (p1)  The name is by analogy with {boat-tie}.\n",
    "grid": [
      "110000",
      "101000",
      "011000",
      "000110",
      "000101",
      "000011"
    ]
  },
  {
    "name": "ship tie boat",
    "desc": " (p1)\n",
    "grid": [
      "110000",
      "101000",
      "011000",
      "000110",
      "000101",
      "000010"
    ]
  },
  {
    "name": "short keys",
    "desc": " (p3)  Found by Dean Hickerson, August 1989.  See also\n   {bent keys} and {odd keys}.\n",
    "grid": [
      "010000000010",
      "101110011101",
      "010010010010",
      "000010010000"
    ]
  },
  {
    "name": "shotgun",
    "desc": "  A {gun} that fires a {salvo} of multiple {spaceship}s, almost\n   always {glider}s, on parallel {lane}s.  Two to four shotguns are\n   often combined to turn a {glider synthesis} into a gun or {factory}\n   for that synthesis.\n",
    "grid": []
  },
  {
    "name": "shoulder",
    "desc": "  The fixed upper end of a {construction arm}, generally\n   consisting of one or more glider {gun}s or {edge shooter}s aimed at\n   an {elbow} object.\n",
    "grid": []
  },
  {
    "name": "shuttle",
    "desc": "  Any {oscillator} which consists of an active region moving\n   back and forth between stabilizing objects.  The most well-known\n   examples are the {queen bee shuttle} (which has often been called\n   simply \"the shuttle\") and the {twin bees shuttle}.  See also\n   {p54 shuttle}, {p130 shuttle} and {Eureka}.  Another example is the\n   p72 {R-pentomino} shuttle that forms part of the pattern given under\n   {factory}.\n",
    "grid": []
  },
  {
    "name": "siamese",
    "desc": "  A term used in naming certain {still life}s (and the {stator}\n   part of certain {oscillator}s).  It indicates that the object\n   consists of two smaller objects sharing two or more cells.  See\n   {snake siamese snake} and {loaf siamese barge} for examples.\n",
    "grid": []
  },
  {
    "name": "side",
    "desc": "  Half a {sidewalk}.  In itself this is unstable and requires an\n   {induction coil}.\n",
    "grid": [
      "11000",
      "10111",
      "00001"
    ]
  },
  {
    "name": "sidecar",
    "desc": "  A small {tagalong} for an {HWSS} that was found by Hartmut\n   Holzwart in 1992.  The resulting {spaceship} (shown below) has a\n   {phase} with only 24 cells, making it in this respect the smallest\n   known spaceship other than the {standard spaceship}s and some trivial\n   two-spaceship {flotilla}s derived from them.  Note also that an HWSS\n   can support two sidecars at once.\n",
    "grid": [
      "01000000",
      "10000010",
      "10000010",
      "11111010",
      "00000000",
      "00001100",
      "00100001",
      "01000000",
      "01000001",
      "01111110"
    ]
  },
  {
    "name": "side-shooting gun",
    "desc": "  = {slide gun}\n",
    "grid": []
  },
  {
    "name": "sidesnagger",
    "desc": "  A {Spartan} eater found by Chris Cain in May 2015 with\n   functionality similar to the {eater5}, as shown below.  It has one\n   {lane} less diagonal {clearance} on the high-clearance side than\n   other eater5 variants, due to the presence of the boat.  A good use\n   of the sidesnagger can be seen in {p130 shuttle}.  See also\n   {highway robber}.\n",
    "grid": [
      "0010000000000000",
      "1010000000000000",
      "0110000000000000",
      "0000000000000000",
      "0000000000000000",
      "0000000000000000",
      "0000000001000000",
      "0000000010000000",
      "0000000011100000",
      "0000000000000000",
      "0000000000000000",
      "0000000001000000",
      "0000000010100000",
      "0000000100100011",
      "0000000011000011",
      "0000100000000000",
      "0001010000000000",
      "0001100000000000",
      "0000000001100000",
      "0000000001100000"
    ]
  },
  {
    "name": "side-tracking",
    "desc": "  See {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "sidewalk",
    "desc": " (p1)\n",
    "grid": [
      "011011",
      "001010",
      "010010",
      "010100",
      "110110"
    ]
  },
  {
    "name": "siesta",
    "desc": " (p5)  Found by Dave Buckingham in 1973.  Compare {sombreros}.\n",
    "grid": [
      "0000000000011000",
      "0001100000101000",
      "0001010000100000",
      "0000010001101000",
      "0001011000001110",
      "0111000001010001",
      "1000101000001110",
      "0111000001101000",
      "0001011000100000",
      "0000010000101000",
      "0001010000011000",
      "0001100000000000"
    ]
  },
  {
    "name": "signal",
    "desc": "  Movement of information through the Life universe.  Signals\n   can be carried by {spaceship}s, {fuse}s, {drifter}s, or {conduit}s.\n   Spaceships can only transfer a signal at the speed of the spaceship,\n   while fuses can transfer a signal at speeds up to the\n   {speed of light}.\n     In practice, many signals are encoded as the presence or absence of\n   a {glider} or other spaceship at a particular point at a particular\n   time.  Such signals can be combined by the collision of gliders to\n   form logic operations such as AND, OR, and NOT gates. Signals can be\n   duplicated using {glider duplicator}s or other {fanout} devices, and\n   can be used up by causing {perturbation}s on other parts of the Life\n   object.\n     Signals are used in {Herschel conduit} circuitry,\n   {universal constructor}s, {macro-spaceship}s, and other computational\n   patterns such as the {pi calculator} and {Osqrtlogt} patterns.\n",
    "grid": []
  },
  {
    "name": "signal elbow",
    "desc": "  A {conduit} with  {signal} output 90 degrees from its\n   input.  This term is commonly used only for signal {wire}s,\n   particularly {2c/3} signals.  A {Snark} could reasonably be called a\n   \"glider elbow\", but {glider reflector} is the standard term.  A\n   signal elbow with a {recovery time} less than 20 ticks would enable a\n   trivial proof that Conway's Life is {omniperiodic}.\n     A near miss is the following elbow-like {converter} found by Dean\n   Hickerson.  It successfully turns a 2c/3 signal by 90 degrees, but\n   unfortunately changes it to a double-length signal in the process.\n   This means that further copies of the converter can not be appended\n   (e.g., to make a closed loop).\n",
    "grid": [
      "0000000000000000000000001001000000",
      "0000000000000000000000001111110000",
      "0000000000000000000000000000001011",
      "0000000000000000000000111110101011",
      "0000000000000000000001000000101000",
      "0000000000000000000001111100101000",
      "0000000000000000001000000010110000",
      "0000000000000000001111110010000000",
      "0000000000000000000000001010000000",
      "0000000000000000111111001011000000",
      "0000000000110001000000101000000000",
      "0000000001001001111100101000000000",
      "0000000010111000000010110000000000",
      "0000110101000111110010000000000000",
      "0000010100010000001010000000000000",
      "0000010100111111001011000000000000",
      "0001010101000000101000000000000000",
      "0010110010111100101000000000000000",
      "0010001010100010110000000000000000",
      "1101101010001010000000000000000000",
      "0101001011110101110000000000000000",
      "1001010000000100010000000000000000",
      "0111001111111100000000000000000000",
      "0000101000000000000000000000000000",
      "0001101001111111000000000000000000",
      "0010011010000000100000000000000000",
      "0011000010011111100000000000000000",
      "0000000010100000000000000000000000",
      "0000000110100111111000000000000000",
      "0000000000101000000100000000000000",
      "0000000000101001111100000000000000",
      "0000000000011010000000100000000000",
      "0000000000000010011111100000000000",
      "0000000000000010100000000000000000",
      "0000000000000110100111111000000000",
      "0000000000000000101000000101100000",
      "0000000000000000101001111101100000",
      "0000000000000000011010000000000000",
      "0000000000000000000010011111100000",
      "0000000000000000000010100000100000",
      "0000000000000000000110100111000000",
      "0000000000000000000000101000001100",
      "0000000000000000000000100100001100",
      "0000000000000000000000011000000000"
    ]
  },
  {
    "name": "Silver G-to-H",
    "desc": "  A variant of the {Silver reflector} made by\n   substituting an {Fx119} conduit for the final {NW31}, allowing a\n   Herschel output as well as the beehive-annihilating reset glider.  It\n   is still {Spartan}, and as long as the Fx119 is followed by a\n   {dependent conduit}, it retains the faster 497-tick {recovery time}.\n",
    "grid": []
  },
  {
    "name": "Silver reflector",
    "desc": "  A {stable} {glider reflector} found by Stephen\n   Silver in November 1998, by substituting an {NW31} converter for the\n   second {Fx77} conduit in the {Callahan G-to-H} found a few days\n   previous.  The repeat time is 497 ticks:\n",
    "grid": [
      "00000000100000000000001000000000000000000000000000000000000000",
      "00000010100000000000111000000000000000000000000000000000000000",
      "00000001100000000001000000000000000000000000000000000000000000",
      "00000000000000000001100000000000000000000000000000000000000000",
      "00001100000000000000000000000000000000000000000000000000000000",
      "00000100000000000000000000000000000000000000000000000000000000",
      "00000101000000000000000000000000000000000000000000000000000000",
      "00000011000000000010000000000000000000000000000000000000000000",
      "00000000000000000101000000000000000000000000000000000000000000",
      "00000000000000000101000000000000000000000000000000000000000000",
      "00000000000000000010000110000000000000000000000000000000000000",
      "00000011000000000000000101000000000000000000000000000000000000",
      "00000101000000000000000001000000000000000000000000000000000000",
      "00000100000000000000000001100000000000000000000000000000000000",
      "00001100000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000011000000000000000000000000000000000000000000000",
      "00000000000000011000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00011000000000000000000000000000000000000000000000000000000000",
      "00001000000000000000000000000000000000000000000000000000000000",
      "00001010000000000000000000000000000000000000000000000000000000",
      "00000110000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000011000000000000000110000000000000000000000000000000000000",
      "00000011000000000000000101000000000000000000000000000000000000",
      "00000000000000000000000001000000000000000000000000000000000000",
      "00000000000000000000000001100000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000001000000000000000000000000000000000000000000",
      "00000000000000000111000000000000000000000000000000000000000000",
      "00000000000000001000000000000000000000000000000000000000000000",
      "00000000000000001100000000000000000001100000000000000000000000",
      "00000000000000000000110000000000000000100000000000000000000000",
      "00000000000000000000010000000000000000101000000000000000000000",
      "00000000000000000001000000000000000000011000000000000000000000",
      "00000000000000000001100000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000011",
      "00000000000000000000000000000000000000000000000000000000000011",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000001100000000000000000000000000000000000000",
      "00011000000000000000001100000000000000000000000000000000000000",
      "00011000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00110000000000000000000000000000000000000000000000000000000000",
      "00010000000000000000000000000000000000000000000000000000000000",
      "11100000000000011000000000000000000000000000000000000000000000",
      "10000000000000010000000000000000000000000000000000000000000000",
      "00000000000000001110000000000000000000000000000000000000000000",
      "00000000000000000010000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000110000000000",
      "00000000000000000000000000000000000000000000000000110000000000"
    ]
  },
  {
    "name": "Silver's p5",
    "desc": " (p5)  The following oscillator found by Stephen Silver in\n   February 2000:\n",
    "grid": [
      "11000000000",
      "10000000000",
      "01001000000",
      "00011000000",
      "00010001011",
      "00100001101",
      "00110000000"
    ]
  },
  {
    "name": "Simkin glider gun",
    "desc": " (p120)  A {Herschel}-based glider gun discovered by\n   Michael Simkin in April 2015.  It consists of a Herschel running\n   through two {B60} conduits. In terms of its 36-cell minimum\n   population, it is one of the smallest known guns, sharing the record\n   with the {Gosper glider gun}. In the double-barreled form, as well as\n   the {pseudo}-period, {snake}-stabilized form shown below, it is the\n   absolute record holder.\n",
    "grid": [
      "110000011000000000000000000000000",
      "110000011000000000000000000000000",
      "000000000000000000000000000000000",
      "000011000000000000000000000000000",
      "000011000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000011011000000",
      "000000000000000000000100000100000",
      "000000000000000000000100000010011",
      "000000000000000000000111000100011",
      "000000000000000000000000001000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000101100000",
      "000000000000000000000000110100000"
    ]
  },
  {
    "name": "single-arm",
    "desc": "  A type of {universal constructor} using just one\n   construction arm and {slow salvo} techniques to construct, usually,\n   {Spartan} or near-Spartan circuitry.  Compare {two-arm}.\n",
    "grid": []
  },
  {
    "name": "single-channel",
    "desc": "  A type of {universal constructor} discovered and\n   developed by Simon Ekstrom and others starting in December 2015.  The\n   initial {elbow operation} toolkit was near-minimal, with just one\n   {push}, one {pull}, and one output glider of each colour (see\n   {colour of a glider}).  Later searches produced a much larger and\n   more efficient library.\n     Single-channel {recipe}s consist of a {stream} of {glider}s on a\n   single {lane} and aimed at a {construction elbow}, usually separated\n   from each other by at least 90 {tick}s.  In spite of these strict\n   limitations, single-channel recipes can be made to do surprising\n   things.  For example, it is possible to build a {Snark} directly on\n   the {construction lane} of an active construction arm, starting from\n   a single {elbow} {block}.  This can allow the arm to reach\n   efficiently around complex obstructions by bending itself through\n   multiple {lossless elbow}s.  Known recipes can also remove an elbow\n   when it is no longer needed, by controlled demolition of the Snark.\n     As of June 2018, almost all single-channel recipes are made up of\n   {singleton}s and {synchronized} pairs of gliders, but no synchronized\n   triplets or larger groups.  This is not an inherent limitation of\n   single-channel construction, but rather a limitation in the\n   {search program} used to find currently known single-channel\n   {toolkit}s.\n     A useful byproduct of this limitation is that single-channel\n   recipes can be trivially adjusted to allow them to safely cross\n   perpendicular data streams, including other single-channel recipes\n   (or earlier parts of the same recipe).  To avoid collisions with a\n   crossing stream, each singleton glider or glider pair can safely be\n   delayed by any even number of ticks, or technically by any multiple\n   of the period of the current {intermediate target}.  The final result\n   of the construction will not be affected.\n",
    "grid": []
  },
  {
    "name": "single-channel Demonoid",
    "desc": "  See {Demonoid}.\n",
    "grid": []
  },
  {
    "name": "single-lane",
    "desc": "  = {single-channel}.\n",
    "grid": []
  },
  {
    "name": "singleton",
    "desc": "  In {single-channel} {recipe}s, a glider that is not\n   {synchronized} with a neighboring glider in its {stream}.  Compare\n   {glider pair}.\n",
    "grid": []
  },
  {
    "name": "singular flip flop",
    "desc": " (p2)  Found by Robert Wainwright, July 1972.\n",
    "grid": [
      "001000",
      "001010",
      "100001",
      "111111",
      "000000",
      "001100",
      "001100"
    ]
  },
  {
    "name": "sinking ship",
    "desc": "  = {canoe}\n",
    "grid": []
  },
  {
    "name": "Sir Robin",
    "desc": " ((2,1)c/6, p6)  The first elementary {knightship} in\n   Conway's Game of Life, found by Adam P. Goucher on March 6, 2018,\n   based on a partial by Tomas Rokicki.\n",
    "grid": [
      "0000110000000000000000000000000",
      "0000100100000000000000000000000",
      "0000100010000000000000000000000",
      "0000001110000000000000000000000",
      "0011000000111100000000000000000",
      "0010110000111100000000000000000",
      "0100001000000111000000000000000",
      "0011110000110001000000000000000",
      "1000000000110000000000000000000",
      "0100010000000000000000000000000",
      "0000001110011001000000000000000",
      "0011000000010000100000000000000",
      "0000000000000101100000000000000",
      "0000000000110000001000000000000",
      "0000000000011011101000000000000",
      "0000000000110001001000000000000",
      "0000000000101001100000000000000",
      "0000000000100101010000000000000",
      "0000000000111000000100000000000",
      "0000000000010101000100000000000",
      "0000000000000011010100000000000",
      "0000000000010000001110000000000",
      "0000000000000000000000000000000",
      "0000000000010000000001000000000",
      "0000000000010001000000100000000",
      "0000000000001000001111100000000",
      "0000000000001110000000000000000",
      "0000000000000000110000000000000",
      "0000000000000111001000000000000",
      "0000000000010111010000000000000",
      "0000000000100010010000000000000",
      "0000000000010000110111000000000",
      "0000000000000111101000011000000",
      "0000000000000101111000011000000",
      "0000000000000000000100000000000",
      "0000000000000000000010011000000",
      "0000000000000000000011000000000",
      "0000000000000000000001111100000",
      "0000000000000000000000000110000",
      "0000000000000000000111000000100",
      "0000000000000000000010100010100",
      "0000000000000000000100010001000",
      "0000000000000000000100011000000",
      "0000000000000000001000000101110",
      "0000000000000000000110001000110",
      "0000000000000000000011110010010",
      "0000000000000000000000110001000",
      "0000000000000000000001000000000",
      "0000000000000000000001101000000",
      "0000000000000000000010000000000",
      "0000000000000000000111110000000",
      "0000000000000000000100001000000",
      "0000000000000000001110111000000",
      "0000000000000000001011111000000",
      "0000000000000000001000000000000",
      "0000000000000000000010000000000",
      "0000000000000000100001111000000",
      "0000000000000000000011110110000",
      "0000000000000000011100001000000",
      "0000000000000000000000001010000",
      "0000000000000000000000000000100",
      "0000000000000000000000001001100",
      "0000000000000000000000000111000",
      "0000000000000000000000110000000",
      "0000000000000000000001110000010",
      "0000000000000000000000001100101",
      "0000000000000000000001001110101",
      "0000000000000000000000110100100",
      "0000000000000000000000001010011",
      "0000000000000000000000000011000",
      "0000000000000000000000111000010",
      "0000000000000000000000111000010",
      "0000000000000000000000011000111",
      "0000000000000000000000001101100",
      "0000000000000000000000000110000",
      "0000000000000000000000000100000",
      "0000000000000000000000000000000",
      "0000000000000000000000001100000",
      "0000000000000000000000000010000"
    ]
  },
  {
    "name": "six Ls",
    "desc": " (p3)  This is a compact form of {loading dock}.\n",
    "grid": [
      "0001000",
      "0111001",
      "1000111",
      "1110000",
      "0000111",
      "1110001",
      "1001110",
      "0001000"
    ]
  },
  {
    "name": "sixty-nine",
    "desc": " (p4)  Found by Robert Wainwright, October 1978.\n",
    "grid": [
      "000000000100000000000",
      "000000001010000000000",
      "000000000000000000000",
      "000000100011000000000",
      "000001000001000000000",
      "000000101000000000000",
      "000000001100000010000",
      "000000000000000010000",
      "001000001100001110000",
      "001000000000001100000",
      "111000000011001100111",
      "110000001011000011100",
      "110011101010000011100",
      "001110000000000000000",
      "001110000001000000000",
      "000000000010100000000",
      "000000000000000000000",
      "000000001000110000000",
      "000000010000010000000",
      "000000001010000000000",
      "000000000011000000000"
    ]
  },
  {
    "name": "skewed quad",
    "desc": " (p2)\n",
    "grid": [
      "0110000",
      "0100011",
      "0010101",
      "0000000",
      "1010100",
      "1100010",
      "0000110"
    ]
  },
  {
    "name": "skewed traffic light",
    "desc": " (p3)  Found by Robert Wainwright, August 1989.\n",
    "grid": [
      "000000000000011000000000",
      "000000000000100100000000",
      "000000000000010100000000",
      "000000000110001000000000",
      "000000000010110000000000",
      "000000000000100000000000",
      "000000000000100000000000",
      "000000000000000000000000",
      "110000000011100000010000",
      "111101000000001000110000",
      "101001110100001000000000",
      "000000000100001011100101",
      "000011000100000000101111",
      "000010000001110000000011",
      "000000000000000000000000",
      "000000000001000000000000",
      "000000000001000000000000",
      "000000000011010000000000",
      "000000000100011000000000",
      "000000001010000000000000",
      "000000001001000000000000",
      "000000000110000000000000"
    ]
  },
  {
    "name": "sL",
    "desc": "  Abbreviation for {still life}, used most often in rough\n   measurements of the complexity of a {Spartan} constellation.\n",
    "grid": []
  },
  {
    "name": "slide gun",
    "desc": "  A {gun} which fires sideways from an extending arm.  The\n   arm consists of streams of {spaceship}s which are pushing a pattern\n   away from the body of the gun and releasing an output spaceship every\n   time they do so.  Each output spaceship therefore travels along a\n   different path.\n     Dieter Leithner constructed the first slide gun in July 1994\n   (although he used the term \"side shooting gun\").  The following\n   pattern shows the key reaction of this slide gun.  The three gliders\n   shown will push the block one cell diagonally, thereby extending the\n   length of the arm by one cell, and at the same time they release an\n   output glider sideways.  (In 1999, Jason Summers constructed slide\n   guns using other reactions.)\n",
    "grid": [
      "00000000000000110",
      "00000000000000110",
      "00000000111000000",
      "00000000001000000",
      "00000000010000011",
      "00000000000000101",
      "00000000000000001",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "00000000000000000",
      "01000000000000000",
      "01100000000000000",
      "10100000000000000"
    ]
  },
  {
    "name": "sliding block memory",
    "desc": "  A memory register whose value is stored as the\n   position of a {block}.  The block can be moved by means of {glider}\n   collisions.  See {block pusher} for an example.\n     In Conway's original formulation (as part of his proof of the\n   existence of a {universal computer} in Life) two gliders were used to\n   pull the block inwards by three diagonal spaces, as shown below, and\n   thirty gliders were used to push it out by the same amount.\n",
    "grid": [
      "110000000000",
      "110000000000",
      "000000000000",
      "000000000000",
      "000000000000",
      "000000000111",
      "111000000100",
      "100000000010",
      "010000000000"
    ]
  },
  {
    "name": "slmake",
    "desc": "  A {search program} published by Adam P. Goucher in May 2017.\n   It accepts as input a {constellation} of sufficiently widely\n   separated {still life}s, and produces a {glider} {stream} that will\n   perform a complete {slow glider construction} of that constellation,\n   starting from a single block.\n     One of slmake's primary uses is to make {self-constructing}\n   patterns much easier to design and build.  It is capable of finding\n   {recipe}s not only for {Spartan} {stable} {circuit}ry, but also for\n   other useful non-Spartan circuits such as {Snark}s, {syringe}s, and\n   {H-to-MWSS} {converter}s, provided that they are separated from other\n   nearby objects by a sufficient amount of empty space.\n",
    "grid": []
  },
  {
    "name": "slow",
    "desc": "  See {slow glider construction}.\n",
    "grid": []
  },
  {
    "name": "slow elbow",
    "desc": "  A movable {construction elbow} that is controlled by a\n   {slow salvo}, which most likely comes from a previous elbow in a\n   multi-elbow {construction arm}.  Unlike a standard elbow which is\n   generally fixed on a single {construction lane} or at least within a\n   narrow range, a slow elbow can move freely in two dimensions as long\n   as there is room for it.  Each slow elbow added to a construction arm\n   results in an exponential increase in the cost (in gliders) of the\n   final construction.  Compare {lossless elbow}.\n",
    "grid": []
  },
  {
    "name": "slow glider construction",
    "desc": "  Construction an object by a \"slow salvo\" of\n   {glider}s all coming from the same direction, in such a way that\n   timing of the gliders does not matter as long as they are not too\n   close behind one another.  This type of construction requires an\n   initial seed object, such as a {block}, which is modified by each\n   glider in turn until the desired object is produced.\n     In May 1997, Nick Gotts produced a slow glider construction of a\n   block-laying switch engine from a block, using a slow salvo of 53\n   gliders.  Constructions like this are important in the study of\n   {sparse Life}, as they will occur naturally as gliders created in the\n   first few generations collide with {blonk}s and other debris.\n     Slow glider constructions are also useful in some designs for\n   {universal constructor}s.  However, in this case the above definition\n   is usually too restrictive, and it is desirable to allow\n   constructions in which some gliders in the salvo are required to have\n   a particular timing modulo 2 (a \"p2 slow salvo\").  This gives much\n   greater flexibility, as {blinker}s can now be freely used in the\n   intermediate construction steps.  The {Snarkmaker} is a very large p2\n   slow salvo.  A much smaller example is the following {edgy}\n   construction of an {eater1} starting from a block.\n",
    "grid": [
      "110011100000000000000000000000000000000000000000000000",
      "110010000000000000000000000000000000000000000000000000",
      "000001000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000011100000000000000000000000000000000000",
      "000000000000000010000000000000000000000000000000000000",
      "000000000000000001000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000001110000000000000000000000000000",
      "000000000000000000000001000000000000000000000000000000",
      "000000000000000000000000100000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000100000000000000000000000",
      "000000000000000000000000100001100000000000000000000000",
      "000000000000000000000001100001010000000000000000000000",
      "000000000000000000000001010000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000001000000000000000000000000000",
      "000000000000000000000000011000000000000000000000000000",
      "000000000000000000000000010100000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000001110000000000000000000011",
      "000000000000000000000000000001000000000000000000000110",
      "000000000000000000000000000000100000000000000000000001"
    ]
  },
  {
    "name": "slow salvo",
    "desc": "  See {slow glider construction}.\n",
    "grid": []
  },
  {
    "name": "small fish",
    "desc": "  = {LWSS}\n",
    "grid": []
  },
  {
    "name": "small lake",
    "desc": " (p1)  A 20-cell {still life}, but technically not actually\n   a {lake} because it is not constructed entirely out of {domino}es.\n",
    "grid": [
      "000010000",
      "000101000",
      "000101000",
      "011000110",
      "100000001",
      "011000110",
      "000101000",
      "000101000",
      "000010000"
    ]
  },
  {
    "name": "smiley",
    "desc": " (p8)  Found by Achim Flammenkamp in July 1994 and named by Alan\n   Hensel.\n",
    "grid": [
      "1101011",
      "0001000",
      "1000001",
      "0111110",
      "0000000",
      "0000000",
      "1110111"
    ]
  },
  {
    "name": "SMM breeder",
    "desc": "  See {breeder}.\n",
    "grid": []
  },
  {
    "name": "smoke",
    "desc": "  Debris that is fairly long-lived but eventually dies\n   completely.  Basically, a large {spark}.  This term is used\n   especially when talking about the output from a {smoking ship}.  Some\n   {Herschel conduit}s such as {Fx119} also create large amounts of\n   smoke.\n",
    "grid": []
  },
  {
    "name": "smoking ship",
    "desc": "  A {spaceship} which produces {smoke}.  If the smoke\n   extends past the edge of the rest of the spaceship, then it can be\n   used to perturb other objects as the spaceship passes by.  Running\n   gliders into the smoke is often a good way to turn or duplicate them,\n   or convert them into other objects.  Sometimes the smoke from a\n   smoking ship may itself be perturbed by accompanying spaceships in\n   order to form a {puffer}.  A simple example of a smoking ship is the\n   {Schick engine}.\n",
    "grid": []
  },
  {
    "name": "snacker",
    "desc": " (p9)  Found by Mark Niemiec in 1972.  This is a\n   {pentadecathlon} with stabilizers which force it into a lower period.\n",
    "grid": [
      "11000000000000000011",
      "01000000000000000010",
      "01010000000000001010",
      "00110000000000001100",
      "00000001000010000000",
      "00000110111101100000",
      "00000001000010000000",
      "00110000000000001100",
      "01010000000000001010",
      "01000000000000000010",
      "11000000000000000011"
    ]
  },
  {
    "name": "snail",
    "desc": " (c/5 orthogonally, p5)  The first known {c/5 spaceship},\n   discovered by Tim Coe in January 1996.  For some time it was the\n   slowest known orthogonal spaceship.\n",
    "grid": [
      "01000000000000000000000000000000000000",
      "01000000000000000000000000000000000000",
      "10000000000000000000000000000000000000",
      "01110000000000000000011100011100000000",
      "01101000000000100010100000011100000000",
      "00100000000000110100000001000011110000",
      "00000010000001000101000110100000110000",
      "00010010111000110000000001000000001101",
      "00011010000010000010000000000000000010",
      "00000000010111111100000000000000000000",
      "00000000000000000000000000000000000000",
      "00000000010111111100000000000000000000",
      "00011010000010000010000000000000000010",
      "00010010111000110000000001000000001101",
      "00000010000001000101000110100000110000",
      "00100000000000110100000001000011110000",
      "01101000000000100010100000011100000000",
      "01110000000000000000011100011100000000",
      "10000000000000000000000000000000000000",
      "01000000000000000000000000000000000000",
      "01000000000000000000000000000000000000"
    ]
  },
  {
    "name": "snake",
    "desc": " (p1)\n",
    "grid": [
      "1101",
      "1011"
    ]
  },
  {
    "name": "snake bit",
    "desc": "  An alternative name for a {boat-bit}.  Not a very sensible\n   name, because various other things can be used instead of a snake.  A\n   snake, or alternatively an {aircraft carrier}, is the smallest object\n   that can consume a glider {stream} by effectively acting as an\n   {eater} for every two incoming gliders.  The one-cell reduction from\n   the smallest real eater, the seven-cell {eater1}, has been important\n   when trying to construct recent {sawtooth}s where the {population}\n   must be minimized.\n",
    "grid": []
  },
  {
    "name": "snake bridge snake",
    "desc": " (p1)\n",
    "grid": [
      "000011",
      "000010",
      "000001",
      "000011",
      "110100",
      "101100"
    ]
  },
  {
    "name": "snake dance",
    "desc": " (p3)  Found by Robert Wainwright, May 1972.\n",
    "grid": [
      "000110100",
      "000101100",
      "110100000",
      "010010111",
      "100101001",
      "111010010",
      "000001011",
      "001101000",
      "001011000"
    ]
  },
  {
    "name": "snake pit",
    "desc": "  This term has been used for two different {oscillator}s:\n   the p2 snake pit (essentially the same as {fore and back})\n",
    "grid": [
      "1011011",
      "1101010",
      "0000001",
      "1110111",
      "1000000",
      "0101011",
      "1101101"
    ]
  },
  {
    "name": "snake siamese snake",
    "desc": " (p1)\n",
    "grid": [
      "1101101",
      "1011011"
    ]
  },
  {
    "name": "Snark",
    "desc": "  A small stable 90-degree glider reflector with a repeat time of\n   43 ticks, discovered by Mike Playle on 25 April 2013 using a search\n   utility he wrote called {Bellman}. Compare {boojum reflector}.  Four\n   common Snark variants are shown below:  Playle's original at the top,\n   and variants by Heinrich Koenig, Simon Ekstrom, and Shannon Omick to\n   the left, bottom, and right, respectively.  As of June 2018, only\n   Playle's variant has a known {slow glider construction} {recipe} for\n   all orientations.\n",
    "grid": [
      "000000000000000000000000000001100000000000000000000",
      "000000000000000000000000000010100000000000000000000",
      "000000000000000000000011000010000000000000000000000",
      "000000000000000000001001001101111000000000000000000",
      "000000000000000000001101010101001000000000000000000",
      "000000000000000000000001010101000000000000000000000",
      "000000000000000000000001010110000000000000000000000",
      "000000000000000000000000100000000000000000000000000",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000011000000000000",
      "000000000000000000000000000011000000010000000000000",
      "000000000000000000000000000011000001010000000000000",
      "000000000100000000000000000000000001100000000000000",
      "000000000111000000000000000000000000000000000000000",
      "000000000000100000000100000000000000000000000000000",
      "000000000001100000001000000000000000000000000000000",
      "000000000000000000001110000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000",
      "000110000000000000000000000000000000000000000000000",
      "000100000000000000000000011000000000000000000000000",
      "110100000000000000000000001000000000000000000000000",
      "100111000011000000000001110000000000000000000000000",
      "011000100011000000000001000000000000000000000010000",
      "000111100000000000000000000011000000000000001111100",
      "000100000000000000011000000001000000000000010000010",
      "000011100000000000010100000001010000000000001110010",
      "000000010000000000000100000000110000000000000001011",
      "001111100000000000000110000000000000000000001111001",
      "010010000000000000000000000100000000000110001000110",
      "011000000000000000000000011100000000000110000111000",
      "000000000000000000000000100000000000000000000001000",
      "000000000000000000000000110000000000000000000001011",
      "000000000000000000000000000000000000000000000011011",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000001100000000000",
      "000000000000000000000000000000000000001000000000000",
      "000000000000000000000000000000000000000111000000000",
      "000000000000001100000000000000000000000001000000000",
      "000000000000010100000110000000000000000000000000000",
      "000000000000010000000110000000000000000000000000000",
      "000000000000110000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000",
      "000000000000000000000000001000000000000000000000000",
      "000000000000000011000011010100000000000000000000000",
      "000000000000000100100101010100000000000000000000000",
      "000000000000000011000101010110000000000000000000000",
      "000000000000000000111101100100000000000000000000000",
      "000000000000000000100010000100000000000000000000000",
      "000000000000000000010010111000000000000000000000000",
      "000000000000000000001010100000000000000000000000000",
      "000000000000000000000100000000000000000000000000000"
    ]
  },
  {
    "name": "Snarkmaker",
    "desc": "  A {single-channel} {stream} of {glider}s that, when aimed\n   to collide with an {elbow} {block} in a specific location, will\n   perform a {slow glider construction} of a {Snark}, directly on the\n   same {lane} as the incoming gliders.  This allows a\n   {construction arm} to add one or more {lossless elbow}s, so that it\n   can bend around multiple corners without an exponential increase in\n   construction cost.\n     The Snarkmaker recipe used in the first single-channel {Demonoid},\n   {Orthogonoid}, and {spiral growth} patterns contains 2,254 gliders.\n   This could be considerably reduced with a customized\n   {search program}.\n",
    "grid": []
  },
  {
    "name": "SNG",
    "desc": "  = {second natural glider}.\n",
    "grid": []
  },
  {
    "name": "SODGame",
    "desc": "  = {Seeds of Destruction Game}\n",
    "grid": []
  },
  {
    "name": "sombrero",
    "desc": "  One half of {sombreros} or {siesta}.\n",
    "grid": []
  },
  {
    "name": "sombreros",
    "desc": " (p6)  Found by Dave Buckingham in 1972.  If the two halves\n   are moved three spaces closer to one another then the period drops to\n   4, and the result is just a less compact form of {Achim's p4}.\n   Compare also {siesta}.\n",
    "grid": [
      "000110000000011000",
      "000101000000101000",
      "000001000000100000",
      "000101100001101000",
      "011100000000001110",
      "100010100001010001",
      "011100000000001110",
      "000101100001101000",
      "000001000000100000",
      "000101000000101000",
      "000110000000011000"
    ]
  },
  {
    "name": "soup",
    "desc": "  A random initial pattern, either contained within a small area,\n   or alternatively filling the whole Life universe.\n     Finite soups probably have behaviors very different than infinite\n   soups, but this is obviously unknown.  Infinite soups may remain\n   chaotic indefinitely since any reaction, no matter how rare, is bound\n   to happen somewhere.\n     Soups can have an average density, with results varying based on\n   that.  See {sparse Life} for a discussion of what can happen at a low\n   density.\n     Finite soups for sizes such as 16x16 (asymmetric) have been\n   examined by the billions by scripts such as {apgsearch} to find\n   interesting results.  Many new {oscillator}s and {synthesis}\n   {recipe}s have been discovered, as well as previously known rare\n   patterns such as {stabilized switch engine}s.  In addition, soups are\n   used to generate statistical {census} data, and to decide whether\n   specific objects can be considered {natural}.\n     Soups can be fully random, or they can be forced to be {symmetric}.\n   The results for these two types of soups can differ since symmetric\n   soups tend to create large symmetrical objects at a much higher rate.\n   Shown below is an unusual mirror-symmetric soup that produces a\n   {pufferfish} and nothing else.\n",
    "grid": [
      "1111001101110100010111011001111",
      "0101011010000000000000101101010",
      "0011100101010000000101010011100",
      "1011011101001000001001011101101",
      "0111101000110111110110001011110",
      "0000011000110101010110001100000",
      "0011100011000100010001100011100",
      "1001001011000110110001101001001",
      "1101001000100000000010001001011",
      "1010100011110011100111100010101",
      "1011101100110001000110011011101",
      "0010000011000100010001100000100",
      "1111101011100100010011101011111",
      "0100001000010011100100001000010",
      "0110100011111111111111100010110",
      "1111011100000010100000011101111"
    ]
  },
  {
    "name": "space dust",
    "desc": "  A part of a {spaceship} or {oscillator} which looks like a\n   random mix of ON and OFF cells.  It is usually very difficult to find\n   a {glider synthesis} for an object that consists wholly or partly of\n   space dust.  As examples, the {295P5H1V1}, {fly}, and {seal}\n   spaceships contain large amounts of space dust.\n",
    "grid": []
  },
  {
    "name": "spacefiller",
    "desc": "  Any pattern that grows at a quadratic rate by filling\n   space with an {agar}.  The first example was found in September 1993\n   by Hartmut Holzwart, following a suggestion by Alan Hensel.  The\n   diagram below shows a smaller spacefiller found by Tim Coe.  See also\n   {Max}.  Spacefillers can be considered as {breeder}s (more precisely,\n   MMS breeders), but they are very different from ordinary breeders.\n   The word \"spacefiller\" was suggested by Harold McIntosh and soon\n   became the accepted term.\n",
    "grid": [
      "000000000000000000100000000",
      "000000000000000001110000000",
      "000000000000111000011000000",
      "000000000001001110010110000",
      "000000000010001010010100000",
      "000000000010000101010101100",
      "000000000000100001010001100",
      "111100000101000010001011100",
      "100011010111011000000000110",
      "100000110000010000000000000",
      "010011010010010110000000000",
      "000000010101010101000001111",
      "010011010010010011010110001",
      "100000110001010100011000001",
      "100011010110010010010110010",
      "111100000101010101010000000",
      "000000000011010010010110010",
      "000000000000010000011000001",
      "011000000000110111010110001",
      "001110100010000101000001111",
      "001100010100001000000000000",
      "001101010101000010000000000",
      "000001010010100010000000000",
      "000011010011100100000000000",
      "000000110000111000000000000",
      "000000011100000000000000000",
      "000000001000000000000000000"
    ]
  },
  {
    "name": "space nonfiller",
    "desc": "  Any pattern that expands indefinitely to affect every\n   cell in the Life plane, but leaves an expanding region of {vacuum} at\n   its center.  Compare {spacefiller}; see also {antstretcher}.  The\n   first nonfiller was discovered by Jason Summers on 14 April 1999:\n",
    "grid": [
      "0000000000000000000111000000000000000",
      "0000000000000000001001000000000000000",
      "0000000000001110000001000011100000000",
      "0000000000001001010001000010010000000",
      "0000000000001001010001000010010000000",
      "0000000000100000000001001010111000000",
      "0000000000110011001010000100000100000",
      "0000000010000000000000000110011100000",
      "0000000011101011000000000010000001000",
      "0000001000000001000000000101000111000",
      "0000001110000010000000000100000000100",
      "0001010000000000000000000000000101110",
      "0011111010000000000000000000000000010",
      "0110000001000000000000000000000111110",
      "1100001100000000000000000010100000000",
      "0101000100100000000000000010010001010",
      "0000000010100000000000000000011000011",
      "0111110000000000000000000001000000110",
      "0100000000000000000000000000101111100",
      "0111010000000000000000000000000101000",
      "0010000000010000000000100000111000000",
      "0001110001010000000001000000001000000",
      "0001000000100000000001101011100000000",
      "0000011100110000000000000000100000000",
      "0000010000010000101001100110000000000",
      "0000001110101001000000000010000000000",
      "0000000100100001000101001000000000000",
      "0000000100100001000101001000000000000",
      "0000000011100001000000111000000000000",
      "0000000000000001001000000000000000000",
      "0000000000000001110000000000000000000"
    ]
  },
  {
    "name": "space rake",
    "desc": "  The following p20 forwards glider {rake}, which was the\n   first known rake.  It consists of an {ecologist} with a {LWSS} added\n   to turn the dying debris into {glider}s.\n",
    "grid": [
      "0000000000011000001111",
      "0000000001101100010001",
      "0000000001111000000001",
      "0000000000110000010010",
      "0000000000000000000000",
      "0000000010000000000000",
      "0000000110000000011000",
      "0000001000000000100100",
      "0000000111110000100100",
      "0000000011110001101100",
      "0000000000010000110000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000000000",
      "0000000000000000001111",
      "1001000000000000010001",
      "0000100000000000000001",
      "1000100000000000010010",
      "0111100000000000000000"
    ]
  },
  {
    "name": "spaceship",
    "desc": "  Any finite pattern that reappears (without additions or\n   losses) after a number of generations and displaced by a non-zero\n   amount.  By far the most {natural} spaceships are the {glider},\n   {LWSS}, {MWSS} and {HWSS}, followed by the {Coe ship} which has also\n   evolved multiple times from random asymmetric {soup} starting\n   conditions.  See also the entries on individual spaceship speeds:\n   {c/2 spaceship}, {c/3 spaceship}, {c/4 spaceship}, {c/5 spaceship},\n   {c/6 spaceship}, {c/7 spaceship}, {c/10 spaceship}, {c/12 spaceship},\n   {2c/5 spaceship},  {2c/7 spaceship}, {3c/7 spaceship},\n   {(2,1)c/6 spaceship}, and {17c/45 spaceship}.\n     It is known that there exist spaceships travelling in all rational\n   directions and at arbitrarily slow speeds (see\n   {universal constructor}).  Before 1989, however, the only known\n   examples travelled at c/4 diagonally (gliders) or c/2 orthogonally\n   (everything else).\n     In 1989 Dean Hickerson started to use automated searches to look\n   for new {elementary} spaceships, and had considerable success.  Other\n   people have continued these searches using tools such as {lifesrc}\n   and {gfind}, and as a result we now have a great variety of\n   elementary spaceships travelling at sixteen different velocities.\n   The following table details the discovery of elementary spaceships\n   with new velocities as of July 2018.\n\n   -------------------------------------------------------------------\n",
    "grid": []
  },
  {
    "name": "Spaceships in Conway's Life",
    "desc": "  A series of articles posted by David Bell\n   to the newsgroup comp.theory.cell-automata during the period\n   August-October 1992 that described many of the new {spaceship}s found\n   by himself, Dean Hickerson and Hartmut Holzwart.  Bell produced an\n   addendum covering more recent developments in 1996.\n",
    "grid": []
  },
  {
    "name": "spaghetti monster",
    "desc": "  The first {3c/7 spaceship}, found by Tim Coe in\n   June 2016.  The spaceship travels orthogonally, has a minimum of 702\n   live cells and fits in a 27x137 bounding box.\n",
    "grid": []
  },
  {
    "name": "spark",
    "desc": "  A pattern that dies.  The term is typically used to describe a\n   collection of cells periodically thrown off by an {oscillator} or\n   {spaceship}, but other dying patterns, particularly those consisting\n   or only one or two cells (such as produced by certain glider\n   collisions, for example), are also described as sparks.  For examples\n   of small sparks see {unix} and {HWSS}.  Examples of much larger\n   sparks are seen in {Schick engine} and {twin bees shuttle spark}.\n",
    "grid": []
  },
  {
    "name": "spark coil",
    "desc": " (p2)  Found in 1971.\n",
    "grid": [
      "11000011",
      "10100101",
      "00100100",
      "10100101",
      "11000011"
    ]
  },
  {
    "name": "sparker",
    "desc": "  An {oscillator} or {spaceship} that produces {spark}s. These\n   can be used to {perturb} other patterns without being themselves\n   affected.\n",
    "grid": []
  },
  {
    "name": "sparking eater",
    "desc": "  One of two {eater}s found in April 1997 and November\n   1998 by Dean Hickerson using his {dr} {search program}, shown below\n   to the left and right respectively.  These both absorb {glider}s as a\n   standard eater does, but also produce separated single-bit {spark}s\n   at the upper right, which can be used to delete antiparallel gliders\n   with different phases as shown.\n",
    "grid": [
      "001000000000110000000010000000000110",
      "101000000001100000001010000000000101",
      "011000000000010000000110000000000100",
      "000011001100000000000000011001100000",
      "010001001100000000000010001001100000",
      "011110000000000000110011110000000000",
      "000000000000000000100000000000000000",
      "011000000000000000011111000000000000",
      "011000000000000000000000100000000000",
      "000000000000000000000111000000000000",
      "000000000000000000000100000000000000"
    ]
  },
  {
    "name": "sparky",
    "desc": "  A certain c/4 {tagalong}, shown here attached to the back of a\n   {spaceship}.\n",
    "grid": [
      "0000000000100000000000000000000",
      "0000000000100000000000000011000",
      "0000001101011100000000001100010",
      "1011011011001010001101111000000",
      "1000110010110011100101100110001",
      "1011000011101011100000011001000",
      "0000000011010000000000000001001",
      "1011000011101011100000011001000",
      "1000110010110011100101100110001",
      "1011011011001010001101111000000",
      "0000001101011100000000001100010",
      "0000000000100000000000000011000",
      "0000000000100000000000000000000"
    ]
  },
  {
    "name": "sparse Life",
    "desc": "  This refers to the study of the evolution of a Life\n   universe which starts off as a random {soup} of extremely low\n   density.  Such a universe is dominated at an early stage by {block}s\n   and {blinker}s (often referred to collectively as {blonk}s) in a\n   ratio of about 2:1.  Much later it will be dominated by simple\n   {infinite growth} patterns (presumably mostly {switch engine}s).  The\n   long-term fate of a sparse Life universe is less certain.  It may\n   possibly become dominated by self-reproducing patterns (see\n   {universal constructor}), but it is not at all clear that there is\n   any mechanism for these to deal with all the junk produced by switch\n   engines.\n",
    "grid": []
  },
  {
    "name": "Spartan",
    "desc": "  A pattern composed of subunits that can be easily constructed\n   in any orientation, usually with a {slow salvo}. Generally this means\n   that the pattern is a {constellation} of Spartan still lifes:\n   {block}, {tub}, {boat}, {hive}, {ship}, {loaf}, {eater1}, or {pond}.\n   Other small objects may sometimes be counted as Spartan, including\n   period-2 oscillators - mainly {blinker}s, but also {beacon}s or\n   {toad}s, which may occur as {intermediate target}s in slow salvo\n   {recipe}s.  Most {self-constructing} patterns are Spartan or mostly\n   Spartan, to simplify the process of self-construction.\n",
    "grid": []
  },
  {
    "name": "speed booster",
    "desc": "  Any mechanism which allows a {signal} (indicated by the\n   presence or absence of a spaceship) to move faster than the spaceship\n   could travel through empty space.  The original speed booster is\n   based on p30 {technology}, and is shown below:\n",
    "grid": [
      "000000000000000000001000000000000000000000000",
      "000000000000000000000100000000000000000000000",
      "000000000000000000011100000000000000000000000",
      "000000000000000000000000000000000000000000000",
      "000000000000000000000000000101000000000000000",
      "000000000000000000000000010001000000000000000",
      "000000000000000001000000010000000000000000000",
      "000000000000000011110000100001000000001100000",
      "000000000000000110101000010000000000001100000",
      "000011000000001110100100010001000000000000000",
      "000011000000000110101000000101000000000000000",
      "000000000000000011110000000000000000000000000",
      "000000000000000001000000000000000000000000000",
      "000000000000000000000000001110000000000000000",
      "000000000000000000000000001010001100000000000",
      "000000000000000000000000011000001001000000000",
      "000000000000000000101000001000000000100000011",
      "000000000000000010001001100000000000100000011",
      "000000000110000010000000000100000000100000000",
      "010000000110000100001000000011001001000000000",
      "001000000000000010000000101001001100000000000",
      "111000000000000010001000001110000000000000000",
      "000000000000000000101000000000000000000000000"
    ]
  },
  {
    "name": "speed of light",
    "desc": "  The greatest speed at which any effect can propagate;\n   in {Life}, a speed of one cell per {generation}.  Usually denoted c.\n",
    "grid": []
  },
  {
    "name": "S-pentomino",
    "desc": "  Conway's name for the following {pentomino}, which\n   rapidly dies.\n",
    "grid": [
      "0011",
      "1110"
    ]
  },
  {
    "name": "spider",
    "desc": " (c/5 orthogonally, p5)  This is the smallest known c/5\n   {spaceship}, and was found by David Bell in April 1997.  Its side\n   {spark}s have proved very useful in constructing c/5 {puffer}s,\n   including {rake}s.  See also {PPS}.\n",
    "grid": [
      "0000001000111000001110001000000",
      "0001101111101100011011111011000",
      "0101101000001010101000001011010",
      "1000101000111110111110001010001",
      "0000111000001100011000001110000",
      "0100101110000000000000111010010",
      "0001000000000000000000000001000"
    ]
  },
  {
    "name": "spiral",
    "desc": " (p1)  Found by Robert Wainwright in 1971.\n",
    "grid": [
      "1100001",
      "0100111",
      "0101000",
      "0010100",
      "0001010",
      "1110010",
      "1000011"
    ]
  },
  {
    "name": "spiral growth",
    "desc": "  A {self-constructing} pattern built by Dave Greene in\n   August 2014 that uses four {universal constructor}s (UCs) arranged in\n   a diamond to build four more UCs in a slightly larger diamond.  This\n   was the first B3/S23 pattern that exhibited spiral growth.  Much\n   smaller versions have now been constructed using the {single-channel}\n   construction toolkit.\n",
    "grid": []
  },
  {
    "name": "splitter",
    "desc": "  A {signal} {converter} that accepts a single input signal\n   and produces two or more output signals, usually of the same type as\n   the input.  An older term for this is {fanout}, or \"fanout device\".\n     A sub-category is the {one-time} splitter, which is not technically\n   a converter because it can only be used once.  One-time splitters are\n   usually small {constellation}s that produce two or more {clean}\n   gliders when struck by a single glider.  In other words, they are\n   multi-glider {seed}s.  These are important for constructing\n   self-destruct circuitry in {self-constructing} spaceships.\n     The following combination, a {syringe} attached to an SE7T14\n   {converter} combined with an {NW31} converter, is one of the smallest\n   known glider splitters as of July 2018.  Another small splitter with\n   a 90-degree {colour-changing} output is shown under {reflector}.\n",
    "grid": [
      "0000000000110000000000010000001100000000000000000000",
      "0000000000110000000000101000010010000000000000000000",
      "0000000000000000000000101000101110001000000000000000",
      "0000000000000000000001101101010000001110000000000000",
      "0000000000000000000000000101000110000001000000000000",
      "0000000000000000000001101001111010000011000000000000",
      "0000000000000000000001101010001000000000000000000000",
      "0000000000000000000000000101000100000000000000000000",
      "0000000000000000000000000010100010000000000000000000",
      "0000000000000000000000000001000110000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000",
      "0000000000000000001100000000000000000000000000000000",
      "0000000000000000001100000000000000000000000000000000",
      "0001100000000000000000000000000000000000000000000000",
      "0010010000000000000000000000000000000000000000000000",
      "0101100000000000000000000000000000000000000000000000",
      "0100000000000000000000000000000000000000000000000011",
      "1100000000000000000000000000000000000000000000000011",
      "0000000000000001100000000000000000000000000000000000",
      "0000000000000001000000000000000000000000000000000000",
      "0000000000000000111000000000000000000000000000000000",
      "0000000000000000001000000000011000000000000000000000",
      "0000000000000000000000000000101000000000000000000000",
      "0000000000000000000000000000100000000000000000000000",
      "0000000000000000000000000001100000000000000000000000",
      "1110000000000000000000000000000000000000000000000000",
      "0010000000000000000000000000000000000000000000000000",
      "0100000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "SPPS",
    "desc": " (c/5 orthogonally, p30)  The symmetric {PPS}.  The original PPS\n   found by David Bell in May 1998.  Compare {APPS}.\n",
    "grid": []
  },
  {
    "name": "sqrtgun",
    "desc": "  Any glider-emitting pattern which emits its nth glider at a\n   time asymptotically proportional to n^2.  The first examples were\n   constructed by Dean Hickerson around 1991.  See also\n   {quadratic filter}, {exponential filter}, {recursive filter}.\n",
    "grid": []
  },
  {
    "name": "squaredance",
    "desc": "  The p2 {agar} formed by tiling the plane with the\n   following pattern.  Found by Don Woods in 1971.\n",
    "grid": [
      "11000000",
      "00001100",
      "00100001",
      "00100001",
      "00001100",
      "11000000",
      "00010010",
      "00010010"
    ]
  },
  {
    "name": "squirter",
    "desc": "  = {pipsquirter}\n",
    "grid": []
  },
  {
    "name": "S-spiral",
    "desc": "  = {big S}\n",
    "grid": []
  },
  {
    "name": "stabilized switch engine",
    "desc": "  A single {switch engine} which survives\n   indefinitely by interacting with the appropriate {exhaust} such that\n   it prevents the engine from ever being destroyed.\n     The only known types of stabilized switch engines were found by\n   Charles Corderman soon after he discovered the switch engine itself.\n   There is a p288 block-laying type (the more common of the two) and\n   the p384 glider-producing type.  These two puffers are the most\n   {natural} infinite growth patterns in Life.  As of June 2018 they are\n   the basis for every infinite growth pattern ever seen to occur from a\n   random asymmetric {soup}, even after trillions of {census} results by\n   {apgsearch} and similar projects.\n     Patterns giving rise to block-laying switch engines can be seen\n   under {infinite growth}, and one giving rise to a glider-producing\n   switch engine is shown under {time bomb}.\n     Here is the block-laying type showing its distinctive zig-zag trail\n   of blocks.\n",
    "grid": [
      "001000000000000000000000000000000000000000000000000000000000",
      "010100000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "010010000000000000000000000000000000000000000000000000000000",
      "000110000000000000000000000000000000000000000000000000000000",
      "000010000000000000000000000000000000000000000000000000000000",
      "000000000000000000110000000000000000000000000000000000000000",
      "000000000000000000110000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "011000000000000000000000000000000000000000000000000000000000",
      "000100000000000000000000000000000000000000000000000000000000",
      "001100000000000000000000000000000000000000000000000000000000",
      "011100000000000000010000000000000000000000000000000000000000",
      "011000000000000000011000001100000000000000000000000000000000",
      "111010000000000000011000001100000000000000000000000000000000",
      "010001000000000011000000000000000000000000000000000000000000",
      "000100100000000001000000000000000000000000000000000000000000",
      "000111000000000000100000000000000000000000000000000000000000",
      "000011000000001100000000000000000000000000000000000000000000",
      "000000000000001100000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000011000000000000000000000000",
      "000000000000000000000000000000000011000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000110000000000000000000000000000000000000000000000000000",
      "000000110000000000000000110000000000000000000000000000000000",
      "000000000000000000000000110000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000110000000000000000",
      "000000000000000000001100000000000000000000110000000000000000",
      "000000000000000000001100000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000001100000000000000000000000000000000000000000000",
      "000000000000001100000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000110000000000000000000",
      "000000000000000000000000000000000000000110000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000001100000000000000000000000",
      "000000000000000000000000000000000001100000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000000000000000011",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000110000000000000000000000000000",
      "000000000000000000000000000000110000000000000000110000000000",
      "000000000000000000000000000000000000000000000000110000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000001100000000000000",
      "000000000000000000000000000000000000000000001100000000000000",
      "000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000001100000000000000000000",
      "000000000000000000000000000000000000001100000000000000000000"
    ]
  },
  {
    "name": "stable",
    "desc": "  A pattern is said to be stable if it is a {parent} of itself.\n   Stable objects are oscillators with period 1 (p1), and are generally\n   called {still life}s.\n",
    "grid": []
  },
  {
    "name": "stable pseudo-Heisenburp",
    "desc": "  A multi-stage {converter} constructed by\n   Dave Greene in January 2007, using a complex recipe found by Noam\n   Elkies to insert a signal into a {2c/3 wire}.  The wire's high\n   transmission speed allows a {signal} from a {highway robber} to catch\n   up to a {salvo} of {glider}s.  Ultimately the mechanism restores the\n   key glider, which was destroyed by the highway robber in the first\n   stage of the converter, to its exact original position in the salvo.\n     Much smaller stable pseudo-Heisenburp devices have since been\n   designed that use simple 0-degree glider {seed} {constellation}s\n   instead of a 2c/3 wire.\n     These patterns are labeled \"pseudo-Heisenburp\", because a true\n   {Heisenburp device} does not even temporarily damage or affect a\n   passing glider, yet can still produce an output {signal} in response.\n   However, it is impossible to construct a {stable} device that can\n   accomplish this for gliders.  True stable Heisenburp devices are\n   possible with many other types of {spaceship}s, but not with gliders\n   which have no usable side {spark}s to initiate an output signal.\n",
    "grid": []
  },
  {
    "name": "staged recovery",
    "desc": "  A type of signal-processing {circuit} where the\n   initial reaction between {catalyst}s an incoming signal results in an\n   imperfect recovery.  A catalyst is damaged, destroyed completely as\n   in a {bait} reaction, or one or more objects are left behind that\n   must be cleaned up before the circuit can be reused.  In any of these\n   three cases, output signals from the circuit must be used to complete\n   the cleanup.  In theory the cleanup process might itself be {dirty},\n   requiring additional cleanup stages.  In rare cases this might\n   theoretically allow the construction of special-purpose circuits with\n   a lower {recovery time} than would otherwise be possible, but in\n   practice this kind of situation does not commonly arise.\n     An example is the record-breaking (at the time) 487-tick reflector\n   constructed by Adam P. Goucher on 12 April 2009.  487 ticks was a\n   slight improvement over the repeat time of the {Silver reflector}.\n   The reflector featured a standard {Callahan G-to-H}, with cleanup by\n   an internal {dirty} glider reflector found by Dieter Leithner many\n   years before.  This in turn was cleaned up by the usual ungainly\n   Herschel plumbing attached to the G-to-H's output.  The dirty glider\n   reflector is not actually fully recovered before a second p487 signal\n   enters the full reflector.  However, it has been repaired by the time\n   the internal reflector is actually needed again, so the cycle can be\n   successfully repeated at p487 instead of p497.\n",
    "grid": []
  },
  {
    "name": "stairstep hexomino",
    "desc": " (stabilizes at time 63)  The following\n   {predecessor} of the {blockade}.\n",
    "grid": [
      "0011",
      "0110",
      "1100"
    ]
  },
  {
    "name": "stamp collection",
    "desc": "  A collection of {oscillator}s (or perhaps other Life\n   objects) in a single diagram, displaying the exhibits much like\n   stamps in a stamp album.  The classic examples are by Dean Hickerson\n   (see {http://conwaylife.com/ref/DRH/stamps.html}).\n     Many stamp collections contain \"fonts\" made of single cells (which\n   cleanly die) to annotate the objects or to draw boxes around them.\n   For example, here is a stamp collection which shows all the ways that\n   two gliders can create a {loaf} or an {eater}:\n",
    "grid": [
      "01000000101000001000010101000000000000000000010",
      "00000000000000000000000000000000000000000000100",
      "01000001000100010100010000000000000000000000111",
      "00000000000000000000000000000000000000000000000",
      "01000001000100100010010101000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "01000001000100101010010000000000000000000000000",
      "00000000000000000000000000000000000000001100000",
      "01010100101000100010010000000000000000010100000",
      "00000000000000000000000000000000000000000100000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000010",
      "00000000000000000000000000000000000000000000100",
      "10101000010000101010010101001010000000000000111",
      "00000000000000000000000000000000100000000000000",
      "10000000101000001000010000001000000000000000000",
      "00000000000000000000000000000000100000000000000",
      "10101001000100001000010101001010000000000000000",
      "00000000000000000000000000000000000000000000000",
      "10000001010100001000010000001001000000000001000",
      "00000000000000000000000000000000000000000011000",
      "10101001000100001000010101001000100000000010100"
    ]
  },
  {
    "name": "standard spaceship",
    "desc": "  A {glider}, {LWSS}, {MWSS} or {HWSS}.  These have\n   all been known since 1970.\n",
    "grid": []
  },
  {
    "name": "star",
    "desc": " (p3)  Found by Hartmut Holzwart, February 1993.\n",
    "grid": [
      "00000100000",
      "00001110000",
      "00111011100",
      "00100000100",
      "01100000110",
      "11000000011",
      "01100000110",
      "00100000100",
      "00111011100",
      "00001110000",
      "00000100000"
    ]
  },
  {
    "name": "star gate",
    "desc": "  A device by Dieter Leithner (October 1996) for transporting\n   a {LWSS} faster than the {speed of light}.  The key reaction is the\n   {Fast Forward Force Field}.\n",
    "grid": []
  },
  {
    "name": "stator",
    "desc": "  The cells of an {oscillator} that are always on.  Compare\n   {rotor}.  (The stator is sometimes taken to include also some of\n   those cells which are always off.)  The stator is divided into the\n   {bushing} and the {casing}.\n     By analogy, the cells of an {eater} that remain on even when the\n   eater is eating are considered to constitute the stator of the eater.\n   This is not always well-defined, because an eater can have more than\n   one eating action.\n",
    "grid": []
  },
  {
    "name": "statorless",
    "desc": "  A statorless {oscillator} is one in which no cell is\n   permanently on - that is, the {stator} is empty,  or in other words\n   the oscillator has the maximum possible volatility.  See the\n   {volatility} entry for examples of this type of oscillator at\n   different periods.  Statorless oscillators can be constructed for any\n   sufficiently large period, using {universal constructor} technology.\n",
    "grid": []
  },
  {
    "name": "statorless p5",
    "desc": " (p5)  Found by Josh Ball, June 2016.  The first and only\n   known {statorless} {period} 5 {oscillator}.\n",
    "grid": [
      "100000000000001",
      "011000000000110",
      "100001101100001",
      "110100000001011",
      "010100101001010",
      "001010000010100",
      "001110000011100",
      "001110000011100",
      "001010000010100",
      "010100101001010",
      "110100000001011",
      "100001101100001",
      "011000000000110",
      "100000000000001"
    ]
  },
  {
    "name": "step",
    "desc": "  Another term for a {generation} or {tick}.  This term is\n   particularly used in describing {conduit}s.  For example, a 64-step\n   conduit is one through which the active object takes 64 generations\n   to pass.\n",
    "grid": []
  },
  {
    "name": "stillater",
    "desc": " (p3)  Found by Robert Wainwright, September 1985. This is\n   one of only three essentially different p3 {oscillator}s with only\n   three cells in the {rotor}.  The others are {1-2-3} and {cuphook}.\n",
    "grid": [
      "00010000",
      "00101011",
      "00101101",
      "11000000",
      "01010110",
      "01010010",
      "00100100",
      "00011000"
    ]
  },
  {
    "name": "still life",
    "desc": "  Any {stable} pattern, usually assumed to be finite and\n   nonempty.  For the purposes of enumerating still lifes this\n   definition is, however, unsatisfactory because, for example, any pair\n   of blocks would count as a still life, and there would therefore be\n   an infinite number of 8-bit still lifes.\n     For this reason a stricter definition is often used, counting a\n   stable pattern as a {strict still life} only if its {island}s cannot\n   be divided into two or more nonempty sets both of which are stable in\n   their own right. If such a subdivision can be made, the pattern can\n   be referred to as a {constellation}. If its cells form a single\n   {cluster} it is also, more specifically, either a {pseudo still life}\n   or a {quasi still life}.\n     In rare cases above a certain size threshold, a pattern may be\n   divisible into three or four stable nonempty subsets but not into\n   two.  See the 32-bit {triple pseudo} (32 bits) and the 34-bit\n   {quad pseudo} for examples.\n     All still lifes up to 18 bits have been shown to be\n   {glider constructible}.  It is an open question whether all still\n   lifes can be incrementally constructed using glider collisions.  For\n   a subset of small still lifes that have been found to be especially\n   useful in {self-constructing} circuitry, see also {Spartan}.\n     The smallest still life is the {block}.  Arbitrarily large still\n   lifes are easy to construct, for example by extending a {canoe} or\n   {barge}.  The maximum density of a large still life is 1/2, which can\n   be achieved by an arbitrarily large patch of {zebra stripes} or\n   {chicken wire}, among many other options.  See {density} for more\n   precise limits.\n",
    "grid": [
      "0001001001001001001000",
      "0111111111111111111110",
      "1000000000000000000001",
      "1111111111111111111111",
      "0000000000000000000000",
      "1111111111111111111111",
      "1000000000000000000001",
      "0111111111111111111110",
      "0000000000000000000000",
      "0111111111111111111110",
      "1000000000000000000001",
      "1111111111111111111111",
      "0000000000000000000000",
      "1111111111111111111111",
      "1000000000000000000001",
      "0111111111111111111110",
      "0000000000000000000000",
      "0111111111111111111110",
      "1000000000000000000001",
      "1111111111111111111111",
      "0000000000000000000000",
      "1111111111111111111111",
      "1000000000000000000001",
      "0111111111111111111110",
      "0001001001001001001000"
    ]
  },
  {
    "name": "still life tagalong",
    "desc": "  A {tagalong} which takes the form of a\n   {still life} in at least one {phase}.  An example is shown below.\n",
    "grid": [
      "0011000000000000000",
      "0110110000000000000",
      "0011110000000000000",
      "0001100000000000000",
      "0000000000000000000",
      "0001111100000000000",
      "0011111110000000000",
      "0110111110000000000",
      "0011000000000000000",
      "0000000000000000000",
      "0000000010100000110",
      "0000001000010001001",
      "0000001100000101001",
      "0100100111101000110",
      "1000000011000000000",
      "1000100000000000000",
      "1111000000000000000"
    ]
  },
  {
    "name": "stop and go",
    "desc": "  A pattern by Dean Hickerson in which a period 46\n   {shuttle} converts a glider into a block on one oscillation, and then\n   converts the block back into a glider on the next oscillation.  The\n   glider is reflected back onto its own path, but with a delay.\n",
    "grid": [
      "000000000000000000000000000000000000000010",
      "000000000000000000000000000000000000000100",
      "110000000000000011000000000110000000000111",
      "110000000000000001100000000110000000000000",
      "000000000000011111000000000000000000000000",
      "000000000000011110000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000011110000000000000000000000000",
      "000000000000011111000000000000000000000000",
      "110000000000000001100000000000000000000000",
      "110000000000000011000000000000000000000000"
    ]
  },
  {
    "name": "stop and restart",
    "desc": "  A type of {signal} {circuit} where an input signal\n   is converted into a stationary object, which is then re-activated by\n   a secondary input signal.  This can be used either as a memory device\n   storing one bit of information, or as a simple delay mechanism.  In\n   the following January 2016 example by Martin Grant, a\n   {ghost Herschel} marks the output signal location, and a \"ghost\n   {beehive}\" marks the location of the intermediate still life.\n",
    "grid": [
      "0000000000000000000000000000000000000000000000000000000010",
      "0000000000000000000000000000000000000000000000000000000100",
      "0000000000000000000000000000000000000000000000000000000111",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000001000000000000000000000000000000000000000000000",
      "0000000000001110000000000000000000000000000000000000000000",
      "0000000000000001000000000000000000000000000000000000000000",
      "0000000000000011000000000000000000000000000000000000000000",
      "0000000010000000000000000000000000000000000000000000000000",
      "0000000101000000011000000000000000000000000000000000000000",
      "0000000101000000101000000000000000000000000000000000000000",
      "0000011101100000110000000000000000000000000000000000000000",
      "0000100000000000000000000000000000000000000000000000000000",
      "0000011101100000000000000000000000000000000000000000000000",
      "0000000101100000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000000000000000000",
      "0100000000000000000000000000000000000000000000000000000000",
      "0101000000000000000000000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000010000000000000000000000000000000000000",
      "0000000000000000000101000000000000000000000000000000000000",
      "0000000000000000000100000000000000000000000000000000000100",
      "0000000000000000000010000000000000000000000000000000011100",
      "0000000000000000000000000000000000001100000000000000010000",
      "0010000000000000000000000000000000001100000000000000010000",
      "0010100000000000000000000000000000000000000000000000000000",
      "0011100000000000000000000000000000000000000000000000000000",
      "0000100000000000000000000100000000000000000000000000000000",
      "0000000000000000000000001010000000000000000000000000000000",
      "0000000000000000000000001100000000000000000000000000000000",
      "0000000000000000000110000000000001100000000000000000000000",
      "0000000000000000000110000000000001000000000000000000000000",
      "0000000000000000000000000000000000100000000000000000000000",
      "0000000000000000000000000000000001100000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000000",
      "0011000000000011000000000000000000000000000000000000000000",
      "0001000000000010000000000000000000000000000000000000000000",
      "1110000000000001110000000000000000000000000000000000000000",
      "1000000000000000010000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "stream",
    "desc": "  A line of identical objects (usually {spaceship}s), each of\n   which is moving in a direction parallel to the line, generally on the\n   same {lane}.  In many uses the stream is periodic.  For example, the\n   {new gun} produces a period 46 {glider} stream.  The stream produced\n   by a {pseudo-random glider generator} can have a very high period.\n   Compare with {wave}.  See also {single-channel} for a common use of\n   non-periodic {glider} streams.\n",
    "grid": []
  },
  {
    "name": "stretcher",
    "desc": "  Any pattern that grows by stretching a {wick} or {agar}.\n   See {wickstretcher} and {spacefiller}.\n",
    "grid": []
  },
  {
    "name": "strict still life",
    "desc": "  A {still life} that is either a single connected\n   {polyplet}, or is arranged such that a {stable} smaller pattern\n   cannot be formed by removing one or more of its {island}s. For\n   example, {beehive with tail} is a strict still life because it is\n   connected, and {table on table} is a strict still life because\n   neither of the {table}s are stable by themselves.  See also\n   {triple pseudo}, {quad pseudo}.\n     Still lifes have been enumerated by Conway (4-7 bits), Robert\n   Wainwright (8-10 bits), Dave Buckingham (11-13 bits), Peter Raynham\n   (14 bits), Mark Niemiec (15-24 bits), and Simon Ekstrom and Nathaniel\n   Johnston (25-32 bits).  The resulting figures are shown below; see\n   also {https://oeis.org/A019473}.  The most recent search by Nathaniel\n   Johnston has also confirmed that the {triple pseudo} pattern found by\n   Gabriel Nivasch is the only such still life with 32 bits or less.  It\n   is therefore included in the pseudo still life count and not in the\n   table below.\n",
    "grid": [
      "11111111111111"
    ]
  },
  {
    "name": "strict volatility",
    "desc": "  A term suggested by Noam Elkies in August 1998 for\n   the proportion of cells involved in a period n {oscillator} which\n   themselves oscillate with period n.  For prime n this is the same as\n   the ordinary {volatility}.  Periods with known strictly-volatile\n   oscillators include 1, 2, 3, 5, 6, 8, 13, 15, 22, 30, 33, and 177.\n   Examples include {figure-8}, {Kok's galaxy}, {smiley}, and\n   {pentadecathlon}.  A composite example is the following p22, found by\n   Nicolay Beluchenko on 4 March 2009:\n",
    "grid": [
      "0000000000011000",
      "0000000000101000",
      "0010000010000100",
      "1101100110101000",
      "1000000010001000",
      "0101000000000000",
      "0000000000000000",
      "0011100000001000",
      "0001000000011100",
      "0000000000000000",
      "0000000000001010",
      "0001000100000001",
      "0001010110011011",
      "0010000100000100",
      "0001010000000000",
      "0001100000000000"
    ]
  },
  {
    "name": "super beehive",
    "desc": "  = {honeycomb}\n",
    "grid": []
  },
  {
    "name": "superfountain",
    "desc": " (p4)  A p4 {sparker} which produces a 1-cell spark that\n   is separated from the rest of the oscillator by two clear rows of\n   cells.  The first superfountain was found by Noam Elkies in February\n   1998.  In January 2006 Nicolay Beluchenko found the much smaller one\n   shown below.  See also {fountain}.\n",
    "grid": [
      "00000000000100000000000",
      "00000000000000000000000",
      "00000000000000000000000",
      "00000100100000100100000",
      "00011001011111010011000",
      "00000100000000000100000",
      "00010110000000001101000",
      "01010001110001110001010",
      "11101000000000000010111",
      "00000000001010000000000",
      "00001110001010001110000",
      "00001001000100010010000",
      "00011110010101001111000",
      "00011001110101110011000",
      "00100010001010001000100",
      "00010010101010101001000",
      "00001010110001101010000",
      "00000100000000000100000"
    ]
  },
  {
    "name": "superlinear growth",
    "desc": "  Growth faster than any rate proportional to T,\n   where T is the number of ticks that a pattern has been run.  This\n   term usually applies to a pattern's population growth, rather than\n   diametric growth or bounding-box growth.  For example, {breeder}s'\n   and {spacefiller}s' population asymptotically grows faster than any\n   linear-growth pattern.  It may also be used to describe the rate of\n   increase in the number of subpatterns present in a pattern, such as\n   when describing a {replicator}'s rate of reproduction.  Due to limits\n   enforced by the {speed of light}, no pattern's population can grow at\n   an asymptotic rate faster than {quadratic growth}.  See\n   {switch-engine ping-pong} for the lowest-population superlinear\n   growth pattern as of July 2018, along with a list of the\n   record-holders.\n",
    "grid": []
  },
  {
    "name": "superstring",
    "desc": "  An infinite orthogonal row of cells stabilized on one\n   side so that it moves at the {speed of light}, often leaving debris\n   behind.  The first examples were found in 1971 by Edward Fitzgerald\n   and Robert Wainwright.  Superstrings were studied extensively by\n   Peter Rott during 1992-1994, and he found examples with many\n   different periods.  (But no odd periods.  In August 1998 Stephen\n   Silver proved that odd-period superstrings are impossible.)\n     Sometimes a finite section of a superstring can be made to run\n   between two tracks (\"waveguides\").  This gives a {fuse} which can be\n   made as wide as desired.  The first example was found by Tony\n   Smithurst and uses {tub}s.  (This is shown below.  The superstring\n   itself is p4 with a repeating section of width 9 producing one\n   blinker per period and was one of those discovered in 1971.  With the\n   track in place, however, the period is 8.  This track can also be\n   used with a number of other superstrings.)  Shortly after seeing this\n   example, in March 1997 Peter Rott found another superstring track\n   consisting of {boat}s.  At present these are the only two waveguides\n   known.  Both are destroyed by the superstring as it moves along.  It\n   would be interesting to find one that remains intact.\n     See {titanic toroidal traveler} for another example of a\n   superstring.\n",
    "grid": [
      "0110000000000000000000000000000000000000000000000000000000000",
      "1001000100010001000100010001000100010001000100010001000100010",
      "0000101010101010101010101010101010101010101010101010101010101",
      "1001000100010001000100010001000100010001000100010001000100010",
      "0111000000000000000000000000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0001000000000000000000000000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000000000000000000000000",
      "0011000000000000000000000000000000000000000000000000000000000",
      "0111000000000000000000000000000000000000000000000000000000000",
      "1001000100010001000100010001000100010001000100010001000100010",
      "0000101010101010101010101010101010101010101010101010101010101",
      "1001000100010001000100010001000100010001000100010001000100010",
      "0110000000000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "support",
    "desc": "  Those parts of an object which are only present in order to\n   keep the rest of the object (such an {engine} or an edge {spark})\n   working correctly.  These can be components of the object, or else\n   accompanying objects used to {perturb} the object.  In many cases\n   there is a wide variation of support possible for an engine.  The\n   {arm}s in many {puffer}s are an example of support.\n",
    "grid": []
  },
  {
    "name": "surprise",
    "desc": " (p3)  Found by Dave Buckingham, November 1972.\n",
    "grid": [
      "0001000011",
      "0001110010",
      "0110001010",
      "1001101011",
      "0100000010",
      "1101011001",
      "0101000110",
      "0100111000",
      "1100001000"
    ]
  },
  {
    "name": "SW1T43",
    "desc": "  A {Herschel-to-glider} converter that produces a\n   {tandem glider} useful in the {tee} reaction.  It is classified as a\n   \"G3\" converter because its two gliders are three {lane}s apart.\n",
    "grid": [
      "00000001100000000",
      "00000001000000000",
      "00000101000000000",
      "00001010000000000",
      "11000100000000000",
      "11000000000000000",
      "00000000000110000",
      "00000000000101000",
      "00000000000001000",
      "00000000000001011",
      "00000000001101011",
      "10000000010010000",
      "10100000001100000",
      "11100000000000000",
      "00100000001111000",
      "00000000000100100",
      "00000000010001100",
      "00000000011000000"
    ]
  },
  {
    "name": "SW-2",
    "desc": "  The simplest type of {H-to-G} {converter}, where the converter's\n   effect is simply to suppress a Herschel cleanly after allowing its\n   {first natural glider} to escape.  The name should be read as \"SW\n   minus two\", where -2 is a glider {lane} number.  The complete\n   designation is SW-2T21.  See {NW31T120} for a discussion of the\n   standard naming conventions used for these converters.\n     An unlimited number of converters have the SW-2T21 classification.\n   The variants most often used consist of just one or two small\n   {still life} {catalyst}s.\n",
    "grid": [
      "000000000000000000000000000000000001100000",
      "000000000000000000000000000000000001000000",
      "000000000000000000000000000000000101000000",
      "000000000000000000000000000001100110000000",
      "000000000000000000000000000001100000000000",
      "000001100000000000000000000000000000000000",
      "000001100000000000000000000000000000000000",
      "000000000000000000000000000001100000000000",
      "000000000000000000000000000001100000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000110000000000000000000000000000000",
      "000000000110000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "100000000000000000000000010000000000000000",
      "101000000000000000000000010100000000000000",
      "111000000000000000000000011100000000000000",
      "001000000000000000000000000100000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000010",
      "000000000001000000000000000000000000000101",
      "000000000010100000000000000000000000000011",
      "000000000010100000000000000000000000000000",
      "000000000001000000000000000000000000000011",
      "100000000000000000000000010000000000000101",
      "101000000000000000000000010100000000000010",
      "111000000000000000000000011100000000000000",
      "001000000000000000000000000100000000000000"
    ]
  },
  {
    "name": "SW-2T21",
    "desc": "  = {SW-2}\n",
    "grid": []
  },
  {
    "name": "swan",
    "desc": " (c/4 diagonally, p4)  A diagonal {spaceship} producing some\n   useful sparks.  Found by Tim Coe in February 1996.\n",
    "grid": [
      "010000000000110000000000",
      "111110000001100000000000",
      "100110000000010000000110",
      "001101000001100000011101",
      "000000000001100010110000",
      "000001010000001100000000",
      "000000000011101000010000",
      "000000011100010000100000",
      "000000001000000010000000",
      "000000001000000100000000",
      "000000000000000000000000",
      "000000000001000000000000"
    ]
  },
  {
    "name": "swimmer",
    "desc": "  = {switch engine}.\n",
    "grid": []
  },
  {
    "name": "swimmer lane",
    "desc": "  = {switch engine channel}.\n",
    "grid": []
  },
  {
    "name": "switch",
    "desc": "  A {signal}-carrying {circuit} that can send output signals to\n   two or more different locations, depending on the state of the\n   mechanism.  These may be {toggle circuit}s, where the state of the\n   switch changes after each use, or {permanent switch}es that retain\n   the same state through many uses until a change is made with a\n   separate signal.\n\n     More generally, any circuit may be referred to as a switch, if it\n   can alter its output based on stored information.  For example, the\n   following simple mechanism based on an eater2 was discovered by\n   Emerson J. Perkins in 2007.  It either reflects or absorbs an\n   incoming signal, depending on the presence or absence of a nearby\n   block.  The block is removed if a reflection occurs.\n",
    "grid": [
      "0001000000000000000000000100000000000000000000",
      "0000100000000000000000001010000000000000000000",
      "0011100000000000000000001010000000000000000000",
      "0000000000000000000000111011000000000000000010",
      "0000000000000000001001000000000000000000001110",
      "0000000000000000111000111011000110000000010000",
      "0000000000000001000000001011000110000000011000",
      "0000000000000001100000000000000000000000000000",
      "1100000000000000000000000000000000000000000000",
      "0100000000000000000000000000000000000000000000",
      "0101100000000000000000000000000000000000000000",
      "0010010000000000000000000000000000000000001100",
      "0001100000000000000000000000000000000000001010",
      "0000000000000000001100000000000000000000000010",
      "0000000000000000001100000000000000000000000011",
      "0000000000000000000000000000000000111000000000",
      "0000000000000000000000000000000000100000000000",
      "0000000000000000000000000000000000010000000000",
      "0000000000000000000000000000000000000000000000",
      "0000000000000000000000000010001100000000000000",
      "0000000000000000000000000101000100000000000000",
      "0000000000000000000001101010001000000000000000",
      "0000000000000000000001101000010000000000000000",
      "0000000000000000000000000111110100000000000000",
      "0000000000000000011010110100001100000000000111",
      "0000000000000000010110100101100000000000000100",
      "0000000000110000000000001101011100000000000010",
      "0000000000110000000000000000000100000000000000"
    ]
  },
  {
    "name": "switchable gun",
    "desc": "  A {gun} that includes a mechanism to turn the output\n   stream off and on with simple signals, often gliders.  A small\n   example is Dieter Leithner's switchable LWSS gun from July 8, 1995.\n   The ON signal enters from the northeast, and the OFF signal from the\n   northwest:\n",
    "grid": [
      "00000000000000000110000000000000000000000000000000000000000000",
      "00000000000000000100100000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000010000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "01000000000000000001100000000000000000000000000000000000000000",
      "00100000000000000010000000000000000000000000000000000000000000",
      "11100000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000000",
      "00000000000000011000110000000000000000000000000000000000000000",
      "00000000000000011000110000000000000000000000000000000000000000",
      "00000000000000001111100000000000000000000000010000000000000000",
      "00000000000000000101000000000000000000000000100000000000000000",
      "00000000000000000000000000000000000000000000111000000000000000",
      "00000000000000000111000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000010100000000000000000000000",
      "00000000000000000000000000000000000010001000000000000000000000",
      "00000000000000000000000000000000000000001000000010000000000000",
      "00000000000000000000000000110000000010000100001111000000000000",
      "00000000000000000000000000110000000000001000010101100000000000",
      "00000000000000000000010000000000000010001000100101110000000011",
      "00000000000000000000001000000000000010100000010101100000000011",
      "00000000000000000000111000000000000000000000001111000000000000",
      "00000000000000001000000000000000000000000000000010000000000000",
      "00000000000000011100000000000000000001000000000000000000000000",
      "00000000000000111110000000000000000001010000010000000000000000",
      "00000000000001100011000000000000000001100001110000000000000000",
      "00000000000000000000000000000000000000000010000000000000000000",
      "00000000000000000000000000000100000000000011000000000000000000",
      "00000000000000000000000000010010000000001110000000000000000000",
      "00000000000000011100000000001110000000001100000000000000000000",
      "00000000000000011100000000001000000000010100000000000000000000",
      "00000000000000000000000000000100000000000000000000000000000000",
      "00000000000000000000000000000111000000000000000000000000000000",
      "00000000000000001100000000000000000000000000000000000000000000",
      "00000000000000001100000000000000000000000000000000000000000000",
      "00000000000000000000010000000000000000000000000000000000000000",
      "00000000000000000001111000000110011000000000000000000000000000",
      "00000000000001100010101100000111101001010000000000000000000000",
      "00000000000001100100101110000011010001000100000000000000000000",
      "00000000000000000010101100001000000000000100000110000000000000",
      "00000000000000000001111000000000000001000010000110000000000000",
      "00000000000000000000010000000000000000000100000000000000000000",
      "00000000000000000000000000000000000001000100000000000000000000",
      "00000000000000000000000000000000000001010000000000000000000000"
    ]
  },
  {
    "name": "switch engine",
    "desc": "  The following pattern discovered by Charles Corderman\n   in 1971, which is a {glide symmetric} unstable {puffer} which moves\n   diagonally at a speed of c/12 (8 cells every 96 generations).\n",
    "grid": [
      "010100",
      "100000",
      "010010",
      "000111"
    ]
  },
  {
    "name": "switch engine channel",
    "desc": "  Two lines of {boat}s (or other suitable\n   objects, such as {tub with tail}s) arranged so that a {switch engine}\n   can travel between them, in the following manner:\n",
    "grid": [
      "00000000000000110000000000000000",
      "00000000000001010000000000000000",
      "00000000000000100000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000001110000000000001100000000",
      "00000000100100000000010100000000",
      "00000000000010000000001000000000",
      "00000000010100000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000011",
      "00000000000000000000000000000101",
      "00000000000000000000000000000010",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "01000000000000000000000000000000",
      "10100000000000000000000000000000",
      "11000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000000000000000000000000000",
      "00000000010000000000000000000000",
      "00000000101000000000000000000000",
      "00000000110000000000000000000000"
    ]
  },
  {
    "name": "switch engine chute",
    "desc": "  = {switch engine channel}\n",
    "grid": []
  },
  {
    "name": "switch-engine ping-pong",
    "desc": "  A very large (210515x183739)\n   {quadratic growth} pattern found by Michael Simkin in October 2014.\n   Currently this is the smallest starting population (23 cells) known\n   to result in a quadratic population growth rate.  Previous\n   record-holders include {Jaws}, {mosquito1}, {mosquito2}, {mosquito3},\n   {mosquito4}, {mosquito5}, {teeth}, {catacryst}, {metacatacryst},\n   {Gotts dots}, {wedge}, {26-cell quadratic growth},\n   {25-cell quadratic growth}, and {24-cell quadratic growth}.\n",
    "grid": []
  },
  {
    "name": "symmetric",
    "desc": "  Any object which can be rotated and/or flipped over an axis\n   and still maintain the same shape.  Many common small objects such as\n   the {block}, {beehive}, {pond}, {loaf}, {clock}, and {blinker} are\n   symmetric.  Some larger symmetric objects are {Kok's galaxy},\n   {Achim's p16}, {cross}, {Eureka}, and the {pulsar}.\n     Large symmetric objects can easily be created by placing multiple\n   copies of any finite object together in a symmetrical way.  Unless\n   the individual objects interact significantly, this is considered\n   trivial and is not considered further here (e.g., two {LWSS}s\n   travelling together a hundred cells apart).\n     There are two kinds of symmetry.  Odd symmetry occurs when an\n   object's line of reflection passes through the center of a line of\n   cells.  Objects with odd symmetry have an odd number of columns or\n   rows, and can have a {gutter}.  Even symmetry occurs when the line of\n   reflection follows the boundary between two lines of cells.  Objects\n   with even symmetry have an even number of columns or rows.\n     Because the Life universe and its rules are symmetric, all\n   symmetric objects must remain symmetric throughout their {evolution}.\n   Most non-symmetric objects keep their non-symmetry as they evolve,\n   but some can become symmetric, especially if they result in a single\n   object.  Here is a slightly more complicated example where two\n   gliders interact to form a {blockade}:\n",
    "grid": [
      "001000000000",
      "101000000000",
      "011000000001",
      "000000000110",
      "000000000011"
    ]
  },
  {
    "name": "synchronized",
    "desc": "  Indicates that precise relative timing is required for\n   two or more input {signal}s entering a {circuit}, or two or more sets\n   of {glider}s participating in a {glider synthesis}.  Compare\n   {asynchronous}.  See also {salvo} and {slow glider construction}.\n",
    "grid": []
  },
  {
    "name": "synchronous",
    "desc": "   = {synchronized}\n",
    "grid": []
  },
  {
    "name": "synthesis",
    "desc": "  = {glider synthesis}\n",
    "grid": []
  },
  {
    "name": "syringe",
    "desc": "  A small stable {converter} found by Tanner Jacobi in March\n   2015, accepting a glider as input and producing an output {Herschel}\n   As of June 2018 it is the smallest known converter of this type, so\n   it is very often used to handle input gliders in complex {signal}\n   {circuit}ry, as described in {Herschel circuit}.  A second glider can\n   safely follow the first any time after 78 ticks, but {overclocking}\n   also allows the syringe to work at a {repeat time} of 74 or 75 ticks.\n   If followed by a {dependent conduit} a simple {eater2} can be used\n   instead of the large {weld}ed {catalyst} shown here.  A\n   {ghost Herschel} marks the output location.\n",
    "grid": [
      "0000100000000000000000000000000000",
      "0000010000000000000000000000000000",
      "0001110000000000000000000000000000",
      "0000000000000000001000000000000000",
      "0000000000000000111000000000000000",
      "0000000000000001000000000000000000",
      "0000000000000001100000000000000000",
      "1100000000000000000000000000000000",
      "0100000000000000000000000000000000",
      "0101100000000000000000000000000000",
      "0010010000000000000000000000010000",
      "0001100000000000000000000000010000",
      "0000000000000000001100000000011100",
      "0000000000000000001100000000000100",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000000000000",
      "0000000000000000000000000001000110",
      "0000000000000000000000000010100010",
      "0000000000000000000000000101000100",
      "0000000000000000000001101010001000",
      "0000000000000000000001101001111010",
      "0000000000000000000000000101000101",
      "0000000000000000000001101100100101",
      "0000000000000000000000101001100010",
      "0000000000110000000000101000000000",
      "0000000000110000000000010000000000"
    ]
  },
  {
    "name": "T",
    "desc": "  = {T-tetromino}\n",
    "grid": []
  },
  {
    "name": "table",
    "desc": "  The following {induction coil}.\n",
    "grid": [
      "1111",
      "1001"
    ]
  },
  {
    "name": "table on table",
    "desc": " (p1)\n",
    "grid": [
      "1001",
      "1111",
      "0000",
      "1111",
      "1001"
    ]
  },
  {
    "name": "tag",
    "desc": "  = {tagalong}\n",
    "grid": []
  },
  {
    "name": "tagalong",
    "desc": "  An object which is not a {spaceship} in its own right, but\n   which can be attached to one or more spaceships to form a larger\n   spaceship.  For examples see {Canada goose}, {fly}, {pushalong},\n   {sidecar} and {sparky}.  See also {Schick engine}, which consists of\n   a tagalong attached to two LWSS (or similar).\n     The following {c/4 spaceship} (Nicolay Beluchenko, February 2004)\n   has two wings, either of which can be considered as a tagalong. But\n   if either wing is removed, then the remaining wing becomes an\n   essential component of the spaceship, and so is no longer a tagalong.\n",
    "grid": [
      "00000000000000000000000100000000000000000000000",
      "00000000000000000000000100000000000000000000000",
      "00000000000000000000001010000000000000000000000",
      "00000000000000000000000000000000000000000000000",
      "00000000000000000000010001000000000000000000000",
      "00000000000000000000110001100000000000000000000",
      "00000000000000000011010001011000000000000000000",
      "00000000000000001101010001010110000000000000000",
      "00000000000010001110100000101110001000000000000",
      "00000000000011111100000000000111111000000000000",
      "00000000000100100001000000010000100100000000000",
      "00000000000000000001000000010000000000000000000",
      "00000000001110000000000000000000001110000000000",
      "00000000010110000000000000000000001101000000000",
      "00000000100100000000000000000000000100100000000",
      "00000000100000000000000000000000000000100000000",
      "00000000011000000000000000000000000011000000000",
      "00000000011000000000000000000000000011000000000",
      "11100000010000000000000000000000000001000000111",
      "01000000111000000000000000000000000011100000010",
      "00000011001000000000000000000000000010011000000",
      "00110101110000000000000000000000000001110101100",
      "01000101000000000000000000000000000000010100010",
      "01000110000000000000000000000000000000001100010"
    ]
  },
  {
    "name": "tail spark",
    "desc": "  A {spark} at the back of a spaceship.  For example, the\n   1-bit spark at the back of a {LWSS}, {MWSS} or {HWSS} in their less\n   dense phases.\n",
    "grid": []
  },
  {
    "name": "tame",
    "desc": "  To {perturb} a {dirty} reaction using other patterns so as to\n   make it {clean} and hopefully useful.  Or to make a reaction work\n   which would otherwise fail due to unwanted products which interfere\n   with the reaction.\n",
    "grid": []
  },
  {
    "name": "taming",
    "desc": "  See {tame}.\n",
    "grid": []
  },
  {
    "name": "tandem glider",
    "desc": "  Two gliders travelling on parallel lanes at a fixed\n   spacetime offset, usually as a single signal in a\n   {Herschel transceiver}.  See also {glider pair}.\n",
    "grid": []
  },
  {
    "name": "Tanner's p46",
    "desc": " (p46)  An {oscillator} found by Tanner Jacobi on 20\n   October 2017.  This oscillator hassles an evolving {pi-heptomino} to\n   produce an {phi} {spark}.  The spark is very accessible and is able\n   to perturb many things.\n",
    "grid": [
      "00000000000000100000000000",
      "00011000000011011000000000",
      "00011000000011011000001011",
      "00000000000000000000001101",
      "00000000000000000000000000",
      "00110000000000000000000000",
      "00010000000000000000000000",
      "11100000000000000000000000",
      "10000000000000100000000000",
      "00000000000001010101100000",
      "00000000000010110110100000",
      "00000000000010000000000000",
      "00000000000110000000000000"
    ]
  },
  {
    "name": "target",
    "desc": "  A necessary component of a {slow salvo} recipe used by a\n   {single-arm} {universal constructor}.  A target usually consists of a\n   single object, or sometimes a small {constellation} of common still\n   lifes and/or oscillators.  See {intermediate target}.  If no {hand}\n   target is available, a construction arm may be unable to construct\n   anything, unless recipes are available to generate targets directly\n   from the {elbow}.\n",
    "grid": []
  },
  {
    "name": "teardrop",
    "desc": "  The following {induction coil}, or the formation of two\n   beehives that it evolves into after 20 generations.  (Compare\n   {butterfly}, where the beehives are five cells further apart.)\n",
    "grid": [
      "1110",
      "1001",
      "1001",
      "0110"
    ]
  },
  {
    "name": "technician",
    "desc": " (p5)  Found by Dave Buckingham, January 1973.\n",
    "grid": [
      "00000100000",
      "00001010000",
      "00001100000",
      "00110000000",
      "01000111000",
      "10011000101",
      "01100001011",
      "00010101000",
      "00010001000",
      "00001110000",
      "00000010100",
      "00000001100"
    ]
  },
  {
    "name": "technician finished product",
    "desc": "  = {technician}\n",
    "grid": []
  },
  {
    "name": "technology",
    "desc": "  The collective set of known reactions exploiting one\n   subset of the Life universe.  Examples of these subsets include\n   {glider synthesis}, period 30 glider {stream}s, c/3 {spaceship}s,\n   {sparker}s, {Herschel conduit}s, and {slow salvo}s.  As new reactions\n   and objects are found, over time any particular technology becomes\n   more versatile and complete.  Many Life experts like to concentrate\n   on particular technologies.\n",
    "grid": []
  },
  {
    "name": "tee",
    "desc": "  A head-on collision between three {glider}s, producing a\n   perpendicular output glider that can be used to construct closely\n   spaced glider {salvo}s, or to {inject} a glider into an existing\n   {stream}.  There are several workable {recipe}s.  One of the more\n   useful is the following, because the {tandem glider} can be generated\n   by a small {Herschel} {converter}, {SW1T43}:\n",
    "grid": [
      "00000000000000010",
      "00000000000000100",
      "00000000000000111",
      "00000000010000000",
      "00000000010100000",
      "00000000011000000",
      "01100000000000000",
      "10100000000000000",
      "00100000000000000"
    ]
  },
  {
    "name": "teeth",
    "desc": "  A 65-cell quadratic growth pattern found by Nick Gotts in March\n   2000.  This (and a related 65-cell pattern which Gotts found at about\n   the same time) beat the record previously held by {mosquito5} for\n   smallest population known to have superlinear growth, but was later\n   superseded by {catacryst}.  See {switch-engine ping-pong} for the\n   lowest-population {superlinear growth} pattern as of July 2018, along\n   with a list of the record-holders.\n",
    "grid": []
  },
  {
    "name": "telegraph",
    "desc": "  A pattern created by Jason Summers in February 2003.  It\n   transmits and receives information using a rare type of\n   {reburnable fuse}, a {lightspeed wire} made from a chain of beehives,\n   at the rate of 1440 ticks per bit.  The rate of travel of signals\n   through the entire {transceiver} device can be increased to any speed\n   strictly less than the {speed of light} by increasing the length of\n   the beehive chain appropriately.\n     \"Telegraph\" may also refer to any device that sends and receives\n   lightspeed signals; see also {p1 telegraph},\n   {high-bandwidth telegraph}.\n",
    "grid": []
  },
  {
    "name": "ternary reaction",
    "desc": "  Any reaction between three objects.  In particular,\n   a reaction in which two gliders from one stream and one glider from a\n   crossing stream of the same period annihilate each other.  This can\n   be used to combine two glider guns of the same period to produce a\n   new glider gun with double the period.\n",
    "grid": []
  },
  {
    "name": "test tube baby",
    "desc": " (p2)\n",
    "grid": [
      "11000011",
      "10100101",
      "00100100",
      "00100100",
      "00011000"
    ]
  },
  {
    "name": "tetraplet",
    "desc": "  Any 4-cell {polyplet}.\n",
    "grid": []
  },
  {
    "name": "tetromino",
    "desc": "  Any 4-cell {polyomino}.  There are five such objects, shown\n   below.  The first is the {block}, the second is the {T-tetromino} and\n   the remaining three rapidly evolve into {beehive}s.\n",
    "grid": [
      "110000001110000001111000000111000000110",
      "110000000100000000000000000001000000011"
    ]
  },
  {
    "name": "The Online Life-Like CA Soup Search",
    "desc": "  A distributed search effort set\n   up by Nathaniel Johnston in 2009, using a Python script running in\n   {Golly}.  Results included a collection of the longest-lived 20x20\n   soups, as well as a {census} of over 174 billion {ash} objects.  It\n   has since been superseded by {Catagolue}.\n",
    "grid": []
  },
  {
    "name": "The Recursive Universe",
    "desc": "  A popular science book by William Poundstone\n   (1985) dealing with the nature of the universe, illuminated by\n   parallels with the game of Life.  This book brought to a wider\n   audience many of the results that first appeared in {LifeLine}.  It\n   also outlines the proof of the existence of a {universal constructor}\n   in Life first given in {Winning Ways}.\n",
    "grid": []
  },
  {
    "name": "thumb",
    "desc": "  A {spark}-like protrusion which flicks out in a manner\n   resembling a thumb being flicked.  Below on the left is a p9 thumb\n   sparker found by Dean Hickerson in October 1998.  On the right is a\n   p4 example found by David Eppstein in June 2000.\n",
    "grid": [
      "0000000100000000000000100000",
      "0001100010000000001100010000",
      "0001000001011000001000001000",
      "1101010000001000000111010110",
      "1101011011110000000000001101",
      "0001010000000000011111100001",
      "0001010111000000010000111110",
      "0000101000100000000010000000",
      "0000001001100000000101111000",
      "0000001100000000000101001000",
      "0000000000000000000010000000"
    ]
  },
  {
    "name": "thunderbird",
    "desc": " (stabilizes at time 243)\n",
    "grid": [
      "111",
      "000",
      "010",
      "010",
      "010"
    ]
  },
  {
    "name": "tick",
    "desc": "  = {generation}\n",
    "grid": []
  },
  {
    "name": "tic tac toe",
    "desc": "  = {octagon II}\n",
    "grid": []
  },
  {
    "name": "tie",
    "desc": "  A term used in naming certain {still life}s (and the {stator}\n   part of certain {oscillator}s).  It indicates that the object\n   consists of two smaller objects joined point to point, as in\n   {ship tie boat}.\n",
    "grid": []
  },
  {
    "name": "time bomb",
    "desc": "  The following pattern by Doug Petrie, which is really just\n   a glider-producing {switch engine} in disguise.  See\n   {infinite growth} for some better examples of a similar nature.\n",
    "grid": [
      "010000000000011",
      "101000010000001",
      "000000010000100",
      "001001000100100",
      "001100000010000",
      "000100000000000"
    ]
  },
  {
    "name": "titanic toroidal traveler",
    "desc": "  The {superstring} with the following\n   repeating segment.  The front part becomes p16, but the eventual fate\n   of the detached back part is unknown.\n",
    "grid": [
      "111111",
      "111000"
    ]
  },
  {
    "name": "TL",
    "desc": "  = {traffic light}\n",
    "grid": []
  },
  {
    "name": "T-nosed p4",
    "desc": " (p4)  Found by Robert Wainwright in October 1989.  See also\n   {filter}.\n",
    "grid": [
      "00000100000",
      "00000100000",
      "00001110000",
      "00000000000",
      "00000000000",
      "00000000000",
      "00011111000",
      "00101110100",
      "00101010100",
      "01101010110",
      "10011011001",
      "11000000011"
    ]
  },
  {
    "name": "T-nosed p5",
    "desc": " (p5)  Found by Nicolay Beluchenko in April 2005.\n",
    "grid": [
      "00000110000000000000001101100000100000000",
      "00100100000000011010111011000000100000000",
      "01010100000100001010111000000110100000000",
      "10010101111110000010000101000110100000000",
      "01101010010001110010111100101011011000000",
      "00101001101001001011000011101010000110000",
      "01001000100101011000011100010000000000000",
      "01010100011101000111100010010100110100100",
      "11010000000001101000010101010000000010111",
      "01010100011101000111100010010100110100100",
      "01001000100101011000011100010000000000000",
      "00101001101001001011000011101010000110000",
      "01101010010001110010111100101011011000000",
      "10010101111110000010000101000110100000000",
      "01010100000100001010111000000110100000000",
      "00100100000000011010111011000000100000000",
      "00000110000000000000001101100000100000000"
    ]
  },
  {
    "name": "T-nosed p6",
    "desc": " (p6)  Found by Achim Flammenkamp in September 1994. There\n   is also a much larger and fully symmetric version found by\n   Flammenkamp in August 1994.\n",
    "grid": [
      "0000001100011000000",
      "0000001010101000000",
      "0000000100010000000",
      "0000000000000000000",
      "0010101000001010100",
      "1110101100011010111",
      "0010101000001010100",
      "0000000000000000000",
      "0000000100010000000",
      "0000001010101000000",
      "0000001100011000000"
    ]
  },
  {
    "name": "toad",
    "desc": " (p2)  Found by Simon Norton, May 1970.  This is the second most\n   common {oscillator}, although {blinker}s are more than a hundred\n   times as frequent.  See also {killer toads}.  A toad can be used as a\n   90-degree {one-time} {turner}.\n",
    "grid": [
      "0111",
      "1110"
    ]
  },
  {
    "name": "toad-flipper",
    "desc": "  A {toad} {hassler} that works in the manner of the\n   following example.  Two {domino} {sparker}s, here {pentadecathlon}s,\n   apply their {spark}s to the toad in order to flip it over.  When the\n   sparks are applied again it is flipped back.  Either or both domino\n   sparkers can be moved down two spaces from the position shown and the\n   toad-flipper will still work, but because of symmetry there are\n   really only two different types.  Compare {toad-sucker}.\n",
    "grid": [
      "010000000000000010",
      "010000000000000010",
      "101000000000000101",
      "010000000000000010",
      "010000001000000010",
      "010000001100000010",
      "010000001100000010",
      "101000000100000101",
      "010000000000000010",
      "010000000000000010"
    ]
  },
  {
    "name": "toad-sucker",
    "desc": "  A {toad} {hassler} that works in the manner of the\n   following example.  Two {domino} {sparker}s, here {pentadecathlon}s,\n   apply their {spark}s to the toad in order to shift it.  When the\n   sparks are applied again it is shifted back.  Either or both domino\n   sparkers can be moved down two spaces from the position shown and the\n   toad-sucker will still work, but because of symmetry there are really\n   only three different types.  Compare {toad-flipper}.\n",
    "grid": [
      "010000000000000000",
      "010000000000000010",
      "101000000000000010",
      "010000000000000101",
      "010000001000000010",
      "010000001100000010",
      "010000001100000010",
      "101000000100000010",
      "010000000000000101",
      "010000000000000010",
      "000000000000000010"
    ]
  },
  {
    "name": "toaster",
    "desc": " (p5)  Found by Dean Hickerson, April 1992.\n",
    "grid": [
      "000010000001100",
      "000101011001000",
      "000101010101000",
      "001101000101100",
      "100011010110001",
      "000100000001000",
      "000100000001000",
      "100011010110001",
      "001101000101100",
      "000101010101000",
      "000101011001000",
      "000010000001100"
    ]
  },
  {
    "name": "toggleable gun",
    "desc": "  Any {gun} that can be turned off or turned on by the\n   same external signal - the simplest possible switching mechanism.  An\n   input signal causes the gun to stop producing gliders.  Another input\n   signal from the same source restores the gun to its original\n   function.  Compare {switchable gun}.\n     Here's a small example by Dean Hickerson from September 1996:\n",
    "grid": [
      "000000000000001100000000000000100",
      "000000000000001010000000000000101",
      "000000000000001000000000000000110",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000000000000000000000",
      "000000000000000100100001000000000",
      "011110000000000000010010000000000",
      "100010000000000100010011100000000",
      "000010000000000011110000000000000",
      "100100000000000000000000000011100",
      "000000000000000000000000000010000",
      "000000000000000000000000000001000"
    ]
  },
  {
    "name": "toggle circuit",
    "desc": "  Any signal-processing {circuit} that switches back and\n   forth between two possible states or outputs.  An early example is\n   the {boat-bit}.  More recent discoveries include the {semi-Snark}s,\n   which alternate between reflecting and absorbing input {glider}s.\n   The following B-to-G {converter} sends alternate glider outputs in\n   opposite directions.\n",
    "grid": [
      "0000000000011000000000000000000000000000000000000110000",
      "0000001100101000000000000000000000000000000011001010000",
      "0000001000100001000000000000000000000000000010001000010",
      "0000000111011111000000000000000000000000000001110111110",
      "0000000001010000000000000000000000000000000000010100000",
      "0000000001010111000000000000000000000000000000010101110",
      "0000000000110100100000000000000000000000000000001101001",
      "0000000000000001100000000000000000000000000000000000011",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000001100000000",
      "0000000000000000000000000000000000000000000001100000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000011000000000000000",
      "1100000000000000000000000000000000000011000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000001100000000000000000000000000000000000011000000",
      "0000000001100000000000000000000000000000000000011000000",
      "0000000000000000000000000000000000000000000000000000000",
      "1101000000010000000000000000000000000011010000000100000",
      "1011000000111000000000000000000000000010110000001110000",
      "0000000001100100000000000000000000000000000000011001000"
    ]
  },
  {
    "name": "TOLLCASS",
    "desc": "  Acronym for {The Online Life-Like CA Soup Search}.\n",
    "grid": []
  },
  {
    "name": "toolkit",
    "desc": "  A set of Life reactions and mechanisms that can be used to\n   solve any problem in a specific pre-defined class of problems:\n   {glider} timing adjustment, {salvo} creation, {seed} construction,\n   etc.  See also {universal toolkit}, {technology}.\n",
    "grid": []
  },
  {
    "name": "torus",
    "desc": "  As applies to Life, usually means a finite Life universe which\n   takes the form of an m x n rectangle with the bottom edge considered\n   to be joined to the top edge and the left edge joined to the right\n   edge, so that the universe is topologically a torus. There are also\n   other less obvious ways of obtaining a toroidal universe.\n     See also {Klein bottle}.  Every object in a torus universe\n   obviously either dies or becomes a {still life} or {oscillator}.\n",
    "grid": []
  },
  {
    "name": "total aperiodic",
    "desc": "  Any finite pattern which evolves in such a way that\n   no cell in the Life plane is eventually periodic.  The first example\n   was found by Bill Gosper in November 1997.  A few days later he found\n   the following much smaller example consisting of three copies of a\n   p12 {backrake} by Dave Buckingham.\n",
    "grid": [
      "00000000000000000000000000000000000000000100000000000000000",
      "00000000000000000000000000000000000000001110000000000000000",
      "00000000000000000000000000000000000000011010000010000000000",
      "00000000000000000000000000000000000000011100000111000000000",
      "00000000000000000000000000000000000000001100001001100011100",
      "00000000000000000000000000000000000000000000001110000100100",
      "00000000000000000000000000000000000000000000000000000000100",
      "00000000000000000000000000000000000000000000000000000000100",
      "00000000000000000000000000000000000000000000000000000000100",
      "00000000000000000000000000000000000000001110000000000001000",
      "00000000000000000000000000000000000000001001000000000000000",
      "00000000000000000000000000000000000000001000000000000000000",
      "00000000000000000000000000000000000000001000000000000000000",
      "00000000000000000000000000000000000000000100000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000111000000000000000000",
      "00000000000000000000000000000000000000100100000000000100000",
      "00000000000000000000000000000000000000100000000000001110000",
      "00000000000000000000000000000000000000100000000000011010000",
      "00000000000000000000000000000000000000100000000000011100000",
      "00000000000000000000000000000000000000010000000000001100000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000111000000000000000000000",
      "00000000000000000000000000000000001111100000000000000000000",
      "00000000000000000000000000000000001110110000000110000000010",
      "00000000000000000000000000000000000001100000001111000000001",
      "00000000000000000000000000000000000000000000001101100010001",
      "00000000000000000000000000000000000000000000000011000001111",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000100000000000000000000000000000000000000",
      "00000000000000000000010000000000000000000000000000000000000",
      "01100000000000001000010000000000000000000000000000000011100",
      "11110000000000000111110000000000000000000000000000000000100",
      "11011000000000000000000000000000000000000000000000000000100",
      "00110000000000000000000000000000000000000000000000000001000",
      "00000000000000000000000000000000000010000000000000000000000",
      "00000000000000000000000000000000000001000000000000000000000",
      "00000000000000000000011000000000010001000000000000000000000",
      "00000000000000000000001100000000001111000000000000000110000",
      "00000000000000000000011000000000000000000000000000111011000",
      "00000000000000000000010000000000000000000000000000111110000",
      "00000000000000000000000000000000000000000000000000011100000",
      "00000000000000000000000000000000000000000000000000000000000",
      "00000000000000000000001100000000000000000000000000000000000",
      "00000000000001111000011110000000000000000000000000000000000",
      "00000000000010001000011011000000000000000000000000000000000",
      "01111100000000001000000110000000000000000000000000000000000",
      "10000100000000010000000000000000000000000000000000000000000",
      "00000100000000000000000000000000000000000000000000000000000",
      "00001000000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "T-pentomino",
    "desc": "  Conway's name for the following {pentomino}, which is a\n   common {parent} of the {T-tetromino}.\n",
    "grid": [
      "111",
      "010",
      "010"
    ]
  },
  {
    "name": "track",
    "desc": "  A path made out of {conduit}s, often ending where it begins so\n   that the active {signal} object is cycled forever, forming an\n   {oscillator} or a {gun}.\n     This term has also been used to refer to the {lane} on which a\n   {glider} or {spaceship} travels.  The concept is very similar, but a\n   reference to a \"track\" now usually implies a non-trivial supporting\n   conduit.\n",
    "grid": []
  },
  {
    "name": "tractor beam",
    "desc": "  A stream of {spaceship}s that can draw an object towards\n   the source of the stream.  The example below shows a tractor beam\n   pulling a {loaf}; this was used by Dean Hickerson to construct a\n   {sawtooth}.\n",
    "grid": [
      "00000000000000000000010010000000000000000000000",
      "00000111100000000000100000000000000111100000000",
      "00000100010000000000100010000000000100010000000",
      "00000100000000110000111100000000000100000000110",
      "01100010010001111000000000001100000010010001111",
      "10010000000011011000000000011011000000000011011",
      "10100000000001100000000000001111000000000001100",
      "01000000000000000000000000000110000000000000000"
    ]
  },
  {
    "name": "traffic circle",
    "desc": " (p100)\n",
    "grid": [
      "000000000000000000000110000110000000000000000000",
      "000000000000000000000101001010000000000000000000",
      "000000000000000000000001001000000000000000000000",
      "000000000000000000000011001100000000000000000000",
      "000000000000000000000111001110000000000000000000",
      "000000000000000000000001001000000000000000000000",
      "000000000000000000000000000000010000000000000000",
      "000000000000000000000000000000101100000000000000",
      "000000000000000000000000000000000010000000000000",
      "000000000000000000000000001000100101000000000000",
      "000000000000000000000000001000001001000000000000",
      "000000000000000000000000001000000110000000000000",
      "000000000110000000000000000000000000000000000000",
      "000000001001000000000011100011100000000000000000",
      "000000010101000000000000000000000000000000000000",
      "000000111010000000000000001000000000000000000000",
      "000000111000000000000000001000000000000000000000",
      "000000000000000000000000001000000000000000000000",
      "000000000000111000000000000000000000000000000000",
      "110010000000000000000111000000000000000000000000",
      "100110000010000010000000000000000000000000000000",
      "011111000010000010010000010000000000000000010011",
      "000000000010000010010000010000000000000000011001",
      "000000000000000000010000010000000111000000111110",
      "011111000000111000000000000000000000000000000000",
      "100110000000000000000111000000010000010000000000",
      "110010000000000000000000000000010000010000111110",
      "000000000000000000000000000000010000010000011001",
      "000000000000000000000000000000000000000000010011",
      "000000000000000000000000000000000111000000000000",
      "000000000000000000000000000000000000000110000000",
      "000000000000000000000000000000000000001110000000",
      "000000000000000000000000000000000000010110000000",
      "000000000000000000000000000000000000101000000000",
      "000000000000000000001110000000000000100100000000",
      "000000000000000000000000000000000000011000000000",
      "000000000000011000010010000000000000000000000000",
      "000000000000100100000000000000000000000000000000",
      "000000000000101010000000000000000000000000000000",
      "000000000000010010000000000000000000000000000000",
      "000000000000000001000000000000000000000000000000",
      "000000000000001010000000000000000000000000000000",
      "000000000000000000000100100000000000000000000000",
      "000000000000000000011100111000000000000000000000",
      "000000000000000000001100110000000000000000000000",
      "000000000000000000000100100000000000000000000000",
      "000000000000000000010100101000000000000000000000",
      "000000000000000000011000011000000000000000000000"
    ]
  },
  {
    "name": "traffic jam",
    "desc": "  Any {traffic light} {hassler}, such as {traffic circle}.\n   The term is also applied to the following reaction, used in most\n   traffic light hasslers, in which two traffic lights interact in such\n   a way as to reappear after 25 generations with an extra 6 spaces\n   between them.   See {traffic lights extruder} for a way to make this\n   reaction {extensible}.\n",
    "grid": [
      "0011100000000000",
      "0000000000011100",
      "1000001000000000",
      "1000001001000001",
      "1000001001000001",
      "0000000001000001",
      "0011100000000000",
      "0000000000011100"
    ]
  },
  {
    "name": "traffic light",
    "desc": " (p2)  A common formation of four blinkers.\n",
    "grid": [
      "0011100",
      "0000000",
      "1000001",
      "1000001",
      "1000001",
      "0000000",
      "0011100"
    ]
  },
  {
    "name": "traffic lights extruder",
    "desc": "  A growing pattern constructed by Jason\n   Summers in October 2006, which slowly creates an outward-growing\n   chain of {traffic light}s.  The growth occurs in waves which travel\n   through the chain from one end to the other.  It can be thought of as\n   a complex {fencepost} for a {wick} that does not need a\n   {wickstretcher}.\n     The following illustrates the reaction used, in which a newly\n   created traffic light at the left eventually pushes the rightmost one\n   slightly to the right.\n",
    "grid": [
      "000000000000000000000010000000000000000000000010000",
      "000000000000000000000010000000000000000000000010000",
      "000000000111000000000010000000000111000000000010000",
      "011000000000000000000000000000000000000000000000000",
      "111000010000010000111000111000010000010000111000111",
      "011000010000010000000000000000010000010000000000000",
      "000000010000010000000010000000010000010000000010000",
      "000000000000000000000010000000000000000000000010000",
      "000000000111000000000010000000000111000000000010000"
    ]
  },
  {
    "name": "trans-beacon on table",
    "desc": " (p2)\n",
    "grid": [
      "000011",
      "000001",
      "001000",
      "001100",
      "000000",
      "111100",
      "100100"
    ]
  },
  {
    "name": "trans-boat with tail",
    "desc": " (p1)\n",
    "grid": [
      "11000",
      "10100",
      "01010",
      "00010",
      "00011"
    ]
  },
  {
    "name": "transceiver",
    "desc": "  = {Herschel transceiver}.\n",
    "grid": []
  },
  {
    "name": "trans-loaf with tail",
    "desc": " (p1)\n",
    "grid": [
      "010000",
      "101000",
      "100100",
      "011010",
      "000010",
      "000011"
    ]
  },
  {
    "name": "transmitter",
    "desc": "  = {Herschel transmitter}.\n",
    "grid": []
  },
  {
    "name": "transparent",
    "desc": "  In signal circuitry, a term used for a {catalyst} that is\n   completely destroyed by the passing signal, then rebuilt.  Often\n   (though not always) the active reaction passes directly through the\n   area occupied by the transparent catalyst, then rebuilds the catalyst\n   behind itself, as in the {transparent block reaction}.  See also\n   {transparent lane}.\n",
    "grid": []
  },
  {
    "name": "transparent block reaction",
    "desc": "  A certain reaction between a block and a\n   {Herschel} {predecessor} in which the block reappears in its original\n   place some time later, the reaction having effectively passed through\n   it.  This reaction was found by Dave Buckingham in 1988.  It has been\n   used in some {Herschel conduit}s, and in the {gunstar}s.  Because the\n   reaction involves a Herschel predecessor rather than an actual\n   Herschel, the following diagram shows instead a {B-heptomino} (which\n   by itself would evolve into a block and a Herschel).\n",
    "grid": [
      "10000000000000",
      "11000000000011",
      "01100000000011",
      "11000000000000"
    ]
  },
  {
    "name": "transparent debris effect",
    "desc": "  A mechanism where a {Herschel} or other\n   active reaction completely destroys a {catalyst} in a particular\n   location in a {conduit}.  After passing through or past that\n   location, the same reaction then recreates the catalyst in exactly\n   its original position.  This type of catalysis is surprisingly common\n   in {signal} {circuit}ry.  For an example, see\n   {transparent block reaction}.\n     The transparent object is most often a very common {still life}\n   such as a block or beehive.  Rarer objects are not unknown; for\n   example, a transparent {loaf} was found by Stephen Silver in October\n   1997, in a very useful {elementary conduit} making up part of a\n   {Herschel receiver}.  However, not surprisingly, rarer objects are\n   much less likely to reappear in exactly the correct location and\n   orientation, so transparent reactions involving them are much more\n   difficult to find, on average.\n",
    "grid": []
  },
  {
    "name": "transparent lane",
    "desc": "  A path through a signal-producing {circuit} that can\n   be used to merge signal streams.  The signal is usually a\n   {standard spaceship} such as a {glider}.  It can either be produced\n   by the circuit, or it can come from elsewhere, passing safely through\n   on the same {lane} without interacting with the circuit.  A good\n   example is the NW31 converter, which has two glider outputs on\n   transparent lanes:\n",
    "grid": [
      "1100000000000000000000000",
      "0100000000000000000000000",
      "0101000000000000000000000",
      "0011000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000011",
      "0000000000000000000000011",
      "0000000000000000000000000",
      "0010000000000000000000000",
      "0010100000000000000000000",
      "0011100000000000000000000",
      "0000100000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000000000000000",
      "0000000000000110000000000",
      "0000000000000110000000000"
    ]
  },
  {
    "name": "tremi-Snark",
    "desc": "  A {colour-preserving} period-multiplying {signal}\n   {conduit} found by Tanner Jacobi on 7 September 2017, producing one\n   output {glider} for every three input gliders.  It uses the same\n   block-to-pre-honeyfarm {bait} reaction as the {Snark}, and so has the\n   same 43-{tick} {recovery time}.  Compare {semi-Snark}.\n",
    "grid": [
      "010000000000000000000000000000",
      "001000000000000000000000000000",
      "111000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000001000000000000000000",
      "000000000000110000000000000000",
      "000000000001100000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000100",
      "000000000000000000000000011100",
      "000000000000000000000000100000",
      "000000000000000000000000110000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000001000000",
      "000000000000000000000101000000",
      "000000000000000000000011000000",
      "000000000000001100000000000000",
      "000000000000010100000000100000",
      "000000000000010000000001010000",
      "000000000000110000000001010000",
      "000000000000000000000000100000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000000000000",
      "000000000000000000000110110000",
      "000000000000000001100110100011",
      "000000000000000001000000101001",
      "000000000000000000111111101100",
      "000000000000000000000000010000",
      "000000000000000000001111010000",
      "000000000000000000001001100000"
    ]
  },
  {
    "name": "trice tongs",
    "desc": " (p3)  Found by Robert Wainwright, February 1982.  In terms\n   of its 7x7 {bounding box} this ties with {jam} as the smallest p3\n   {oscillator}.\n",
    "grid": [
      "0010000",
      "0011100",
      "1100010",
      "0101010",
      "0100000",
      "0011001",
      "0000011"
    ]
  },
  {
    "name": "trigger",
    "desc": "  A {signal}, usually a single {glider}, that collides with a\n   {seed} {constellation} to produce a relatively rare still life or\n   oscillator, or an output {spaceship} or other signal.  The\n   constellation is destroyed or damaged in the process; compare\n   {circuit}, {reflector}.  Here a pair of trigger gliders strike a\n   {dirty} seed constellation assembled by Chris Cain in March 2015, to\n   launch a three-engine {Cordership}:\n",
    "grid": [
      "0000000000000000000000000000000000000000000000000000110",
      "0000000000000000000000000000000000000000000000001100110",
      "0000000000000000000000000000000000000000000000001100000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000110000000000000",
      "0000000000000000000000000000000000000000110000000000000",
      "0000000000000000000000000000000000000000000000000001100",
      "0000000000000000000000000000000000100000000000000001010",
      "0000000000000000000000000000000001010000000000011000101",
      "0000000000000000000000000000000000110000000000101000010",
      "0000000000000000000000000000000000000000000000010000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000100000000000000000111",
      "0000000000000000000000000000000001010000000000000000100",
      "0000000000000000000000000000000000110000000000000000010",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000001000000000000000000000000000",
      "0000000000000000000000000010100000000000000000000000000",
      "0000000000000000000000000001100000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000001000000000000000000000000000",
      "0000000000000000000000000010100000000000000000000000000",
      "0000000000000000000000000001100000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000100001000000000000000000000000000000000000000000",
      "0000001010010100000000000000000000000000000000000000000",
      "0000000110001100000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "1100000000000000000000000000000000000000000000000000000",
      "1010000000000000000000000000000000000000000000000000000",
      "0101000000000000000000000000000000000000000000000000000",
      "0010000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000000000",
      "0000000000000100000000000000000000000000000000000000000",
      "0000000000001100000000000000000000000000000000000000000",
      "0000000000001010000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "triomino",
    "desc": "  Either of the two 3-cell {polyomino}es.  The term is rarely\n   used in Life, since the two objects in question are simply the\n   {blinker} and the {pre-block}.\n",
    "grid": []
  },
  {
    "name": "triple caterer",
    "desc": " (p3)  Found by Dean Hickerson, October 1989.  Compare\n   {caterer} and {double caterer}.\n",
    "grid": [
      "0000011000000000",
      "0000100100110000",
      "0000110100010000",
      "0000001011100001",
      "0011101010000111",
      "0100100100001000",
      "1010010001001100",
      "0100000000000000",
      "0011011011011000",
      "0001000100010000",
      "0001000100010000"
    ]
  },
  {
    "name": "triple pseudo",
    "desc": "  The following pattern, found by Gabriel Nivasch in July\n   2001.  It is unique among 32-bit {still life}s in that it can be\n   broken down into three {stable} pieces but not into two.  The term\n   may also refer to any larger {stable} pattern with the same property.\n   See also {quad pseudo}.\n",
    "grid": [
      "00000011",
      "00101001",
      "01011010",
      "01000011",
      "11011000",
      "00011011",
      "11000010",
      "01011010",
      "10010100",
      "11000000"
    ]
  },
  {
    "name": "triplet",
    "desc": "  Any 3-cell {polyplet}.  There are 5 such objects, shown\n   below.  The first two are the two {triomino}es, and the other three\n   vanish in two generations.\n",
    "grid": [
      "10000000000000000001000000010000000100",
      "11000000111000000110000000101000000010",
      "00000000000000000000000000000000000001"
    ]
  },
  {
    "name": "tripole",
    "desc": " (p2)  The {barberpole} of length 3.\n",
    "grid": [
      "110000",
      "101000",
      "000000",
      "001010",
      "000001",
      "000011"
    ]
  },
  {
    "name": "tritoad",
    "desc": " (p3)  Found by Dave Buckingham, October 1977.\n",
    "grid": [
      "000000000110000000",
      "000000000100000000",
      "000000000010011000",
      "000000011101001000",
      "000000100001101011",
      "000000101100101011",
      "000110100011001000",
      "000100110001011000",
      "110101001101000000",
      "110101100001000000",
      "000100101110000000",
      "000110010000000000",
      "000000001000000000",
      "000000011000000000"
    ]
  },
  {
    "name": "trivial",
    "desc": "  A trivial period-N oscillator is one in which every cell\n   oscillates at some smaller factor of N.  See {omniperiodic}.  For\n   example, the joining of a period 3 and a period 4 {oscillator} as\n   shown below creates a single object which is a trivial oscillator of\n   period 12.\n",
    "grid": [
      "000000001010",
      "000000000001",
      "000000010010",
      "000000101010",
      "000000100100",
      "000011011000",
      "000100100000",
      "000010100000",
      "110001000000",
      "010110000000",
      "000100000000",
      "000100000000"
    ]
  },
  {
    "name": "trivial p6",
    "desc": " (p6)  An {oscillator} found by Dean Hickerson in December\n   1994. Every cell has period less than 6, so this is a {trivial}\n   oscillator. It is unusual because it has period-2 cells in contact\n   with period-3 cells.\n",
    "grid": [
      "000000000001100000000000000",
      "000000000001000000110000000",
      "000000001101000000100100000",
      "000000001010110110101100100",
      "010000000010010100100101010",
      "010100000110010101011001001",
      "010101000000001101010110110",
      "000000010101110001000011000",
      "001000100001011000000001000",
      "000010001110011011101010110",
      "110010000001000000000010100",
      "001000000000001101100010100",
      "000000001011111000100001000",
      "000000001100010010010000000",
      "000000000001111011100000000",
      "000000001110000100000000000",
      "000000001001001001100000000",
      "000000000011000110100000000"
    ]
  },
  {
    "name": "trombone slide",
    "desc": "  An arrangement of four 90-degree {reflector}s that can\n   be placed into the path of a {glider} so as to delay it by an\n   adjustable number of generations, without changing its {lane}.  More\n   generally, any combination of {circuit}s may be referred to as a\n   trombone slide, if the grouping can be moved as a single unit that\n   functions as a 180-degree glider {reflector}.\n     The smallest known trombone slides are made using {Snark}s.  In the\n   trombone slide shown below, sample input and output gliders are\n   shown.  The input glider will reach the same output location 128\n   generations sooner if the trombone slide is removed.\n     If the top and left Snarks are moved together diagonally to the\n   upper left by N cells, then the glider delay is increased by 8N\n   generations since the glider has to travel N more cells in each\n   direction.  This sliding action gives the trombone slide its name.\n   If only the final Snark is moved, then the output glider's path can\n   be altered by a number of full diagonals.\n",
    "grid": [
      "0000000000000000000000110001100000000000000000000",
      "0000000000000000000000110010111000000000000000000",
      "0000000000000000000000000010000100000000000000000",
      "0000000000000000000000111101100100000000000000000",
      "0000000000000000000000100101010110000000000000000",
      "0000000000000000000000000101010100000000000000000",
      "0000000000000000000000000011010100000000000000000",
      "0000000000000000000000000000001000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000110000000000000000000000000000000",
      "0000000000000000010000000110000000000000000000000",
      "0000000000000000010100000110000000000000000000000",
      "0000000000000000001100000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000001000",
      "0000000000000000000000000000000000000000000111000",
      "0000000000000000000000000000000000000000001000000",
      "0000000000000000000000000000000000000000001100000",
      "0000000000000000000000000000110000000000000000000",
      "0000000000000000000000000000100000000000000000000",
      "0000000000000000000000000000011100000000000000111",
      "0000000000000000000000000000000100000000000000001",
      "0000000000000000000000000000000000000000000000010",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000011000000000000000",
      "0000100000000000000000000000000101000001100000000",
      "0011111000000000000001100000000100000001100000000",
      "0100000100000000000001000000001100000000000000000",
      "0100111000000000000101000000000000000000000000000",
      "1101000000000000000110000000000000000000000010000",
      "1001111000000000000000000000000000000000110101000",
      "0110001000110000000000000000000000000001010101000",
      "0001110000110000000000000000000000001001010101100",
      "0001000000000000000000000000000000001111011001000",
      "1101000000000000000000000000000000000000100001000",
      "1101100000000000000000000000000000001100101110000",
      "0000000000000000000000000000000000001100011000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000011000000000000000000000000000000000000",
      "0000000000001000000000000000000001000000000000000",
      "0000000001110001100000000000000111110000000000000",
      "0000000001000000100000000000001000001000000000000",
      "0000000000000000101000000000000111001000000000000",
      "0000000000000000011000000000000000101100000000000",
      "0000000000000000000000000000000111100100000000000",
      "0000000000000000000000000011000100011000000000000",
      "0000000000000000000000000011000011100000000000000",
      "0000000000000000000000000000000000100000000000000",
      "0000000000000000000000000000000000101100000000000",
      "0000000000000000000000000000000001101100000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000000000000",
      "0000000000000011100000000110000000000000000000000",
      "0000000000000000100000000100000000000000000000000",
      "0000000000000001000000000011100000000000000000000",
      "0000000000000000000000000000100000000000000000000"
    ]
  },
  {
    "name": "true",
    "desc": "  Opposite of {pseudo}.  A {gun} emitting a period n stream of\n   {spaceship}s (or {rake}s) is said to be a true period n gun if its\n   mechanism oscillates with period n.  The same distinction between\n   true and pseudo also exists for {puffer}s.  An easy way to check that\n   a gun is true period n is to stop the output with an {eater}, and\n   check that the result is a period-n {oscillator}.\n     True period n guns are known to exist for all periods greater than\n   61 (see {My Experience with B-heptominos in Oscillators}), but only a\n   few smaller periods have been achieved, namely 20, 22, 24, 30, 36,\n   40, 44, 45, 46, 48, 50, and 54 through 61.  See also {Quetzal} for\n   the 54-61 range.\n",
    "grid": [
      "111111111111111111111111111111111111"
    ]
  },
  {
    "name": "T-tetromino",
    "desc": "  The following common {predecessor} of a {traffic light}.\n",
    "grid": [
      "111",
      "010"
    ]
  },
  {
    "name": "tub",
    "desc": " (p1)\n",
    "grid": [
      "010",
      "101",
      "010"
    ]
  },
  {
    "name": "tubber",
    "desc": " (p3)  Found by Robert Wainwright before June 1972.\n",
    "grid": [
      "0000101000000",
      "0000110100000",
      "0000000111000",
      "0000110000100",
      "1101001100100",
      "0101000010110",
      "1000100010001",
      "0110100001010",
      "0010011001011",
      "0010000110000",
      "0001110000000",
      "0000010110000",
      "0000001010000"
    ]
  },
  {
    "name": "tubeater",
    "desc": "  A pattern that consumes the output of a {tubstretcher}. The\n   smallest known tubeater was found by Nicolay Beluchenko (September\n   2005), and is shown below in conjunction with the smallest known\n   tubstretcher.\n",
    "grid": [
      "00000000100000000000000000000",
      "00000001100000000000000000000",
      "00000001010000000000000000000",
      "00000000000000000000000000000",
      "00000000001100000000000000000",
      "00000000001100000000000000000",
      "00000000000000000000000111000",
      "01000000110001000000000100000",
      "11000001001010100000000010000",
      "10100011010001010000000000111",
      "00001000000000101000000000000",
      "00010000000000010100000110000",
      "00010010000000001010000101010",
      "00000000000000000101000100011",
      "00000000000000000010000010000",
      "00000000000000000001001100100",
      "00000000000000000000010111100",
      "00000000000000000000001110001",
      "00000000000000000000000000110",
      "00000000000000000000000000010",
      "00000000000000000000000000011",
      "00000000000000000000000000100",
      "00000000000000000000000000011"
    ]
  },
  {
    "name": "tubstretcher",
    "desc": "  Any {wickstretcher} in which the wick is two diagonal\n   lines of cells forming, successively, a {tub}, a {barge}, a\n   {long barge}, etc.  The first one was found by Hartmut Holzwart in\n   June 1993, although at the time this was considered to be a\n   boatstretcher (as it was shown with an extra cell, making the tub\n   into a {boat}).  The following small example is by Nicolay Beluchenko\n   (August 2005), using a {quarter}.\n",
    "grid": [
      "000000011100000",
      "000000010000000",
      "000000001000000",
      "000000000011000",
      "000000000001000",
      "000000000000000",
      "000000001100010",
      "111000001100101",
      "100000010100010",
      "010000110000000",
      "000111101000000",
      "000011000000000"
    ]
  },
  {
    "name": "tub with tail",
    "desc": " (p1)  The following 8-cell {still life}.  See {eater}\n   for a use of this object.\n",
    "grid": [
      "01000",
      "10100",
      "01010",
      "00010",
      "00011"
    ]
  },
  {
    "name": "tugalong",
    "desc": "  = {tagalong}\n",
    "grid": []
  },
  {
    "name": "tumbler",
    "desc": " (p14)  The smallest known p14 {oscillator}.  Found by George\n   Collins in 1970.  The oscillator generates {domino} {spark}s, but\n   they are fragile and no use has been found for them to date.  In each\n   domino, one cell is \"held\" (remains alive) for two generations, the\n   other for three.  By contrast, useful domino sparks are usually alive\n   for only one tick per oscillator {period}.\n",
    "grid": [
      "010000010",
      "101000101",
      "100101001",
      "001000100",
      "001101100"
    ]
  },
  {
    "name": "tumbling T-tetson",
    "desc": " (p8)  A {T-tetromino} {hassle}d by two {figure-8}s.\n   Found by Robert Wainwright.\n",
    "grid": [
      "011100000000000000000",
      "100000000000000000011",
      "100010000000000001011",
      "100101000000000010000",
      "001010010000000000010",
      "000100010000000110100",
      "000000010000000110000",
      "000011100001000000000",
      "000000000110000000000",
      "000000000001000000000"
    ]
  },
  {
    "name": "Turing machine",
    "desc": "  See {universal computer}.\n",
    "grid": []
  },
  {
    "name": "turner",
    "desc": "  A {one-time} {glider} {reflector}, or in other words a\n   single-glider {seed} (the term is seldom or never used in relation to\n   spaceships other than gliders).  One-time turners may be 90-degree or\n   180-degree, or they may be 0-degree with the output in the same\n   direction as the input.  A reusable turner would instead be called a\n   reflector.  Shown on the top row below are the four 90-degree turner\n   reactions that use common small {ash} objects:  {boat}, {eater1},\n   {long boat}, and {toad}.\n",
    "grid": [
      "01000000000000001000000000000001000000000000001000000000",
      "00100000000000000100000000000000100000000000000100000000",
      "11100000000000011100000000000011100000000000011100000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000110000000011000000000000000100000000000000000000000",
      "00001010000000101000000000000001010000000000000001110000",
      "00000100000000100000000000000000101000000000000000111000",
      "00000000000001100000000000000000011000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "01000000000000001000000000000001000000000000001000000000",
      "00100000000000000100000000000000100001100000000100000000",
      "11100000000000011100000000000011100001100000011100000000",
      "00000000000000000000000000000000000000000000000000000011",
      "00000000000000000000000000000000000000000000000000000011",
      "00000000000000000000000000000000000000000000000000000000",
      "00010000000000000001100000000000000000000000000000000000",
      "00101000000000000010100000000000011000000000000001100000",
      "01010000000000000101000000000000011000000000000001100000",
      "01100000000000000110000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "01000000000000000000000000000000000000000000000000000000",
      "00100000000000000000000000000000000000000000000000000000",
      "11100000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00000000000000000000000000000000000000000000000000000000",
      "00001100000000000000000000000000000000000000000000000000",
      "00100100000000000000000000000000000000000000000000000000",
      "00110000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "turning toads",
    "desc": " (p4 wick)  Found by Dean Hickerson, October 1989.\n",
    "grid": [
      "0000000000000011000001100000110000011000001100000000000000",
      "0000000100000100000010000001000000100000010000000000000000",
      "0000001100010000101000010100001010000101000010101011000000",
      "0011010111010011001001100100110010011001001100100100101100",
      "1001011000000000000000000000000000000000000000001111101001",
      "1101000000000000000000000000000000000000000000000011001011",
      "0001000000000000000000000000000000000000000000000000001000",
      "0001100000000000000000000000000000000000000000000000011000"
    ]
  },
  {
    "name": "turtle",
    "desc": " (c/3 orthogonally, p3)  A {spaceship} found by Dean Hickerson\n   in August 1989 that produces a {domino} {spark} at the back.\n   Hickerson used this spark to convert an approaching {HWSS} into a\n   {loaf}, as part of the first {sawtooth}.  (Also see {tractor beam}).\n   The shape of the back end of the turtle is distinctive.  Very similar\n   but wider back ends have been found in other c/3 ships to produce\n   period 9 and 15 {spaceship}s.\n",
    "grid": [
      "011100000001",
      "011001011011",
      "000111000010",
      "010010100010",
      "100001000010",
      "100001000010",
      "010010100010",
      "000111000010",
      "011001011011",
      "011100000001"
    ]
  },
  {
    "name": "twin bees shuttle",
    "desc": " (p46)  Found by Bill Gosper in 1971, this was the\n   basis of all known {true} p46 {gun}s, and all known p46 oscillators\n   except for {glider} {signal} loops using {Snark}s, until the\n   discovery of {Tanner's p46} in 2017.  See {new gun} for an example.\n   There are numerous ways to stabilize the ends, two of which are shown\n   in the diagram.  On the left is David Bell's {double block reaction}\n   (which results in a shorter, but wider, shuttle than usual), and on\n   the right is the stabilization by a single block.  This latter method\n   produces the very large {twin bees shuttle spark} which is useful in\n   a number of ways.  See {metamorphosis} for an example.  Adding a\n   symmetrically placed block below this one suppresses the spark.  See\n   also {p54 shuttle}.\n",
    "grid": [
      "011000000000000000000000000",
      "011000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000100000000000",
      "110000000000000110000000011",
      "110000000000000011000000011",
      "000000000001100110000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000000000000000000000",
      "000000000001100110000000000",
      "110000000000000011000000000",
      "110000000000000110000000000",
      "000000000000000100000000000",
      "000000000000000000000000000",
      "011000000000000000000000000",
      "011000000000000000000000000"
    ]
  },
  {
    "name": "twin bees shuttle pair",
    "desc": "  Any arrangement of two {twin bees shuttle}s\n   such that they interact.  There are many ways that the two shuttles\n   can be placed, either head-to-head, or else at right angles.  Glider\n   guns can be constructed in at least five different ways.  Here is one\n   by Bill Gosper in which the shuttles interact head-to-head:\n",
    "grid": [
      "0000000000000000010000000000000000000000000000000",
      "1100000000000000011000000000000000000000000000000",
      "1100000000000000001100000000000000000000000000000",
      "0000000000000000011000000000001100000000000000000",
      "0000000000000000000000000000010100000000000000000",
      "0000000000000000000000000000010000000000000000000",
      "0000000000000000000000000000011100000000000000000",
      "0000000000000000011000000000000000000000000000000",
      "0000000000000000001100000000000000000000000000000",
      "0000000000000000011000000000000000000000000000000",
      "0000000000000000010000000000011100000000000000000",
      "0000000000000000000000000000010000000000000000011",
      "0000000000000000000000000000010100000000000000011",
      "0000000000000000000000000000001100000000000000000"
    ]
  },
  {
    "name": "twin bees shuttle spark",
    "desc": "  The large and distinctive long-lived {spark}\n   produced, most commonly, by the {twin bees shuttle}.  It starts off\n   as shown below.\n",
    "grid": [
      "00110",
      "00110",
      "01001",
      "10110",
      "10110"
    ]
  },
  {
    "name": "twinhat",
    "desc": " (p1)  See also {hat} and {sesquihat}.\n",
    "grid": [
      "001000100",
      "010101010",
      "010101010",
      "110101011",
      "000010000"
    ]
  },
  {
    "name": "twin peaks",
    "desc": "  = {twinhat}\n",
    "grid": []
  },
  {
    "name": "twirling T-tetsons II",
    "desc": " (p60)  Found by Robert Wainwright.  This is a\n   {pre-pulsar} {hassle}d by {killer toads}.\n",
    "grid": [
      "000000011000110000000000",
      "000000100000001000000000",
      "000000000101000000000000",
      "000000011000110000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000000000000000111",
      "000000000000000000001110",
      "000000000000010000000000",
      "111000000000111000000000",
      "011100000000000000000000",
      "000000000000000000001110",
      "000000000000000000000111",
      "000000000000000000000000",
      "011100000000000000000000",
      "111000000000111000000000",
      "000000000000010000000000",
      "000000000000000000000000",
      "000000000000000000000000",
      "000000000011000110000000",
      "000000000000101000000000",
      "000000000100000001000000",
      "000000000011000110000000"
    ]
  },
  {
    "name": "TWIT",
    "desc": "  = {eater5}\n",
    "grid": []
  },
  {
    "name": "two-arm",
    "desc": "  The type of {universal constructor} exemplified by the\n   original {Gemini} spaceship, where two independently programmed\n   {construction arm}s sent gliders in pairs on 90-degree paths to\n   collide with each other at the construction site.  Construction\n   recipes for two-arm constructors are much more efficient in general,\n   but they require many more {circuit}s and multiple independent data\n   streams, which both tend to increase the complexity of\n   {self-constructing} circuitry.  Compare {single-arm}.\n",
    "grid": []
  },
  {
    "name": "two-bit spark",
    "desc": "  = {duoplet}.\n",
    "grid": []
  },
  {
    "name": "two eaters",
    "desc": " (p3)  Found by Bill Gosper, September 1971.\n",
    "grid": [
      "110000000",
      "010000000",
      "010100000",
      "001100000",
      "000001100",
      "000001010",
      "000000010",
      "000000011"
    ]
  },
  {
    "name": "two pulsar quadrants",
    "desc": " (p3)  Found by Dave Buckingham, July 1973.\n   Compare {pulsar quadrant}.\n",
    "grid": [
      "000010000",
      "000010000",
      "000110000",
      "001000000",
      "100100111",
      "100010100",
      "100001000",
      "000000000",
      "001110000"
    ]
  },
  {
    "name": "UC",
    "desc": "  = {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "underpopulation",
    "desc": "  Death of a cell caused by it having fewer than two\n   {neighbour}s.  See also {overpopulation}.\n",
    "grid": []
  },
  {
    "name": "unit cell",
    "desc": "  = {unit Life cell}.\n",
    "grid": []
  },
  {
    "name": "unit Life cell",
    "desc": "  A rectangular pattern, of size greater than 1x1, that\n   can simulate Life in the following sense.  The pattern by itself\n   represents a dead Life cell, and some other pattern represents a live\n   Life cell.  When the plane is tiled by these two patterns (which then\n   represent the state of a whole Life universe) they evolve, after a\n   fixed amount of time, into another tiling of the plane by the same\n   two patterns which correctly represents the Life generation following\n   the one they initially represented.\n     It is usual to use the prefix \"meta-\" for simulated Life features,\n   so, for example, for the first known unit Life cell (constructed by\n   David Bell in January 1996), one metatick is 5760 {tick}s, and one\n   {metacell} is 500x500 cells.  Capital letters were originally used to\n   make this distinction - e.g., Generation, Cell - but this usage is no\n   longer common.\n     In December 2005, Jason Summers constructed an analogous unit cell\n   for Wolfram's Rule 110, a one-dimensional {cellular automaton} that\n   is known be universal.  See also {OTCA metapixel}, {p1 megacell}.\n",
    "grid": []
  },
  {
    "name": "universal",
    "desc": "  See {universal computer}, {universal constructor},\n   {universal toolkit}.\n",
    "grid": []
  },
  {
    "name": "universal computer",
    "desc": "  A computer that can compute anything that is\n   computable.  (The concept of computability can be defined in terms of\n   Turing machines, or by Church's lambda calculus, or by a number of\n   other methods, all of which can be shown to lead to equivalent\n   definitions.)  The relevance of this to Life is that both Bill Gosper\n   and John Conway proved early on that it is possible to construct a\n   universal computer in the Life universe.  (To prove the universality\n   of a {cellular automaton} with simple rules was in fact Conway's aim\n   in Life right from the start.)  Conway's proof is outlined in\n   {Winning Ways}, and also in {The Recursive Universe}.\n     Until recently, no universal Life computer had ever been built in\n   practice  In April 2000, Paul Rendell completed a Turing machine\n   construction (see {http://rendell-attic.org/gol/tm.htm} for details).\n   This, however, has a finite tape, as opposed to the infinite tape of\n   a true Turing machine, and is therefore not a universal computer.\n   But in November 2002, Paul Chapman announced the construction of a\n   universal computer, see\n   {http://www.igblan.free-online.co.uk/igblan/ca/}. This is a universal\n   register machine based around Dean Hickerson's\n   {sliding block memory}.\n     In 2009 Adam P. Goucher constructed a programmable {Spartan}\n   universal computer/constructor pattern using stable {Herschel}\n   circuitry.  It included memory tapes and registers capable of holding\n   a simple universal instruction set and program data, and also a\n   minimal {single-arm} universal constructor.  Its size meant that it\n   was extremely impractical to program it to be {self-constructing},\n   though this was theoretically possible if the escape of large numbers\n   of gliders could be allowed as a side effect.\n     In February 2010, Paul Rendell completed a universal Turing machine\n   design with an unlimited tape, as described in his thesis at\n   {http://eprints.uwe.ac.uk/22323/1/thesis.pdf}.\n     In 2016 Nicolas Loizeau (\"Coban\") completed a Life pattern\n   emulating a complete 8-bit programmable computer.\n     See also {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "universal constructor",
    "desc": "  A pattern that is capable of constructing\n   almost any pattern that has a {glider synthesis}.  This definition is\n   a bit vague.  A precise definition seems impossible because it is not\n   known, for example, whether all {still life}s are constructible.  In\n   any case, a universal constructor ought to be able to construct\n   itself in order to qualify as such.\n     An outline of Conway's proof that such a pattern exists can be\n   found in {Winning Ways}, and also in {The Recursive Universe}.  The\n   key mechanism for the production of gliders with any given path and\n   timing is known as side-tracking, and is based on the\n   {kickback reaction}.  A universal constructor designed in this way\n   can also function as a universal destructor:  it can delete almost\n   any pattern that can be deleted by gliders.\n     In May 2004, Paul Chapman and Dave Greene produced a prototype\n   programmable universal constructor.  This is able to construct\n   objects by means of {slow glider construction}s.  It likely that it\n   could be programmed to construct itself, but the necessary program\n   would be very large; moreover an additional mechanism would be needed\n   in order to copy the program.\n     A universal constructor is theoretically most useful when attached\n   to a {universal computer}, which can be programmed to control the\n   constructor to produce the desired pattern of gliders.  In what\n   follows I will assume that a universal constructor always includes\n   this computer.\n     The existence of a universal constructor/destructor has a number of\n   theoretical consequences.\n     For example, the constructor could be programmed to make copies of\n   itself.  This is a {replicator}.\n     The constructor could even be programmed to make just one copy of\n   itself translated by a certain amount and then delete itself. This\n   would be a (very large, very high period) {spaceship}.  Any\n   translation is possible, so that the spaceship could travel in any\n   direction.  If the constructor makes a rotated but unreflected copy\n   of itself, the result would be a looping spaceship or\n   {reflectorless rotating oscillator}.\n     The constructor could also travel slower than any given speed,\n   since we could program it to perform some time-wasting task (such as\n   repeatedly constructing and deleting a block) before copying itself.\n   Of course, we could also choose for it to leave some debris behind,\n   thus making a {puffer}.\n     It is also possible to show that the existence of a universal\n   constructor implies the existence of a {stable} {reflector}.  This\n   proof is not so easy, however, and is no longer of much significance\n   now that explicit examples of such reflectors are known.\n     Progressively smaller universal-constructor mechanisms without an\n   attached universal computer have been used in the\n   {linear propagator}, {spiral growth} pattern, and the {Demonoid}s and\n   {Orthogonoid}.  See also {single-channel}.\n     Another strange consequence of the existence of universal\n   constructors was pointed out by Adam P. Goucher and Tanner Jacobi in\n   2015.  Any glider-constructible pattern, no matter how large, can be\n   constructed with a fixed number of gliders, by working out a\n   construction recipe for a universal constructor attached to a decoder\n   that measures the distance to a faraway object.  The object's\n   position encodes a numeric value that can be processed to retrieve as\n   many bits of information as are needed to build a {slow salvo} to\n   construct any given target pattern.  The simplest design, requiring\n   less than a hundred gliders, is described in {reverse caber tosser}.\n",
    "grid": []
  },
  {
    "name": "universal destructor",
    "desc": "  See {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "universal register machine",
    "desc": "  = {URM}\n",
    "grid": []
  },
  {
    "name": "universal regulator",
    "desc": "  A {regulator} in which the incoming gliders are\n   aligned to period 1, that is, they have arbitrary timing (subject to\n   some minimum time required for the regulator to recover from the\n   previous glider).\n     Paul Chapman constructed the first universal regulator in March\n   2003.  It is adjustable, so that the output can be aligned to any\n   desired period.  A {stable} universal regulator was constructed by\n   Dave Greene in September 2015, with a minimum delay between test\n   signals of 1177 ticks.  Later stable versions have reduced the delay\n   to 952 ticks.\n     A universal regulator can allow two complex {circuit}s to interact\n   safely, even if they have different base {period}s.  For example,\n   signals from a {stable} logic circuit could be processed by a\n   period-30 mechanism, though the precise timing of those signals would\n   change in most cases.\n",
    "grid": []
  },
  {
    "name": "universal toolkit",
    "desc": "  A set of Life reactions and mechanisms that can be\n   used to construct any object that can be constructed by glider\n   collisions.  Different universal toolkits were used to construct the\n   {linear propagator}, {10hd Demonoid}, {0hd Demonoid}, and\n   {Orthogonoid}, for example.\n",
    "grid": []
  },
  {
    "name": "universe",
    "desc": "  The topology of the cells in the Life grid.  In the normal\n   universe (the usual {Life} arena), the grid is infinite in both\n   directions.  In a cylindrical universe, the grid is finite in one\n   direction, and the cells at the two edges are adjacent to each other.\n   In a {torus} universe, the grid is finite in both directions, and the\n   cells at the top and bottom edges are adjacent, and the cells at the\n   left and right edges are adjacent.  There are several other more\n   obscure types of universe.\n     Objects found in the cylindrical and toroidal universes can also\n   run in the normal universe if an infinite number of copies are\n   arranged to support each other.  Sometimes the objects can be\n   supported in other ways to make a useful finite object.  This is one\n   reason that {soup} searches are run in alternative universes, to find\n   such objects.\n",
    "grid": []
  },
  {
    "name": "unix",
    "desc": " (p6)  Two {block}s eating a {long barge}.  This is a useful\n   {sparker}, found by Dave Buckingham in February 1976.  The name\n   derives from the fact that it was for some time the mascot of the\n   Unix lab of the mathematics faculty at the University of Waterloo.\n",
    "grid": [
      "01100000",
      "01100000",
      "00000000",
      "01000000",
      "10100000",
      "10010011",
      "00001011",
      "00110000"
    ]
  },
  {
    "name": "unknown fate",
    "desc": "  An object whose {fate} is in some way unanswerable with\n   our current knowledge.  The simplest way that the fate of an object\n   can be unknown involves the question of whether or not it exhibits\n   infinite growth.  For example, the fate of the\n   {Fermat prime calculator} is currently unknown, but its behaviour is\n   otherwise predictable.\n     A different type of unknown fate is that of the\n   {Collatz 5N+1 simulator}, which may become stable, or an oscillator,\n   or have an indefinitely growing bounding box.  Its behavior is\n   otherwise predictable, and unlike the Fermat prime calculator the\n   population is known to be bounded.\n     Life objects having even worse behaviour (e.g. {chaotic growth})\n   are not known as of July 2018.\n",
    "grid": []
  },
  {
    "name": "up boat with tail",
    "desc": "  = {trans-boat with tail}\n",
    "grid": []
  },
  {
    "name": "U-pentomino",
    "desc": "  Conway's name for the following {pentomino}, which\n   rapidly dies.\n",
    "grid": [
      "101",
      "111"
    ]
  },
  {
    "name": "URM",
    "desc": "  A universal register machine, particularly Paul Chapman's Life\n   implementation of such a machine.  See {universal computer} for more\n   information.\n",
    "grid": []
  },
  {
    "name": "vacuum",
    "desc": "  Empty space.  That is, space containing only dead {cell}s.\n",
    "grid": []
  },
  {
    "name": "Venetian blinds",
    "desc": "  The p2 {agar} obtained by using the pattern O..O to\n   tile the plane. Period 2 stabilizations of finite patches of this\n   agar are known.\n",
    "grid": [
      "000000000000000000101101100000010000001101101000000000000000000",
      "000000000000000000110101000110101011000101011000000000000000000",
      "000000000000000000000100010010101010010001000000000000000000000",
      "000000000000000000000100111000101000111001000000000000000000000",
      "000000000000000000001101000001010100000101100000000000000000000",
      "000000000000000000000001001101000101100100000000000000000000000",
      "000000000000000000001100111001101100111001100000000000000000000",
      "000000000000000011010110001101111101100011010110000000000000000",
      "000000000000000011011000010000000000010000110110000000000000000",
      "000000000000000000010011010100000001010110010000000000000000000",
      "000000000000000011001110011011111110110011100110000000000000000",
      "000000001100110101100011011111111111110110001101011001100000000",
      "000001001000110110000100000000000000000001000011011000100100000",
      "000010101000000100110101000000000000000101011001000000101010000",
      "000100101100110011100110111111111111111011001110011001101001000",
      "000101100001011000110111111111111111111111011000110100001101000",
      "110110001101100001000000000000000000000000000100001101100011011",
      "101000110101001101010000000000000000000000010101100101011000101",
      "001011010100111001101111111111111111111111101100111001010110100",
      "001010011110001101111111111111111111111111111101100011110010100",
      "011001000000010000000000000000000000000000000000010000000100110",
      "100101000011010100000000000000000000000000000001010110000101001",
      "010100111110011011111111111111111111111111111110110011111001010",
      "001011100111011111111111111111111111111111111111110111001110100",
      "000010100100000000000000000000000000000000000000000001001010000",
      "001010100101000000000000000000000000000000000000000101001010100",
      "001100010110111111111111111111111111111111111111111011010001100",
      "000000000111111111111111111111111111111111111111111111000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000000000000000000000000000000000000000000000000000000000",
      "000000000111111111111111111111111111111111111111111111000000000",
      "001100010110111111111111111111111111111111111111111011010001100",
      "001010100101000000000000000000000000000000000000000101001010100",
      "000010100100000000000000000000000000000000000000000001001010000",
      "001011100111011111111111111111111111111111111111110111001110100",
      "010100111110011011111111111111111111111111111110110011111001010",
      "100101000011010100000000000000000000000000000001010110000101001",
      "011001000000010000000000000000000000000000000000010000000100110",
      "001010011110001101111111111111111111111111111101100011110010100",
      "001011010100111001101111111111111111111111101100111001010110100",
      "101000110101001101010000000000000000000000010101100101011000101",
      "110110001101100001000000000000000000000000000100001101100011011",
      "000101100001011000110111111111111111111111011000110100001101000",
      "000100101100110011100110111111111111111011001110011001101001000",
      "000010101000000100110101000000000000000101011001000000101010000",
      "000001001000110110000100000000000000000001000011011000100100000",
      "000000001100110101100011011111111111110110001101011001100000000",
      "000000000000000011001110011011111110110011100110000000000000000",
      "000000000000000000010011010100000001010110010000000000000000000",
      "000000000000000011011000010000000000010000110110000000000000000",
      "000000000000000011010110001101111101100011010110000000000000000",
      "000000000000000000001100111001101100111001100000000000000000000",
      "000000000000000000000001001101000101100100000000000000000000000",
      "000000000000000000001101000001010100000101100000000000000000000",
      "000000000000000000000100111000101000111001000000000000000000000",
      "000000000000000000000100010010101010010001000000000000000000000",
      "000000000000000000110101000110101011000101011000000000000000000",
      "000000000000000000101101100000010000001101101000000000000000000"
    ]
  },
  {
    "name": "very long",
    "desc": "  = {long long}\n",
    "grid": []
  },
  {
    "name": "very long house",
    "desc": "  The following {induction coil}.\n",
    "grid": [
      "0111110",
      "1001001",
      "1100011"
    ]
  },
  {
    "name": "volatility",
    "desc": "  The volatility of an {oscillator} is the size (in cells)\n   of its {rotor} divided by the sum of the sizes of its rotor and its\n   {stator}.  In other words, it is the proportion of cells involved in\n   the oscillator which actually oscillate.  For many periods there are\n   known oscillators with volatility 1, see for example {Achim's p16},\n   {figure-8}, {Kok's galaxy}, {mazing}, {pentadecathlon}, {phoenix},\n   {relay}, {smiley} and {tumbler}.  Such an oscillator of period 3 was\n   found in August 2012 by Jason Summers.\n",
    "grid": [
      "0000000001010000010001000001010",
      "0000000010001000010001000010001",
      "0000000001000000010001000000010",
      "0000000000011011010001011011000",
      "0000000000000000010001000000000",
      "0000000000100010000000001000100",
      "0000000010100000000000000000101",
      "0000000000000000000000000000000",
      "0000000010000000000000000000100",
      "0000000110000000000000000001100",
      "0000000100000000000000000001000",
      "0000010010000000000000000100100",
      "1000010000000000000010000100000",
      "1111011011100000000011110110111",
      "1110110111100000000011101101111",
      "0000010000100000000000000100001",
      "0010010000000000000000100100000",
      "0001000000000000000000010000000",
      "0011000000000000000000110000000",
      "0010000000000000000000100000000",
      "0000000000000000000000000000000",
      "1010000000000000000010100000000",
      "0010001000000000100010000000000",
      "0000000001000100000000000000000",
      "0001101101000101101100000000000",
      "0100000001000100000001000000000",
      "1000100001000100001000100000000",
      "0101000001000100000101000000000"
    ]
  },
  {
    "name": "volcano",
    "desc": "  Any of a number of p5 oscillators which produce sparks.  See\n   {lightweight volcano}, {middleweight volcano} and\n   {heavyweight volcano}.\n",
    "grid": []
  },
  {
    "name": "von Neumann neighbourhood",
    "desc": "  The set of all cells that are orthogonally\n   adjacent to a cell or group of cells.  The von Neumann neighbourhood\n   of a cell can be thought of as the points at a Manhattan distance of\n   1 from that cell.  Compare {Moore neighbourhood}.\n     Cell neighbourhoods can also be defined with a higher range. The\n   von Neumann neighbourhood of range n can be defined recursively as\n   the von Neumann neighbourhood of the von Neumann neighbourhood of\n   range n-1.  For example, the von Neumann neighbourhood of range 2 is\n   the set of all cells that are orthogonally adjacent to the range-1\n   von Neumann neighbourhood.\n",
    "grid": []
  },
  {
    "name": "V-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a {loaf}\n   {predecessor}.\n",
    "grid": [
      "100",
      "100",
      "111"
    ]
  },
  {
    "name": "V spark",
    "desc": "  A common three-bit {polyplet} {spark}, produced most notably\n   by the {pentadecathlon}.\n",
    "grid": [
      "101",
      "010"
    ]
  },
  {
    "name": "Wainwright's tagalong",
    "desc": "  A small p4 c/4 diagonal {tagalong} that has 7\n   cells in every phase.  It is shown here attached to the back of a\n   {Canada goose}.\n",
    "grid": [
      "1110000000000000",
      "1000000000110000",
      "0100000011101000",
      "0001100110000000",
      "0000100000000000",
      "0000000010000010",
      "0000110001000110",
      "0001010110000101",
      "0001010010110100",
      "0010000110000010",
      "0011000000000000",
      "0011000000000000"
    ]
  },
  {
    "name": "washerwoman",
    "desc": " (2c/3 p18 fuse)  A {fuse} discovered by Earl Abbe,\n   published in {LifeLine} Vol 3, September 1971.\n",
    "grid": [
      "10000000000000000000000000000000000000000000000000000000",
      "11000010000010000010000010000010000010000010000010000010",
      "11100101000101000101000101000101000101000101000101000101",
      "11000010000010000010000010000010000010000010000010000010",
      "10000000000000000000000000000000000000000000000000000000"
    ]
  },
  {
    "name": "washing machine",
    "desc": " (p2)  Found by Robert Wainwright before June 1972.\n",
    "grid": [
      "0110110",
      "1011001",
      "1100001",
      "0100010",
      "1000011",
      "1001101",
      "0110110"
    ]
  },
  {
    "name": "wasp",
    "desc": " (c/3 orthogonally, p3)  The following {spaceship} which produces\n   a {domino} {spark} at the back.  It is useful for {perturb}ing other\n   objects.  Found by David Bell, March 1998.\n",
    "grid": [
      "0000000000110110000000",
      "0000000011010110110000",
      "0000011101001110011110",
      "0111000011100000100001",
      "1010101110100000000110",
      "1010101111000000000000",
      "0101000010010000000000",
      "0000000000100000000000",
      "0010000000000000000000",
      "0010000000000000000000"
    ]
  },
  {
    "name": "waterbear",
    "desc": " ((23,5)c/79 obliquely, p158) A {self-supporting} oblique\n   {macro-spaceship} constructed by Brett Berger on December 28, 2014.\n   It is currently the fastest oblique macro-spaceship in Conway's Game\n   of Life by several orders of magnitude, and is also the smallest\n   known oblique macro-spaceship in terms of bounding box, superseding\n   the {Parallel HBK}.  It is no longer the smallest or fastest oblique\n   spaceship due to the discovery in 2018 of the {elementary}\n   {knightship} {Sir Robin}.\n     Previous oblique spaceships, the {Gemini} and the\n   {half-baked knightship}s, are stationary throughout almost all of\n   their life cycles, as they construct the necessary mechanisms to\n   support a sudden short move.  The waterbear constructs support for\n   {reburnable fuse} reactions involving {(23,5)c/79 Herschel climber}s\n   that are in constant motion.\n",
    "grid": []
  },
  {
    "name": "wave",
    "desc": "  A wick-like structure attached at both ends to moving\n   spaceship-like patterns, in such a way that the entire pattern is\n   mobile.  Especially if the wave gets longer over time, the supporting\n   patterns are {wavestretcher}s.\n     Also, the gliders or spaceships emitted by a rake may be referred\n   to as a wave, again because the line as a whole appears to move in a\n   different direction from the individual components, due to the rake's\n   movement.  Compare with {stream}.\n     In general a wave can be interpreted as moving at a variety of\n   different velocities, depending on which specific subcomponents are\n   chosen as the starting and ending points for calculating speed and\n   direction.  See {antstretcher}, {wavestretcher} for a practical\n   example of identical wave ends being connected to spaceships with\n   different velocities.\n",
    "grid": []
  },
  {
    "name": "wavefront",
    "desc": " (p4)  Found by Dave Buckingham, 1976 or earlier.\n",
    "grid": [
      "0000000011000",
      "0000000010000",
      "0000000001000",
      "0000000011000",
      "0000011000110",
      "0000100111001",
      "0000100000110",
      "0000010001000",
      "1101010001000",
      "1011010110000",
      "0000101000000",
      "0000101000000",
      "0000010000000"
    ]
  },
  {
    "name": "waveguide",
    "desc": "  = {superstring}.\n",
    "grid": []
  },
  {
    "name": "wavestretcher",
    "desc": "  A {spaceship} pattern that supports a connection to an\n   extensible periodic {wick}-like structure, whose speed and/or\n   direction of propagation are different from those of the\n   wavestretcher spaceship.\n     Connecting the following to a standard diagonal {antstretcher}\n   creates a new oblique {wavestretcher} (a type of {growing spaceship})\n   and also an alternate {space nonfiller} mechanism.\n",
    "grid": [
      "0000000000000000000000000000000000000000000000000000000100000",
      "0000000000000000000000000000000000000000000000000000000110000",
      "0000000000000000000000000000000000000000000000000000010010000",
      "0000000000000000000000000000000000000000000000000000100000000",
      "0000000000000000000000000000000000000000000000000110010000000",
      "0000000000000000000000000000000000000000000000001001000000000",
      "0000000000000000000000000000000000000000000000000100000000000",
      "0000000000000000000000000000000000000000000001000110000000000",
      "0000000000000000000000000000000000000000000010110000000000000",
      "0000000000000000000000000000000000000000000110010000000000000",
      "0000000000000000000000000000000000000000000110110000000000000",
      "0000000000000000000000000000000000000000000100100110000000000",
      "0000000000000000000000000000000000000000001100000011000000000",
      "0000000000000000000000000000000000000000000101101011000000000",
      "0000000000000000000000000000000000000000001011101000000000000",
      "0000000000000000000000000000000000000000001010101000000000000",
      "0000000000000000000000000000000000000000000000000000000000000",
      "0000000000000000000000000000000000000000100010000000000000000",
      "0000000000000000000000000000000000000001100000000000000000000",
      "0000000000000000000000000000000000000111001000000000000000000",
      "0000000000000000000000000000000000110110000000000000000000000",
      "0000000000000000000000000000000000010000000000000000000000000",
      "0000000000000000000000000000000000001010000000000000000000000",
      "0000000000000000000000000000000000010000000000000000000000000",
      "0000000000000000000000000000000000010010000000000000000000000",
      "0000000000000000000000000000000000100000000000000000000000000",
      "0000000000000000000000000000000000000100000000000000000000000",
      "0000000000000000000000000000000000111100000000000000000000000",
      "0000000000000000000000000000000010110100000000000000000000000",
      "0000000000000000000000000000000000000100000000000000000000000",
      "0000000000000000000000000000000010000000000000000000000000000",
      "0000000000000000000000000000000001001000000000000000000000000",
      "0000000000000000000000000000000000010000000000000000000000000",
      "0000000000000000000000000100001110000000000000000000011100000",
      "1100000000000000000000001011100001000000000000000000000010001",
      "0011011000000000000000001001000010000000000000000000010001000",
      "0011000110110000000000000001001000000000000000011010001011110",
      "1100000110001101100000000011011100011001101110100001000001001",
      "0000011000001100011011000000101100101001110110101000100000010",
      "0000000000110000011000110100010000101010011001001000111100000",
      "0000000000000001100000110010101100100100000000000000000000000",
      "0000000000000000000011000000000001000010000000000110001100000",
      "0000000000000000000000000000000000000001000000000010000000000",
      "0000000000000000000000000000000000001000000000000000000000000",
      "0000000000000000000000000000000000001100000000000000000000000"
    ]
  },
  {
    "name": "wedge",
    "desc": "  A 26-cell quadratic growth pattern found by Nick Gotts in March\n   2006, based on ideas found in {metacatacryst} and {Gotts dots}.  It\n   held the record for the smallest-population quadratic growth pattern\n   for eight years, until it was surpassed by\n   {25-cell quadratic growth}.  See {switch-engine ping-pong} for the\n   lowest-population {superlinear growth} pattern as of July 2018, along\n   with a list of the record-holders.\n",
    "grid": []
  },
  {
    "name": "wedge grow",
    "desc": "  = {wedge}.\n",
    "grid": []
  },
  {
    "name": "weekender",
    "desc": " (2c/7 orthogonally, p7)  Found by David Eppstein in January\n   2000.  In April 2000 Stephen Silver found a tagalong for a pair of\n   weekenders.  At present, n weekenders pulling n-1 tagalongs\n   constitute the only known {spaceship}s of this speed or period,\n   except for variants of the {weekender distaff} that suppress its\n   output gliders.\n",
    "grid": [
      "0100000000000010",
      "0100000000000010",
      "1010000000000101",
      "0100000000000010",
      "0100000000000010",
      "0010001111000100",
      "0000001111000000",
      "0011110000111100",
      "0000000000000000",
      "0000100000010000",
      "0000011001100000"
    ]
  },
  {
    "name": "weekender distaff",
    "desc": " (2c/7, p16982)  The first orthogonal 2c/7 rake,\n   constructed by Ivan Fomichev on May 22nd, 2014.  It uses the weak\n   {spark}s from {weekender}s to perturb an LWSS into an active reaction\n   in a variable-period loop, which produces a series of {slow salvo}\n   gliders that finally rebuilds the LWSS.\n",
    "grid": []
  },
  {
    "name": "weld",
    "desc": "  To join two or more {still life}s or {oscillator}s together.\n   This is often done in order to fit the objects into a smaller space\n   than would otherwise be possible.  The simplest useful example is\n   probably the {integral sign}, which can be considered as a pair of\n   welded {eater1}s.\n",
    "grid": []
  },
  {
    "name": "Wheels, Life, and other Mathematical Amusements",
    "desc": "  One of Martin\n   Gardner's books (1983) that collects together material from his\n   column in Scientific American.  The last three chapters of this book\n   contain all the Life stuff.\n",
    "grid": []
  },
  {
    "name": "why not",
    "desc": " (p2)  Found by Dave Buckingham, July 1977.\n",
    "grid": [
      "0001000",
      "0001010",
      "0100000",
      "1011111",
      "0100000",
      "0001010",
      "0001000"
    ]
  },
  {
    "name": "wick",
    "desc": "  A stable or oscillating linearly repeating pattern that can be\n   made to {burn} at one end.  See {fuse}.  Wicks are often fairly\n   dense, with repeating units directly connected or at least adjacent\n   to each other, as in the beehive {lightspeed wire} for example.\n   However, sparse wicks such as the blocks in the\n   {31c/240 Herschel-pair climber} are known, and arbitrarily sparse\n   wicks can be constructed.\n",
    "grid": []
  },
  {
    "name": "wickstretcher",
    "desc": "  A {spaceship}-like object which stretches a {wick} that\n   is fixed at the other end.  The wick here is assumed to be in some\n   sense connected, otherwise most {puffer}s would qualify as\n   wickstretchers.  The first example of a wickstretcher was found in\n   October 1992 (front end by Hartmut Holzwart and back end by Dean\n   Hickerson) and stretches {ants} at a speed of c/4.  This is shown\n   below with an improved back end found by Hickerson the following\n   month.\n",
    "grid": [
      "0000000000000000011000000000000000000000000000000",
      "0000000000000110000100000000000000000000000000000",
      "0000000000001110100000000000000000000000000000000",
      "1011001100010001111010100001100000001100000000000",
      "1000011001000000001011100001000011010010110100000",
      "1011000011011000010000000000010001010110101100000",
      "0000001000000010000000000000110000010010100011000",
      "0000010000000001010000111000100001001010111000100",
      "0000010000000001010000111011010011010100010011010",
      "0000001000000010000000000000110100011000011000010",
      "1011000011011000010000000000100000000110101011011",
      "1000011001000000001011100000000100010001101001010",
      "1011001100010001111010100000001010001100001001010",
      "0000000000001110100000000000000100000101110000100",
      "0000000000000110000100000000000000000101000000000",
      "0000000000000000011000000000000000000010000000000"
    ]
  },
  {
    "name": "wicktrailer",
    "desc": "  Any {extensible} {tagalong} or {component} that can be\n   attached to itself, as well as to the back of a {spaceship}.  The\n   number of generations that it takes for the component to occur again\n   in the same place is often called the period of the wicktrailer.\n   This has little relation to the period of the component.  See\n   {branching spaceship} for an example of a wicktrailer that is part of\n   a p2 spaceship, but repeats itself in the same location at period 20.\n",
    "grid": []
  },
  {
    "name": "windmill",
    "desc": " (p4)  Found by Dean Hickerson, November 1989.\n",
    "grid": [
      "000000000001000000",
      "000000000110100000",
      "000000011000000000",
      "000000000011000000",
      "000000011100000000",
      "000000000000000000",
      "111000000000000000",
      "000110011101100000",
      "000000000011111110",
      "011111110000000000",
      "000001101110011000",
      "000000000000000111",
      "000000000000000000",
      "000000001110000000",
      "000000110000000000",
      "000000000110000000",
      "000001011000000000",
      "000000100000000000"
    ]
  },
  {
    "name": "wing",
    "desc": "  The following {induction coil}.  This is generation 2 of\n   {block and glider}.\n",
    "grid": [
      "0110",
      "1001",
      "0101",
      "0011"
    ]
  },
  {
    "name": "WinLifeSearch",
    "desc": "  Jason Summers' GUI version of {lifesrc} for MS Windows.\n   It is available from {http://entropymine.com/jason/life/software/}.\n",
    "grid": []
  },
  {
    "name": "Winning Ways",
    "desc": "  A two-volume book (1982) by Elwyn Berlekamp, John Conway\n   and Richard Guy on mathematical games.  The last chapter of the\n   second volume concerns Life, and outlines a proof of the existence of\n   a {universal constructor}.\n",
    "grid": []
  },
  {
    "name": "wire",
    "desc": "  A repeating stable structure, usually fairly dense, that a\n   {signal} can travel along without making any permanent change.  Known\n   wires include the diagonal {2c/3 wire}, and orthogonal\n   {lightspeed wire} made from a chain of beehives.  Diagonal lightspeed\n   wires are known, but the required signals are fairly complex and have\n   no known {glider synthesis}.\n",
    "grid": []
  },
  {
    "name": "with the grain",
    "desc": "  A term used for {negative spaceship}s travelling in\n   {zebra stripes} agar, parallel to the stripes, and also for\n   {with-the-grain grey ship}s.\n     Below are three small examples of \"negative spaceships\" found by\n   Gabriel Nivasch in July 1999, travelling with the grain through a\n   stabilized finite segment of zebra stripes agar:\n",
    "grid": [
      "010010010010010010010010010010010010010010010010010010",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111111111111111111111111110",
      "100000000000000000000000000000000000000000000000000001",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000100000",
      "011111111111111111111111111111111111111110111100001110",
      "100000000000000000000000000000000000000000110000010001",
      "011111111111111111111111111111111111111000001111111110",
      "000000000000000000000000000000000000000000000100000000",
      "011111111111111111111111111111111111100000000011001110",
      "100000000000000000000000000000000000001010000011010001",
      "011111111111111111111111111111111111100010000011101110",
      "000000000000000000000000000000000000000000000100000000",
      "011111111111111111111111111111111111111000001111111110",
      "100000000000000000000000000000000000000000110000010001",
      "011111111111111111111111111111111111111110111100001110",
      "000000000000000000000000000000000000000000000000100000",
      "011111111111111111111111111111111111111111111111111110",
      "100000000000000000000000000000000000000000000000000001",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111110011100111001110011111111110",
      "100000000000000000000000000110001100011000110010000001",
      "011111111111111111111111000100001000010000100000111110",
      "000000000000000000000000000110001100011000110001000000",
      "011111111111111111111111110011100111001110011111111110",
      "100000000000000000000000000000000000000000000000000001",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111111111111111111111111110",
      "100000000000000000000000000000000000000000000000000001",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111001110011100111001110011111110",
      "100000000000000000000000011000110001100011000110000001",
      "011111111111111111111111000110001100011000110001111110",
      "000000000000000000000000000000000000000000000000100000",
      "011111111111111111111100000000000000000000000000011110",
      "100000000000000000000000000000000000000000000000010001",
      "011111111111111111111100000000000000000000000000011110",
      "000000000000000000000000000000000000000000000000100000",
      "011111111111111111111111000110001100011000110001111110",
      "100000000000000000000000011000110001100011000110000001",
      "011111111111111111111111001110011100111001110011111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111111111111111111111111110",
      "100000000000000000000000000000000000000000000000000001",
      "011111111111111111111111111111111111111111111111111110",
      "000000000000000000000000000000000000000000000000000000",
      "011111111111111111111111111111111111111111111111111110",
      "010010010010010010010010010010010010010010010010010010"
    ]
  },
  {
    "name": "with-the-grain grey ship",
    "desc": "  A {grey ship} in which the region of density\n   1/2 consists of lines of ON cells lying parallel to the direction in\n   which the spaceship moves.  See also {against-the-grain grey ship}.\n",
    "grid": []
  },
  {
    "name": "WLS",
    "desc": "  =  {WinLifeSearch}\n",
    "grid": []
  },
  {
    "name": "worker bee",
    "desc": " (p9)  Found by Dave Buckingham in 1972.  Unlike the similar\n   {snacker} this produces no {spark}s, and so is not very important.\n   Like the snacker, the worker bee is {extensible}.  It is, in fact, a\n   finite version of the infinite oscillator which consists of six ON\n   cells and two OFF cells alternating along a line.  Note that Dean\n   Hickerson's new snacker ends also work here.\n",
    "grid": [
      "1100000000000011",
      "0100000000000010",
      "0101000000001010",
      "0011000000001100",
      "0000000000000000",
      "0000011111100000",
      "0000000000000000",
      "0011000000001100",
      "0101000000001010",
      "0100000000000010",
      "1100000000000011"
    ]
  },
  {
    "name": "W-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a common\n   {loaf} {predecessor}.\n",
    "grid": [
      "100",
      "110",
      "011"
    ]
  },
  {
    "name": "*WSS",
    "desc": "  Any of the standard orthogonal {spaceship}s - {LWSS}, {MWSS}, or\n   {HWSS}.  At one point the term {fish} was more common for this group\n   of spaceships.\n",
    "grid": []
  },
  {
    "name": "x66",
    "desc": " (c/2 orthogonally, p4)  Found by Hartmut Holzwart, July 1992. Half\n   of this can be escorted by an HWSS.  The name refers to the fact that\n   every cell (live or dead) has at most 6 live neighbours (in contrast\n   to {spaceship}s based on {LWSS}, {MWSS} or {HWSS}). In fact this\n   spaceship was found by a search with this restriction.\n",
    "grid": [
      "001000000",
      "110000000",
      "100111001",
      "100001110",
      "011100110",
      "000000000",
      "011100110",
      "100001110",
      "100111001",
      "110000000",
      "001000000"
    ]
  },
  {
    "name": "Xlife",
    "desc": "  A popular freeware Life program that runs under the X Window\n   System.  The main Life code was written by Jon Bennett, and the X\n   code by Chuck Silvers.\n",
    "grid": []
  },
  {
    "name": "X-pentomino",
    "desc": "  Conway's name for the following {pentomino}, a\n   {traffic light} {predecessor}.\n",
    "grid": [
      "010",
      "111",
      "010"
    ]
  },
  {
    "name": "Y-pentomino",
    "desc": "  Conway's name for the following {pentomino}, which\n   rapidly dies.\n",
    "grid": [
      "0010",
      "1111"
    ]
  },
  {
    "name": "zebra stripes",
    "desc": " (p1)  A stable agar consisting of alternating bands of\n   live and dead cells. Known {spacefiller}s and many {gray ship}s\n   create patches of this agar. It is also the medium through which\n   {with the grain} and {against the grain} {negative spaceship}s\n   travel.  Many simple stabilizations of the boundaries of finite\n   regions of this agar are known, as shown below.\n",
    "grid": [
      "001100000000000000000000000",
      "001000000000000000000000000",
      "000010010010010010010010000",
      "000111111111111111111110000",
      "001000000000000000000000000",
      "000111111111111111111000000",
      "000000000000000000000100000",
      "011111111111111111111000000",
      "100000000000000000000000000",
      "011111111111111111111110000",
      "000000000000000000000001011",
      "011111111111111111111001011",
      "100000000000000000000101000",
      "011111111111111111111001000",
      "000000000000000000000001100",
      "000111111111111111111000000",
      "001000000000000000000100000",
      "000111111111111111111000000",
      "000000000000000000000000000",
      "000001100110101111011000000",
      "000001100101101001011000000"
    ]
  },
  {
    "name": "Z-hexomino",
    "desc": "  The following {hexomino}.  The Z-hexomino features in the\n   {pentoad}, and also in {Achim's p144}.\n",
    "grid": [
      "110",
      "010",
      "010",
      "011"
    ]
  },
  {
    "name": "zone of influence",
    "desc": "  The set of cells on which a chosen cell or pattern\n   can potentially exert an influence in a given number of generations\n   N. If N is not specified it is generally taken to be one, in which\n   case the zone of influence simply coincides with the Moore\n   neighbourhood of the cell or pattern.\n     The set for N generations consists of all the cells to which at\n   least N paths of length N can be traced from the cell(s) in question.\n   Contrast this with the range-N Moore neighbourhood, which consists of\n   all cells to which at least one path of length n can be traced.\n",
    "grid": []
  },
  {
    "name": "Z-pentomino",
    "desc": "  Conway's name for the following {pentomino}, which\n   rapidly dies.\n",
    "grid": [
      "110",
      "010",
      "011"
    ]
  },
  {
    "name": "zweiback",
    "desc": " (p30)  An oscillator in which two {HW volcano}es {hassle} a\n   {loaf}.  This was found by Mark Niemiec in February 1995.  A smaller\n   version using Scot Ellison's reduced HW volcano is shown below.\n",
    "grid": [
      "00000000001000000000000000000000000000000",
      "00000000111110000000000000000010000000000",
      "00000001000001000000000000001111100000000",
      "00000001001101000000000000010000010000000",
      "00010111010101100000000000010110010000000",
      "00011000010000000000000000110101011101000",
      "00000011011000000000000000000001000011000",
      "01111101010010000000000000000011011000000",
      "10000001000101000000000000001001010111110",
      "11001111101101000000000000010100010000001",
      "00000000000011000000000000010110111110011",
      "00000110000111000000000000011000000000000",
      "00000110000111000001100000011100001100000",
      "00000000000011000010010000011100001100000",
      "11001111101101000001010000011000000000000",
      "10000001000101000000100000010110111110011",
      "01111101010010000000000000010100010000001",
      "00000011011000000000000000001001010111110",
      "00011000010000000000000000000011011000000",
      "00010111010101100000000000000001000011000",
      "00000001001101000000000000110101011101000",
      "00000001000001000000000000010110010000000",
      "00000000111110000000000000010000010000000",
      "00000000001000000000000000001111100000000",
      "00000000000000000000000000000010000000000"
    ]
  }
]
